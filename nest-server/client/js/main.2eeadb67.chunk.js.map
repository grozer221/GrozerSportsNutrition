{"version":3,"sources":["admin-area/components/Layout/AdminLayout.module.css","admin-area/components/Products/ProductUpdate/ProductUpdate.module.css","admin-area/components/Files/FilesUpdate/FilesUpdate.module.css","components/Loading/Loading.module.css","admin-area/components/Menu/AppMenu.module.css","admin-area/components/Header/AppHeader.module.css","admin-area/components/Products/ProductsIndex/ProductsIndex.module.css","admin-area/components/Files/FilesCreate/FilesCreate.module.css","admin-area/components/Files/FilesView/FilesView.module.css","client-area/Layout/ClientLayout.tsx","admin-area/GraphQL/auth-query.ts","redux/auth-reducer.ts","components/Loading/Loading.tsx","redux/auth-selectors.ts","admin-area/components/Menu/AppMenu.tsx","admin-area/components/Header/AppHeader.tsx","admin-area/components/Breadcrumb/AppBreadcrumb.tsx","admin-area/components/Home/Home.tsx","admin-area/GraphQL/users-query.ts","admin-area/components/Users/UsersIndex/UsersIndex.tsx","admin-area/components/Error/Error.tsx","admin-area/components/Users/UsersController.tsx","admin-area/GraphQL/products-mutation.ts","admin-area/components/Products/ProductCreate/ProductCreate.tsx","admin-area/GraphQL/products-query.ts","admin-area/components/Products/ProductsIndex/ProductsIndex.tsx","admin-area/components/Products/ProductUpdate/ProductUpdate.tsx","admin-area/components/Products/ProductView/ProductView.tsx","admin-area/components/Products/ProductRemove/ProductRemove.tsx","admin-area/components/Products/ProductsController.tsx","admin-area/components/Categories/CategoriesIndex/CategoriesIndex.tsx","admin-area/components/Categories/CategoriesController.tsx","admin-area/GraphQL/files-mutation.ts","api/api.ts","components/PinnedFiles/PinnedFiles.tsx","api/files-api.ts","redux/files-reducer.ts","redux/files.selectors.ts","admin-area/components/Files/FilesCreate/FilesCreate.tsx","admin-area/GraphQL/files-query.ts","admin-area/components/ButtonsVUD/ButtonsVUR.tsx","admin-area/components/Files/FilesIndex/FilesIndex.tsx","admin-area/components/Files/FilesUpdate/FilesUpdate.tsx","admin-area/components/Files/FilesView/FilesView.tsx","admin-area/components/Files/FilesRemove/FilesRemove.tsx","admin-area/components/Files/FilesController.tsx","admin-area/components/Layout/AdminLayout.tsx","admin-area/GraphQL/auth-mutation.ts","admin-area/components/Login/Login.tsx","App.tsx","redux/redux-store.ts","index.tsx","admin-area/components/ButtonsVUD/ButtonsVUR.module.css","admin-area/components/Login/Login.module.css"],"names":["module","exports","ClientLayout","to","path","element","Users","ME_QUERY","gql","initialState","authData","isAuth","actions","type","payload","authReducer","state","action","Loading","className","s","wrapper_svg","size","s_getAuthData","auth","s_getIsAuth","Sider","Layout","SubMenu","Menu","AppMenu","useState","collapsed","setCollapsed","collapsible","onCollapse","logo","theme","defaultSelectedKeys","mode","Item","icon","HomeOutlined","ShoppingOutlined","AppstoreOutlined","FileOutlined","TeamOutlined","title","SettingOutlined","UserOutlined","Header","AppHeader","useSelector","dispatch","useDispatch","menu","onClick","a","localStorage","removeItem","wrapperHeader","overlay","placement","user","firstName","lastName","DownOutlined","AppBreadcrumb","modules","useLocation","pathname","split","filter","Boolean","map","i","Home","GET_USER_QUERY","UsersIndex","console","log","useQuery","variables","getUsersInput","skip","take","loading","error","data","getUsers","email","roles","role","name","id","Error","UsersController","CREATE_PRODUCT_MUTATION","PRODUCT_UPDATE_MUTATION","PRODUCT_REMOVE_MUTATION","ProductCreate","useMutation","createProduct","navigate","useNavigate","onFinish","values","createProductInput","response","errors","uid","status","url","fileList","setFileList","onPreview","file","src","Promise","resolve","reader","FileReader","readAsDataURL","originFileObj","onload","result","image","Image","imgWindow","window","open","document","write","outerHTML","rotate","location","protocol","host","listType","onChange","e","maxCount","length","label","rules","required","message","placeholder","htmlType","GET_PRODUCTS_QUERY","GET_PRODUCT_QUERY","ProductsIndex","getProductsInput","getProducts","product","ProductUpdate","params","useParams","parseInt","updateProductInput","initialValues","getProduct","inputId","ProductView","ProductRemove","removeProduct","onRemove","ProductsController","CategoriesIndex","CategoriesController","CREATE_FILE_MUTATION","REMOVE_FILE_MUTATION","instance","axios","create","baseURL","urls","PinnedFiles","files","setFiles","columns","key","render","text","regex","match","shape","URL","createObjectURL","alt","dataIndex","fileRemove","DeleteOutlined","dataSource","pagination","filesAPI","formData","FormData","forEach","append","post","headers","then","res","uploadedFiles","upload","filesReducer","s_getLoading","s_getUploadedFiles","FilesCreate","createFile","loadingUpload","useEffect","createFileInput","multiple","style","display","target","Array","from","labelFile","htmlFor","PlusOutlined","GET_FILES_QUERY","GET_FILE_QUERY","ButtonsVUR","viewUrl","updateUrl","removeUrl","onView","onUpdate","buttonsVUR","buttonView","EyeOutlined","buttonUpdate","FormOutlined","buttonRemove","FilesIndex","getFilesInput","refetch","removeFile","removeFileOptions","pageTake","setPageTake","pageSkip","setSkipTake","setSelectedFiles","rowSelection","selectedRowKeys","selectedRows","mimetype","destination","fileName","href","getFiles","total","pageNumber","onShowSizeChange","pageSize","FilesUpdate","Meta","Card","FilesView","card","cover","getFile","originalName","description","FilesRemove","FilesController","Content","AdminLayout","layout","content","siteLayoutBackground","LOGIN_MUTATION","Login","login","loginInput","password","setItem","accessToken","loginForm","remember","prefix","LockOutlined","valuePropName","noStyle","rememberMe","white","forgotPass","submit","join","App","isInitialised","setIsInitialised","me","graphQLErrors","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","client","ApolloClient","uri","cache","InMemoryCache","authorization","getItem","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","ReactDOM","StrictMode","ApolloProvider","getElementById"],"mappings":"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","file":"js/main.2eeadb67.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"AdminLayout_layout__3Urpo\",\"content\":\"AdminLayout_content__3Vxtf\",\"siteLayoutBackground\":\"AdminLayout_siteLayoutBackground__3DuLp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputId\":\"ProductUpdate_inputId__d26CZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputId\":\"FilesUpdate_inputId__13bMz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper_svg\":\"Loading_wrapper_svg__34QF_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"AppMenu_logo__2s0i4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperHeader\":\"AppHeader_wrapperHeader__xXvM-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"product\":\"ProductsIndex_product__2CaA3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"labelFile\":\"FilesCreate_labelFile__3vTUb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"FilesView_card__370KY\"};","import React, {FC} from \"react\";\r\nimport {Link, Route, Routes} from \"react-router-dom\";\r\n\r\nexport const ClientLayout: FC = () => {\r\n    return (\r\n        <>\r\n            <Link to={'/admin'}>AdminArea</Link>\r\n            <Routes>\r\n                <Route path={'/'} element={<div>client layout</div>}/>\r\n                <Route path={'users/*'} element={<Users/>}/>\r\n                <Route path={'*'} element={<div>Client Error</div>}/>\r\n            </Routes>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst Users: FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<div>client users</div>}/>\r\n            <Route path={':id'} element={<div>client user</div>}/>\r\n        </Routes>\r\n    )\r\n}\r\n","import {gql} from '@apollo/client';\r\nimport {Auth, User} from '../../types/types';\r\n\r\nexport type MeData = { me: Auth }\r\nexport type MeVars = {}\r\n\r\n\r\nexport const ME_QUERY = gql`\r\n    query Me {\r\n        me {\r\n            user {\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                roles {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n            accessToken\r\n        }\r\n    }\r\n\r\n`\r\n","import {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {Auth} from \"../types/types\";\r\n\r\nlet initialState = {\r\n    authData: null as null | Auth,\r\n    isAuth: false,\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_AUTH_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setAuthData: (authData: Auth | null, isAuth: boolean) => ({\r\n        type: 'SET_AUTH_DATA',\r\n        payload: {authData, isAuth}\r\n    } as const),\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    localStorage.removeItem('token');\r\n    dispatch(actions.setAuthData(null, false));\r\n}\r\n\r\nexport default authReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType>;\r\n","import React from 'react';\r\nimport s from './Loading.module.css';\r\nimport {Spin} from \"antd\";\r\n\r\nexport const Loading: React.FC = () => {\r\n    return (\r\n        <div className={s.wrapper_svg}>\r\n            <Spin size={'large'}/>\r\n        </div>\r\n    );\r\n}","import { AppStateType } from './redux-store';\r\n\r\nexport const s_getAuthData = (state: AppStateType) => {\r\n    return state.auth.authData;\r\n}\r\n\r\nexport const s_getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth;\r\n}\r\n","import React, {FC, useState} from 'react';\r\nimport {Layout, Menu} from 'antd';\r\nimport {\r\n    AppstoreOutlined,\r\n    FileOutlined,\r\n    HomeOutlined,\r\n    SettingOutlined,\r\n    ShoppingOutlined,\r\n    TeamOutlined,\r\n    UserOutlined,\r\n} from '@ant-design/icons';\r\nimport s from './AppMenu.module.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst {Sider} = Layout;\r\nconst {SubMenu} = Menu;\r\n\r\n\r\nexport const AppMenu: FC = () => {\r\n    const [collapsed, setCollapsed] = useState(false);\r\n\r\n    return (\r\n        <Sider collapsible collapsed={collapsed} onCollapse={setCollapsed}>\r\n            <div className={s.logo}/>\r\n            <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n                <Menu.Item key=\"10\" icon={<HomeOutlined/>}>\r\n                    <Link to={'/admin'}>Home</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"20\" icon={<ShoppingOutlined/>}>\r\n                    <Link to={'/admin/products'}>Products</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"30\" icon={<AppstoreOutlined/>}>\r\n                    <Link to={'/admin/categories'}>Categories</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"40\" icon={<FileOutlined/>}>\r\n                    <Link to={'/admin/files'}>Files</Link>\r\n                </Menu.Item>\r\n                <SubMenu key=\"sub1\" icon={<TeamOutlined/>} title=\"Users\">\r\n                    <Menu.Item key=\"50\">\r\n                        <Link to={'/admin/users'}>\r\n                            Customers\r\n                        </Link>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"60\">\r\n                        <Link to={'/admin/users'}>\r\n                            Employees\r\n                        </Link>\r\n                    </Menu.Item>\r\n                </SubMenu>\r\n                <Menu.Item key=\"70\" icon={<SettingOutlined/>}>\r\n                    Settings\r\n                </Menu.Item>\r\n                <Menu.Item key=\"80\" icon={<UserOutlined/>}>\r\n                    <Link to={'/'}>Client site</Link>\r\n                </Menu.Item>\r\n            </Menu>\r\n        </Sider>\r\n    );\r\n};\r\n","import React, {FC} from \"react\";\r\nimport {Dropdown, Layout, Menu} from \"antd\";\r\nimport s from './AppHeader.module.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {s_getAuthData} from \"../../../redux/auth-selectors\";\r\nimport {Auth} from \"../../../types/types\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {logout} from \"../../../redux/auth-reducer\";\r\nimport {DownOutlined} from \"@ant-design/icons\";\r\n\r\nconst {Header} = Layout;\r\n\r\nexport const AppHeader: FC = () => {\r\n    const authData = useSelector(s_getAuthData) as Auth;\r\n    const dispatch = useDispatch();\r\n\r\n    const menu = (\r\n        <Menu>\r\n            <Menu.Item>\r\n                <Link to={''}>\r\n                    1st menu item\r\n                </Link>\r\n            </Menu.Item>\r\n            <Menu.Item onClick={() => dispatch(logout())}>\r\n                Logout\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n\r\n    return (\r\n        <Header className={s.wrapperHeader}>\r\n            <div></div>\r\n            <Dropdown overlay={menu} placement=\"topRight\">\r\n                <div>\r\n                    <span>{authData.user.firstName} {authData.user.lastName}</span>\r\n                    <DownOutlined/>\r\n                </div>\r\n            </Dropdown>\r\n        </Header>\r\n    );\r\n}\r\n","import React, {FC} from 'react';\r\nimport {Breadcrumb} from 'antd';\r\nimport {useLocation} from 'react-router-dom';\r\n\r\nexport const AppBreadcrumb: FC = () => {\r\n    const location = useLocation();\r\n    let modules = location.pathname.split('/');\r\n    modules = modules.filter(Boolean);\r\n\r\n    return (\r\n        <Breadcrumb>\r\n            {modules.map((module, i) => <Breadcrumb.Item key={i}>{module}</Breadcrumb.Item>)}\r\n        </Breadcrumb>\r\n    );\r\n};\r\n","import React, {FC} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport s from './Home.module.css';\r\n\r\nexport const Home: FC = () => {\r\n    return (\r\n        <>\r\n            <div>HOME</div>\r\n            <Link to={'/'}>client site</Link>\r\n        </>\r\n    );\r\n}\r\n","import {gql} from '@apollo/client';\r\nimport {User} from '../../types/types';\r\n\r\nexport type GetUsersData = { getUsers: User[] }\r\nexport type GetUsersVars = { getUsersInput: getUsersInput }\r\n\r\ntype getUsersInput = { take: number, skip: number }\r\n\r\nexport const GET_USER_QUERY = gql`\r\n    query GetUsers($getUsersInput: GetUsersInput!){\r\n        getUsers(getUsersInput: $getUsersInput){\r\n            id\r\n            email\r\n            firstName\r\n            lastName\r\n            roles{\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n","import {useQuery} from '@apollo/client';\r\nimport React, {FC} from 'react';\r\nimport {Loading} from '../../../../components/Loading/Loading';\r\nimport {GetUsersData, GetUsersVars, GET_USER_QUERY} from '../../../GraphQL/users-query';\r\n\r\nexport const UsersIndex: FC = () => {\r\n    console.log('UsersIndex')\r\n    const {loading, error, data} = useQuery<GetUsersData, GetUsersVars>(\r\n        GET_USER_QUERY,\r\n        {variables: {getUsersInput: {skip: 0, take: 5}}}\r\n    );\r\n\r\n    if (loading)\r\n        return <Loading/>\r\n\r\n    if (error)\r\n        console.log(error)\r\n\r\n    return (\r\n        <>\r\n            <ul>\r\n                {data?.getUsers.map(user => (\r\n                    <li key={user.id}>\r\n                        <div>{user.email}</div>\r\n                        <div>{user.firstName}</div>\r\n                        <div>{user.lastName}</div>\r\n                        <ul>{user.roles.map(role => (\r\n                            <li key={role.id}>{role.name}</li>\r\n                        ))}</ul>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport s from './Error.module.css';\r\n\r\nexport const Error: FC = () => {\r\n    return (\r\n        <>\r\n            <div>Error</div>\r\n            <Link to={'/'}>Go home</Link>\r\n        </>\r\n    );\r\n};\r\n","import React, {FC} from \"react\";\r\nimport {Link, Route, Routes} from \"react-router-dom\";\r\nimport {UsersIndex} from \"./UsersIndex/UsersIndex\";\r\nimport {Error} from \"../Error/Error\";\r\n\r\nexport const UsersController: FC = () => {\r\n    console.log('UsersController')\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<UsersIndex/>}/>\r\n            <Route path={':id'} element={<div>user</div>}/>\r\n            <Route path={'add'} element={<div>add user</div>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n}\r\n","import {gql} from '@apollo/client';\r\nimport {Product} from '../../types/types';\r\n\r\nexport type CreateProductData = { createProduct: Product[] }\r\nexport type CreateProductVars = { createProductInput: createProductInput }\r\n\r\ntype createProductInput = { name: string }\r\n\r\nexport const CREATE_PRODUCT_MUTATION = gql`\r\n    mutation CreateProduct($createProductInput: CreateProductInput!){\r\n        createProduct(createProductInput: $createProductInput){\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport type ProductUpdateData = { updateProduct: Product }\r\nexport type ProductUpdateVars = { updateProductInput: Product }\r\n\r\nexport const PRODUCT_UPDATE_MUTATION = gql`\r\n    mutation UpdateProduct($updateProductInput: UpdateProductInput!){\r\n        updateProduct(updateProductInput: $updateProductInput){\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type ProductRemoveData = { removeProduct: boolean }\r\nexport type ProductRemoveVars = { id: number }\r\n\r\nexport const PRODUCT_REMOVE_MUTATION = gql`\r\n    mutation RemoveProduct($id: Int!){\r\n        removeProduct(id: $id)\r\n    }\r\n`;\r\n\r\n","import {useMutation} from '@apollo/client';\r\nimport {Button, Form, Input, Upload} from 'antd';\r\nimport React, {FC, useState} from 'react';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {CREATE_PRODUCT_MUTATION, CreateProductData, CreateProductVars} from '../../../GraphQL/products-mutation';\r\nimport ImgCrop from 'antd-img-crop';\r\nimport {UploadFile} from 'antd/es/upload/interface';\r\n\r\nexport const ProductCreate: FC = () => {\r\n    const [createProduct, {\r\n        loading,\r\n    }] = useMutation<CreateProductData, CreateProductVars>(CREATE_PRODUCT_MUTATION);\r\n    const navigate = useNavigate();\r\n\r\n    const onFinish = async (values: { name: string }) => {\r\n        console.log('Received values of form: ', values);\r\n        const response = await createProduct({variables: {createProductInput: {...values}}});\r\n        console.log(response);\r\n        if (response.data && !response.errors) {\r\n            navigate('..');\r\n        } else\r\n            console.log('error:', response.errors);\r\n    };\r\n\r\n    const [fileList, setFileList] = useState([\r\n        {\r\n            uid: '-1',\r\n            name: 'image.png',\r\n            status: 'done',\r\n            url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\r\n        },\r\n    ]);\r\n\r\n    const onChange = (e: any) => {\r\n        setFileList(e.fileList);\r\n    };\r\n\r\n    const onPreview = async (file: any) => {\r\n        let src = file.url;\r\n        if (!src) {\r\n            src = await new Promise(resolve => {\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(file.originFileObj);\r\n                reader.onload = () => resolve(reader.result);\r\n            });\r\n        }\r\n        const image = new Image();\r\n        image.src = src;\r\n        const imgWindow = window.open(src);\r\n        imgWindow?.document.write(image.outerHTML);\r\n    };\r\n\r\n    const handler = () => {\r\n\r\n    };\r\n\r\n    return (\r\n        <Form name=\"createProduct\" onFinish={onFinish}>\r\n            <ImgCrop rotate>\r\n                <Upload\r\n                    action={window.location.protocol + '//' + window.location.host + '/api/files/upload'}\r\n                    listType=\"picture-card\"\r\n                    fileList={fileList as UploadFile<any>[]}\r\n                    onChange={onChange}\r\n                    onPreview={onPreview}\r\n                    maxCount={20}\r\n                >\r\n                    {fileList.length < 5 && '+ Upload'}\r\n                </Upload>\r\n            </ImgCrop>\r\n            <Form.Item\r\n                name=\"name\"\r\n                label=\"Name\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input product name',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder=\"Product name\"/>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType={'submit'} loading={loading}>\r\n                    Create\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n","import {gql} from '@apollo/client';\r\nimport {Product} from '../../types/types';\r\n\r\nexport type GetProductsData = { getProducts: Product[] }\r\nexport type GetProductsVars = { getProductsInput: getProductsInput }\r\n\r\ntype getProductsInput = { take: number, skip: number }\r\n\r\nexport const GET_PRODUCTS_QUERY = gql`\r\n    query GetProducts($getProductsInput: GetProductsInput!){\r\n        getProducts(getProductsInput: $getProductsInput){\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport type GetProductData = { getProduct: Product }\r\nexport type GetProductVars = { id: number }\r\n\r\n\r\nexport const GET_PRODUCT_QUERY = gql`\r\n    query GetProduct($id: Int!){\r\n        getProduct(id: $id){\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\n","import {useQuery} from '@apollo/client';\r\nimport {Button} from 'antd';\r\nimport React, {FC, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Loading} from '../../../../components/Loading/Loading';\r\nimport {GET_PRODUCTS_QUERY, GetProductsData, GetProductsVars} from '../../../GraphQL/products-query';\r\nimport s from './ProductsIndex.module.css';\r\nimport {ProductRemove} from '../ProductRemove/ProductRemove';\r\nimport {Product} from '../../../../types/types';\r\n\r\nexport const ProductsIndex: FC = () => {\r\n    const {loading, error, data} = useQuery<GetProductsData, GetProductsVars>(\r\n        GET_PRODUCTS_QUERY,\r\n        {variables: {getProductsInput: {skip: 0, take: 10}}},\r\n    );\r\n\r\n    const [visibleRemove, setVisibleRemove] = useState(false);\r\n    const [productRemove, setProductRemove] = useState<Product | null>(null);\r\n\r\n    if (loading)\r\n        return <Loading/>;\r\n\r\n    if (error)\r\n        console.log(error);\r\n\r\n    return (\r\n        <>\r\n            <Link to={'create'}>\r\n                <Button>Create</Button>\r\n            </Link>\r\n            <ul>\r\n                {data?.getProducts.map(product => (\r\n                    <li key={product.id} className={s.product}>\r\n                        <div>\r\n                            <div>{product.name}</div>\r\n                        </div>\r\n                        <div>\r\n                            <Link to={`../${product.id}`}>\r\n                                <Button type={'default'}>View</Button>\r\n                            </Link>\r\n                            <Link to={`update/${product.id}`}>\r\n                                <Button type={'ghost'}>Update</Button>\r\n                            </Link>\r\n                            <Link to={`remove/${product.id}`}>\r\n                                <Button type={'primary'}>Remove</Button>\r\n                            </Link>\r\n                        </div>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {/*<FilesRemove visible={visibleRemove}*/}\r\n            {/*               productId={productRemove?.id}*/}\r\n            {/*               productName={productRemove?.name}*/}\r\n            {/*               setVisible={setVisibleRemove}/>*/}\r\n        </>\r\n    );\r\n};\r\n\r\n","import {useMutation, useQuery} from '@apollo/client';\r\nimport {Button, Form, Input} from 'antd';\r\nimport React, {FC} from 'react';\r\nimport {Navigate, useNavigate, useParams} from 'react-router-dom';\r\nimport {PRODUCT_UPDATE_MUTATION, ProductUpdateData, ProductUpdateVars} from '../../../GraphQL/products-mutation';\r\nimport s from './ProductUpdate.module.css';\r\nimport {GET_PRODUCT_QUERY, GetProductData, GetProductVars} from '../../../GraphQL/products-query';\r\nimport {Loading} from '../../../../components/Loading/Loading';\r\n\r\nexport const ProductUpdate: FC = () => {\r\n    const params = useParams();\r\n\r\n    const {loading, error, data} = useQuery<GetProductData, GetProductVars>(\r\n        GET_PRODUCT_QUERY,\r\n        {variables: {id: params.id ? parseInt(params.id) : 0}},\r\n    );\r\n    const [createProduct] = useMutation<ProductUpdateData, ProductUpdateVars>(PRODUCT_UPDATE_MUTATION);\r\n    const navigate = useNavigate();\r\n\r\n    if (!params.id)\r\n        return <Navigate to={'../../error'}/>;\r\n\r\n    if (loading)\r\n        return <Loading/>;\r\n\r\n    if (error)\r\n        console.log(error);\r\n\r\n    const onFinish = async (values: { id: number, name: string }) => {\r\n        console.log('Received values of form: ', values);\r\n        const response = await createProduct({variables: {updateProductInput: {...values}}});\r\n        console.log(response);\r\n        if (response.data && !response.errors) {\r\n            navigate('..');\r\n        } else\r\n            console.log('error:', response.errors);\r\n    };\r\n\r\n    return (\r\n        <Form name=\"createProduct\" onFinish={onFinish}\r\n              initialValues={{id: data?.getProduct.id, name: data?.getProduct.name}}>\r\n            <Form.Item name=\"id\" className={s.inputId}>\r\n                <Input type={'hidden'} className={s.inputId}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"name\"\r\n                label=\"Name\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input product name',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder=\"Product name\"/>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType={'submit'}>\r\n                    Update\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Navigate, useParams} from 'react-router-dom';\r\nimport {useQuery} from '@apollo/client';\r\nimport {GET_PRODUCT_QUERY, GetProductData, GetProductVars} from '../../../GraphQL/products-query';\r\nimport {Loading} from '../../../../components/Loading/Loading';\r\n\r\nexport const ProductView: FC = () => {\r\n    const params = useParams();\r\n\r\n    const {loading, error, data} = useQuery<GetProductData, GetProductVars>(\r\n        GET_PRODUCT_QUERY,\r\n        {variables: {id: params.id ? parseInt(params.id) : 0}},\r\n    );\r\n\r\n    if (!params.id)\r\n        return <Navigate to={'../../error'}/>;\r\n\r\n    if (loading)\r\n        return <Loading/>;\r\n\r\n    if (error)\r\n        console.log(error);\r\n\r\n    return (\r\n        <>\r\n            <div>id: {data?.getProduct.id}</div>\r\n            <div>name: {data?.getProduct.name}</div>\r\n        </>\r\n    );\r\n};\r\n","import React, {FC, useState} from 'react';\r\nimport {ModalWindow} from '../../../../components/Modal/ModalWindow';\r\nimport {useMutation} from '@apollo/client';\r\nimport {PRODUCT_REMOVE_MUTATION, ProductRemoveData, ProductRemoveVars} from '../../../GraphQL/products-mutation';\r\nimport {ProductView} from '../ProductView/ProductView';\r\nimport {Navigate, useNavigate, useParams} from 'react-router-dom';\r\nimport {Button} from 'antd';\r\nimport {Error} from '../../Error/Error';\r\n\r\ntype Props = {\r\n    visible: boolean,\r\n    productId: number | undefined,\r\n    productName: string | undefined,\r\n    setVisible: (flag: boolean) => void\r\n}\r\n\r\n// export const FilesRemove: FC<Props> = ({visible, productId, productName, setVisible}) => {\r\n//     const [removeProduct] = useMutation<ProductRemoveData, ProductRemoveVars>(PRODUCT_REMOVE_MUTATION);\r\n//\r\n//     const [confirmLoading, setConfirmLoading] = useState(false);\r\n//     const modalText = `Do you really want to delete product <strong>${productName}</strong>`;\r\n//\r\n//\r\n//     const handleCancel = () => {\r\n//         console.log('canceled', productName);\r\n//         setVisible(false);\r\n//     };\r\n//\r\n//     if (!productId)\r\n//         return null;\r\n//\r\n//     const handleOk = async () => {\r\n//         console.log('ok', productName);\r\n//         setConfirmLoading(true);\r\n//         const response = await removeProduct({variables: {id: productId}});\r\n//         if (response.data?.removeProduct) {\r\n//             setConfirmLoading(false);\r\n//             setVisible(false);\r\n//         } else\r\n//             console.log(response.errors);\r\n//     };\r\n//\r\n//     return (\r\n//         <ModalWindow\r\n//             visible={visible}\r\n//             title={'Confirmation'}\r\n//             modalText={modalText}\r\n//             handleCancel={handleCancel}\r\n//             handleOk={handleOk}\r\n//             confirmLoading={confirmLoading}\r\n//         />\r\n//     );\r\n// };\r\n\r\nexport const ProductRemove: FC = () => {\r\n    const params = useParams();\r\n    const [removeProduct, {loading}] = useMutation<ProductRemoveData, ProductRemoveVars>(PRODUCT_REMOVE_MUTATION);\r\n    const navigate = useNavigate();\r\n\r\n    if (!params || !params.id)\r\n        return <Navigate to={'../../error'}/>;\r\n\r\n    const onRemove = async () => {\r\n        const response = await removeProduct({variables: {id: parseInt(params.id as string)}});\r\n        if (response.data)\r\n            navigate('..');\r\n        else\r\n            console.log(response.errors);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ProductView/>\r\n            <Button onClick={onRemove} loading={loading}>Remove</Button>\r\n        </>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {Error} from '../Error/Error';\r\nimport {ProductCreate} from './ProductCreate/ProductCreate';\r\nimport {ProductsIndex} from './ProductsIndex/ProductsIndex';\r\nimport {ProductUpdate} from './ProductUpdate/ProductUpdate';\r\nimport {ProductView} from './ProductView/ProductView';\r\nimport {ProductRemove} from './ProductRemove/ProductRemove';\r\n\r\nexport const ProductsController: FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<ProductsIndex/>}/>\r\n            <Route path={':id'} element={<ProductView/>}/>\r\n            <Route path={'create'} element={<ProductCreate/>}/>\r\n            <Route path={'update/:id'} element={<ProductUpdate/>}/>\r\n            <Route path={'remove/:id'} element={<ProductRemove/>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n};\r\n","import React, { FC } from 'react';\r\n\r\nexport const CategoriesIndex: FC = () => {\r\n    return(\r\n        <div>Categories</div>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {Link, Route, Routes} from \"react-router-dom\";\r\nimport {Error} from \"../Error/Error\";\r\nimport { CategoriesIndex } from \"./CategoriesIndex/CategoriesIndex\";\r\n\r\nexport const CategoriesController: FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<CategoriesIndex/>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n}\r\n","import {FileType} from '../../types/types';\r\nimport {gql} from '@apollo/client';\r\n\r\nexport type CreateFileData = { createFile: FileType[] }\r\nexport type CreateFileVars = { createFileInput: createFileInput }\r\n\r\nexport type createFileInput = {\r\n    originalName: string;\r\n    mimetype: string;\r\n    destination: string;\r\n    fileName: string;\r\n    size: number;\r\n}\r\nexport const CREATE_FILE_MUTATION = gql`\r\n    mutation CreateFile($createFileInput: CreateFileInput!) {\r\n        createFile(createFileInput: $createFileInput) {\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport type RemoveFileData = {}\r\nexport type RemoveFileVars = { id: number }\r\n\r\nexport const REMOVE_FILE_MUTATION = gql`\r\n    mutation RemoveFile($id: Int!){\r\n        removeFile(id: $id)\r\n    }\r\n`;\r\n","import axios from 'axios';\r\n\r\nexport const instance = axios.create({\r\n    // baseURL: window.location.protocol + '//' + window.location.host + '/api/',\r\n    baseURL: 'http://localhost:3001/api/',\r\n});\r\n\r\nexport const urls = {\r\n    // server: window.location.protocol + '//' + window.location.host,\r\n    server: 'http://localhost:3001/'\r\n}\r\n","import React from 'react';\r\nimport {Avatar, Table} from 'antd';\r\nimport {DeleteOutlined} from '@ant-design/icons';\r\nimport {urls} from '../../api/api';\r\n\r\ntype Props = {\r\n    files: File[],\r\n    setFiles: (files: File[]) => void,\r\n    loading: boolean,\r\n}\r\n\r\nexport const PinnedFiles: React.FC<Props> = ({loading, files, setFiles}) => {\r\n\r\n    const clickRemoveHandler = (fileRemove: File) => {\r\n        files = files.filter(file => file !== fileRemove);\r\n        setFiles(files);\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Image',\r\n            key: 'image',\r\n            render: (text: any, file: File) => {\r\n                const regex = file.type.match(/image/);\r\n                return (\r\n                    <Avatar shape={'square'} size={48}\r\n                            src={regex && regex.length ? URL.createObjectURL(file) : urls.server + 'static/images/file.png'}\r\n                            alt={file.name}/>\r\n                );\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Size',\r\n            dataIndex: 'size',\r\n            key: 'size',\r\n        },\r\n        {\r\n            title: 'Actions',\r\n            key: 'actions',\r\n            render: (text: any, file: File) => (\r\n                <div className={'buttonRemove'} onClick={() => clickRemoveHandler(file)}>\r\n                    <Avatar size={28} icon={<DeleteOutlined/>}/>\r\n                </div>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Table columns={columns} dataSource={files} pagination={false} loading={loading}/>\r\n    );\r\n};\r\n","import {instance} from './api';\r\nimport {FileType} from '../types/types';\r\n\r\nexport const filesAPI = {\r\n    upload(files: File[]) {\r\n        let formData = new FormData;\r\n        files.forEach((file, i) => {\r\n            formData.append(`files[]`, file);\r\n        });\r\n        return instance.post<ResponseType>('files/upload', formData, {\r\n            headers: {'Content-Type': 'multipart-form-data'},\r\n        }).then(res => res.data);\r\n    },\r\n};\r\n\r\ntype ResponseType = {\r\n    result: boolean,\r\n    files: FileType[],\r\n}\r\n","import {BaseThunkType, InferActionsTypes} from './redux-store';\r\nimport {filesAPI} from '../api/files-api';\r\nimport {FileType} from '../types/types';\r\n\r\nlet initialState = {\r\n    loading: false,\r\n    uploadedFiles: [] as FileType[],\r\n};\r\n\r\nconst filesReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_LOADING':\r\n            return {\r\n                ...state,\r\n                loading: action.loading,\r\n            };\r\n        case 'SET_UPLOADED_FILES':\r\n            return {\r\n                ...state,\r\n                uploadedFiles: action.uploadedFiles,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setLoading: (loading: boolean) => ({\r\n        type: 'SET_LOADING',\r\n        loading,\r\n    } as const),\r\n    setUploadedFiles: (uploadedFiles: FileType[]) => ({\r\n        type: 'SET_UPLOADED_FILES',\r\n        uploadedFiles,\r\n    } as const),\r\n};\r\n\r\nexport const upload = (files: File[]): ThunkType => async (dispatch) => {\r\n    let data = await filesAPI.upload(files);\r\n    if (data.result === true) {\r\n        dispatch(actions.setUploadedFiles(data.files));\r\n        dispatch(actions.setLoading(false));\r\n    }\r\n};\r\n\r\nexport default filesReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType>;\r\n","import {AppStateType} from './redux-store';\r\n\r\nexport const s_getLoading = (state: AppStateType) => {\r\n    return state.files.loading;\r\n};\r\n\r\nexport const s_getUploadedFiles = (state: AppStateType) => {\r\n    return state.files.uploadedFiles;\r\n};\r\n","import {Avatar, Button, Form} from 'antd';\r\nimport React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {CREATE_FILE_MUTATION, CreateFileData, CreateFileVars} from '../../../GraphQL/files-mutation';\r\nimport {useMutation} from '@apollo/client';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {PinnedFiles} from '../../../../components/PinnedFiles/PinnedFiles';\r\nimport {PlusOutlined} from '@ant-design/icons';\r\nimport s from './FilesCreate.module.css';\r\nimport {actions, upload} from '../../../../redux/files-reducer';\r\nimport {s_getLoading, s_getUploadedFiles} from '../../../../redux/files.selectors';\r\nimport {Simulate} from 'react-dom/test-utils';\r\n\r\n\r\nexport const FilesCreate: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const [createFile, {\r\n        loading,\r\n    }] = useMutation<CreateFileData, CreateFileVars>(CREATE_FILE_MUTATION);\r\n    const navigate = useNavigate();\r\n    const [files, setFiles] = useState([] as File[]);\r\n    const uploadedFiles = useSelector(s_getUploadedFiles);\r\n    const loadingUpload = useSelector(s_getLoading);\r\n\r\n    useEffect(() => {\r\n        if (uploadedFiles.length) {\r\n            uploadedFiles.forEach(async (file) => {\r\n                console.log('upload file: ', file);\r\n                const response = await createFile({\r\n                    variables: {createFileInput: {...file}},\r\n                });\r\n                if (response.errors)\r\n                    console.log(response.errors);\r\n            });\r\n            dispatch(actions.setUploadedFiles([]));\r\n            navigate('..');\r\n        }\r\n    }, [uploadedFiles]);\r\n\r\n    const onFinish = async () => {\r\n        if (files.length) {\r\n            dispatch(actions.setLoading(true));\r\n            dispatch(upload(files));\r\n        }\r\n    };\r\n\r\n    const fileChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            files && files.length > 0\r\n                ? setFiles([...Array.from(files), ...Array.from(e.target.files)])\r\n                : setFiles(Array.from(e.target.files));\r\n        }\r\n    };\r\n\r\n    console.log(files);\r\n\r\n    return (\r\n        <Form name=\"createFile\" onFinish={onFinish}>\r\n            <Form.Item>\r\n                <input type=\"file\" id=\"file\" multiple style={{display: 'none'}} onChange={fileChangeHandler}/>\r\n                <label className={s.labelFile} htmlFor=\"file\">\r\n                    <Avatar icon={<PlusOutlined/>}/>\r\n                </label>\r\n            </Form.Item>\r\n\r\n            {files.length > 0 && (\r\n                <>\r\n                    <Form.Item>\r\n                        <PinnedFiles loading={loading || loadingUpload} files={files} setFiles={setFiles}/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType={'submit'} loading={loading || loadingUpload}>\r\n                            Create\r\n                        </Button>\r\n                    </Form.Item>\r\n                </>\r\n            )}\r\n        </Form>\r\n    );\r\n};\r\n","import {gql} from '@apollo/client';\r\nimport {FileType} from '../../types/types';\r\n\r\nexport type GetFilesData = { getFiles: getFilesObject }\r\ntype getFilesObject = {files : FileType[], total: number}\r\n\r\nexport type GetFilesVars = { getFilesInput: getFilesInput }\r\ntype getFilesInput = { take: number, skip: number }\r\n\r\n\r\nexport const GET_FILES_QUERY = gql`\r\n    query GetFiles($getFilesInput: GetFilesInput!) {\r\n        getFiles(getFilesInput: $getFilesInput) {\r\n            files {\r\n                id\r\n                mimetype\r\n                destination\r\n                fileName\r\n                size\r\n                originalName\r\n            }\r\n            total\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type GetFileData = { getFile: FileType }\r\n\r\nexport type GetFileVars = { id: number }\r\n\r\nexport const GET_FILE_QUERY = gql`\r\n    query GetFile($id: Int!){\r\n        getFile(id: $id){\r\n            id\r\n            originalName\r\n            mimetype\r\n            destination\r\n            fileName\r\n            size\r\n        }\r\n    }\r\n`;\r\n","import React, {FC} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Avatar} from 'antd';\r\nimport {DeleteOutlined, EyeOutlined, FormOutlined} from '@ant-design/icons';\r\nimport s from './ButtonsVUR.module.css';\r\n\r\ntype Props = {\r\n    viewUrl?: string,\r\n    onView?: () => void,\r\n    updateUrl?: string,\r\n    onUpdate?: () => void,\r\n    removeUrl?: string,\r\n    onRemove?: () => void,\r\n}\r\n\r\nexport const ButtonsVUR: FC<Props> = ({viewUrl, updateUrl, removeUrl, onView, onUpdate, onRemove}) => {\r\n    return (\r\n        <>\r\n            <div className={s.buttonsVUR}>\r\n                {onView ?\r\n                    <div className={s.buttonView} onClick={onView}>\r\n                        <Avatar size={28} icon={<EyeOutlined/>}/>\r\n                    </div>\r\n                    : viewUrl &&\r\n                    <Link to={viewUrl} className={s.buttonView}>\r\n                        <Avatar size={28} icon={<EyeOutlined/>}/>\r\n                    </Link>\r\n                }\r\n                {onUpdate ?\r\n                    <div className={s.buttonView} onClick={onUpdate}>\r\n                        <Avatar size={28} icon={<EyeOutlined/>}/>\r\n                    </div>\r\n                    : updateUrl &&\r\n                    <Link to={updateUrl} className={s.buttonUpdate}>\r\n                        <Avatar size={28} icon={<FormOutlined/>}/>\r\n                    </Link>\r\n                }\r\n                {onRemove ?\r\n                    <div className={s.buttonRemove} onClick={onRemove}>\r\n                        <Avatar size={28} icon={<DeleteOutlined/>}/>\r\n                    </div>\r\n                    : removeUrl &&\r\n                    <Link to={removeUrl} className={s.buttonRemove}>\r\n                        <Avatar size={28} icon={<DeleteOutlined/>}/>\r\n                    </Link>\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import {useMutation, useQuery} from '@apollo/client';\r\nimport React, {FC, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {GET_FILES_QUERY, GetFilesData, GetFilesVars} from '../../../GraphQL/files-query';\r\nimport {Loading} from '../../../../components/Loading/Loading';\r\nimport {Avatar, Button, Divider, Table} from 'antd';\r\nimport {FileType} from '../../../../types/types';\r\nimport {urls} from '../../../../api/api';\r\nimport {ButtonsVUR} from '../../ButtonsVUD/ButtonsVUR';\r\nimport {REMOVE_FILE_MUTATION, RemoveFileData, RemoveFileVars} from '../../../GraphQL/files-mutation';\r\n\r\nexport const FilesIndex: FC = () => {\r\n    const {loading, error, data, refetch} = useQuery<GetFilesData, GetFilesVars>(\r\n        GET_FILES_QUERY,\r\n        {variables: {getFilesInput: {skip: 0, take: 10}}},\r\n    );\r\n    const [removeFile, removeFileOptions] = useMutation<RemoveFileData, RemoveFileVars>(REMOVE_FILE_MUTATION);\r\n\r\n    const [pageTake, setPageTake] = useState(10);\r\n    const [pageSkip, setSkipTake] = useState(0);\r\n    const [selectedFiles, setSelectedFiles] = useState<FileType[]>([]);\r\n\r\n    if (loading)\r\n        return <Loading/>;\r\n\r\n    if (error)\r\n        console.log(error);\r\n\r\n    const onRemove = async (id: number) => {\r\n        const response = await removeFile({variables: {id: id}});\r\n        if (response.data)\r\n            await refetch({getFilesInput: {skip: pageSkip, take: pageTake}});\r\n        else\r\n            console.log(response.errors);\r\n    };\r\n\r\n    const rowSelection = {\r\n        onChange: (selectedRowKeys: React.Key[], selectedRows: FileType[]) => {\r\n            console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\r\n            setSelectedFiles(selectedRows);\r\n        },\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Image',\r\n            render: (text: any, file: FileType) => {\r\n                if (file.mimetype.match(/image/)?.length)\r\n                    return (\r\n                        <Avatar size={48} shape={'square'} src={urls.server + file.destination + '/' + file.fileName}/>\r\n                    );\r\n                return (\r\n                    <Avatar size={48} shape={'square'} src={urls.server + 'static/images/file.png'}/>\r\n                );\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'OriginalName',\r\n            dataIndex: 'originalName',\r\n            render: (text: any, file: FileType) => {\r\n                return (\r\n                    <a href={urls.server + file.destination + '/' + file.fileName} target={'_blank'}>\r\n                        {text}\r\n                    </a>\r\n                );\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Mimetype',\r\n            dataIndex: 'mimetype',\r\n        },\r\n        {\r\n            title: 'Size',\r\n            dataIndex: 'size',\r\n        },\r\n        {\r\n            title: 'Actions',\r\n            render: (text: any, file: FileType) => (\r\n                <ButtonsVUR /*updateUrl={`update/${file.id}`}*/ onRemove={() => onRemove(file.id)}/>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Link to={'create'}>\r\n                <Button>Create</Button>\r\n            </Link>\r\n            <Divider/>\r\n            <div>\r\n                <Table\r\n                    loading={loading || removeFileOptions.loading}\r\n                    rowSelection={{...rowSelection}}\r\n                    columns={columns}\r\n                    dataSource={data?.getFiles.files.map(file => ({key: file.id, ...file}))}\r\n\r\n                    pagination={{\r\n                        total: data?.getFiles.total,\r\n                        onChange: async (pageNumber: number) => {\r\n                            const pageSkip = (pageNumber - 1) * pageTake;\r\n                            setSkipTake(pageSkip);\r\n                            await refetch({getFilesInput: {skip: pageSkip, take: pageTake}});\r\n                        },\r\n                        onShowSizeChange: async (pageNumber, pageSize) => {\r\n                            setPageTake(pageSize);\r\n                            await refetch({getFilesInput: {skip: (pageNumber - 1) * pageTake, take: pageTake}});\r\n                        },\r\n                    }}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import {useMutation, useQuery} from '@apollo/client';\r\nimport {Button, Form, Input} from 'antd';\r\nimport React, {FC} from 'react';\r\nimport {Navigate, useNavigate, useParams} from 'react-router-dom';\r\nimport s from './FilesUpdate.module.css';\r\nimport {GET_PRODUCT_QUERY, GetProductData, GetProductVars} from '../../../GraphQL/products-query';\r\nimport {Loading} from '../../../../components/Loading/Loading';\r\n\r\nexport const FilesUpdate: FC = () => {\r\n    const params = useParams();\r\n\r\n    // const {loading, error, data} = useQuery<GetProductData, GetProductVars>(\r\n    //     GET_PRODUCT_QUERY,\r\n    //     {variables: {id: params.id ? parseInt(params.id) : 0}},\r\n    // );\r\n    // const [createProduct] = useMutation<ProductUpdateData, ProductUpdateVars>(PRODUCT_UPDATE_MUTATION);\r\n    const navigate = useNavigate();\r\n\r\n    if (!params.id)\r\n        return <Navigate to={'../../error'}/>;\r\n\r\n    // if (loading)\r\n    //     return <Loading/>;\r\n    //\r\n    // if (error)\r\n    //     console.log(error);\r\n\r\n    const onFinish = async (values: { id: number, name: string }) => {\r\n        console.log('Received values of form: ', values);\r\n        // const response = await createProduct({variables: {updateProductInput: {...values}}});\r\n        // console.log(response);\r\n        // if (response.data && !response.errors) {\r\n        //     navigate('..');\r\n        // } else\r\n        //     console.log('error:', response.errors);\r\n    };\r\n\r\n    return (\r\n        <Form name=\"createProduct\" onFinish={onFinish}\r\n              // initialValues={{id: data?.getProduct.id, name: data?.getProduct.name}}\r\n        >\r\n            <Form.Item name=\"id\" className={s.inputId}>\r\n                <Input type={'hidden'} className={s.inputId}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"name\"\r\n                label=\"Name\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input product name',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder=\"Product name\"/>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType={'submit'}>\r\n                    Update\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Link, Navigate, useParams} from 'react-router-dom';\r\nimport {useQuery} from '@apollo/client';\r\nimport {Loading} from '../../../../components/Loading/Loading';\r\nimport {Avatar, Card} from 'antd';\r\nimport s from './FilesView.module.css';\r\nimport {GET_FILE_QUERY, GetFileData, GetFileVars} from '../../../GraphQL/files-query';\r\nimport {urls} from '../../../../api/api';\r\nimport {DeleteOutlined, FormOutlined} from '@ant-design/icons';\r\n\r\nconst {Meta} = Card;\r\n\r\nexport const FilesView: FC = () => {\r\n    const params = useParams();\r\n\r\n    const {loading, error, data} = useQuery<GetFileData, GetFileVars>(\r\n        GET_FILE_QUERY,\r\n        {variables: {id: params.id ? parseInt(params.id) : 0}},\r\n    );\r\n\r\n    if (!params.id)\r\n        return <Navigate to={'../../error'}/>;\r\n\r\n    if (loading)\r\n        return <Loading/>;\r\n\r\n    if (error)\r\n        console.log(error);\r\n\r\n    return (\r\n        <>\r\n            <Card\r\n                className={s.card}\r\n                cover={\r\n                    <Avatar\r\n                        shape={'square'}\r\n                        size={300}\r\n                        src={urls.server + data?.getFile.destination + '/' + data?.getFile.fileName}\r\n                    />\r\n                }\r\n                actions={[\r\n                    <Link to={`../update/${data?.getFile.id}`} className={'buttonUpdate'}>\r\n                        <Avatar size={28} icon={<FormOutlined/>}/>\r\n                    </Link>,\r\n                    <Link to={`../remove/${data?.getFile.id}`} className={'buttonRemove'}>\r\n                        <Avatar size={28} icon={<DeleteOutlined/>}/>\r\n                    </Link>,\r\n                ]}\r\n            >\r\n                <Meta\r\n                    title={data?.getFile.originalName}\r\n                    description={(\r\n                        <>\r\n                            <div>Size: {data?.getFile.size}</div>\r\n                            <div>Mimetype: {data?.getFile.mimetype}</div>\r\n                        </>\r\n                    )}\r\n                />\r\n            </Card>,\r\n        </>\r\n    );\r\n};\r\n","import React, {FC, useState} from 'react';\r\nimport {ModalWindow} from '../../../../components/Modal/ModalWindow';\r\nimport {useMutation} from '@apollo/client';\r\nimport {FilesView} from '../FilesView/FilesView';\r\nimport {Navigate, useNavigate, useParams} from 'react-router-dom';\r\nimport {Button} from 'antd';\r\nimport {Error} from '../../Error/Error';\r\n\r\ntype Props = {\r\n    visible: boolean,\r\n    productId: number | undefined,\r\n    productName: string | undefined,\r\n    setVisible: (flag: boolean) => void\r\n}\r\n\r\nexport const FilesRemove: FC = () => {\r\n    const params = useParams();\r\n    // const [removeProduct, {loading}] = useMutation<ProductRemoveData, ProductRemoveVars>(PRODUCT_REMOVE_MUTATION);\r\n    const navigate = useNavigate();\r\n\r\n    if (!params || !params.id)\r\n        return <Navigate to={'../../error'}/>;\r\n\r\n    const onRemove = async () => {\r\n        // const response = await removeProduct({variables: {id: parseInt(params.id as string)}});\r\n        // if (response.data)\r\n        //     navigate('..');\r\n        // else\r\n        //     console.log(response.errors);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FilesView/>\r\n            <Button onClick={onRemove} /*loading={loading}*/>Remove</Button>\r\n        </>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {Error} from '../Error/Error';\r\nimport {FilesCreate} from './FilesCreate/FilesCreate';\r\nimport {FilesIndex} from './FilesIndex/FilesIndex';\r\nimport {FilesUpdate} from './FilesUpdate/FilesUpdate';\r\nimport {FilesView} from './FilesView/FilesView';\r\nimport {FilesRemove} from './FilesRemove/FilesRemove';\r\n\r\nexport const FilesController: FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<FilesIndex/>}/>\r\n            <Route path={':id'} element={<FilesView/>}/>\r\n            <Route path={'create'} element={<FilesCreate/>}/>\r\n            <Route path={'update/:id'} element={<FilesUpdate/>}/>\r\n            <Route path={'remove/:id'} element={<FilesRemove/>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {s_getIsAuth} from '../../../redux/auth-selectors';\r\nimport {Layout} from 'antd';\r\nimport {AppMenu} from '../Menu/AppMenu';\r\nimport {AppHeader} from '../Header/AppHeader';\r\nimport {AppBreadcrumb} from '../Breadcrumb/AppBreadcrumb';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Home} from '../Home/Home';\r\nimport {UsersController} from '../Users/UsersController';\r\nimport s from './AdminLayout.module.css';\r\nimport {Error} from '../Error/Error';\r\nimport {ProductsController} from '../Products/ProductsController';\r\nimport {CategoriesController} from '../Categories/CategoriesController';\r\nimport {FilesController} from '../Files/FilesController';\r\n\r\nconst {Content} = Layout;\r\n\r\nexport const AdminLayout: FC = () => {\r\n    console.log('AppLayout');\r\n    const isAuth = useSelector(s_getIsAuth);\r\n\r\n    if (!isAuth)\r\n        return <Navigate to={'/admin/login'}/>;\r\n\r\n    return (\r\n        <Layout className={s.layout}>\r\n            <AppMenu/>\r\n            <Layout className=\"site-layout\">\r\n                <AppHeader/>\r\n                <Content className={s.content}>\r\n                    <AppBreadcrumb/>\r\n                    <div className={s.siteLayoutBackground}>\r\n                        <Routes>\r\n                            <Route path={'/'} element={<Home/>}/>\r\n                            <Route path={'products/*'} element={<ProductsController/>}/>\r\n                            <Route path={'categories/*'} element={<CategoriesController/>}/>\r\n                            <Route path={'files/*'} element={<FilesController/>}/>\r\n                            <Route path={'users/*'} element={<UsersController/>}/>\r\n                            <Route path={'*'} element={<Error/>}/>\r\n                        </Routes>\r\n                    </div>\r\n                </Content>\r\n            </Layout>\r\n        </Layout>\r\n    );\r\n};\r\n","import {gql} from '@apollo/client';\r\nimport {Auth} from '../../types/types';\r\n\r\nexport type LoginData = { login: Auth }\r\nexport type LoginVars = { loginInput: loginInput }\r\n\r\ntype loginInput = { email: string, password: string }\r\n\r\nexport const LOGIN_MUTATION = gql`\r\n    mutation Login($loginInput: LoginInput!){\r\n        login(loginInput: $loginInput){\r\n            accessToken\r\n            user{\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                roles{\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n","import React, {FC} from \"react\";\r\nimport s from './Login.module.css';\r\nimport {Form, Input, Button, Checkbox, Badge} from 'antd';\r\nimport {UserOutlined, LockOutlined} from '@ant-design/icons';\r\nimport {Link, Navigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {s_getIsAuth} from \"../../../redux/auth-selectors\";\r\nimport {useMutation} from \"@apollo/client\";\r\nimport {LoginData, LoginVars, LOGIN_MUTATION} from \"../../GraphQL/auth-mutation\";\r\nimport {actions} from \"../../../redux/auth-reducer\";\r\n\r\nexport const Login: FC = () => {\r\n    console.log('admin login form');\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector(s_getIsAuth);\r\n    const [login, {\r\n        data,\r\n        loading,\r\n        error\r\n    }] = useMutation<LoginData, LoginVars>(LOGIN_MUTATION);\r\n\r\n    if (isAuth)\r\n        return <Navigate to={'/admin'}/>\r\n\r\n    const onFinish = async (values: { email: string, password: string, remember: boolean }) => {\r\n        console.log('Received values of form: ', values);\r\n        const response = await login({variables: {loginInput: {email: values.email, password: values.password}}});\r\n        console.log(response)\r\n        if (response.data && !response.errors) {\r\n            localStorage.setItem('token', response.data.login.accessToken)\r\n            dispatch(actions.setAuthData(response.data.login, true));\r\n        } else\r\n            console.log('error:', error)\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            name=\"normal_login\"\r\n            className={s.loginForm}\r\n            initialValues={{remember: true}}\r\n            onFinish={onFinish}\r\n        >\r\n            <h2 className={s.title}>Admin Panel</h2>\r\n            <Form.Item\r\n                name=\"email\"\r\n                rules={[{required: true, message: 'Please input your Email!'}]}\r\n            >\r\n                <Input prefix={<UserOutlined className=\"site-form-item-icon\"/>} placeholder=\"Email\" type={'email'}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"password\"\r\n                rules={[{required: true, message: 'Please input your Password!'}]}\r\n            >\r\n                <Input\r\n                    prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                />\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle className={s.rememberMe}>\r\n                    <Checkbox>\r\n                        <span className={s.white}>Remember me</span>\r\n                    </Checkbox>\r\n                </Form.Item>\r\n\r\n                <Link className={s.forgotPass} to={''}>\r\n                    Forgot password\r\n                </Link>\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\" className={['login-form-button', s.submit].join(' ')}>\r\n                    Log in\r\n                </Button>\r\n                <span className={s.white}>Or </span>\r\n                <Link to={'/admin-area/register'}>register now!</Link>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n}\r\n","import React, {FC, useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {ClientLayout} from './client-area/Layout/ClientLayout';\r\nimport {useQuery} from '@apollo/client';\r\nimport {ME_QUERY, MeData, MeVars} from './admin-area/GraphQL/auth-query';\r\nimport {useDispatch} from 'react-redux';\r\nimport {actions} from './redux/auth-reducer';\r\nimport {Loading} from './components/Loading/Loading';\r\nimport {AdminLayout} from './admin-area/components/Layout/AdminLayout';\r\nimport {Login} from './admin-area/components/Login/Login';\r\n\r\nexport const App: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const {loading, error, data} = useQuery<MeData, MeVars>(ME_QUERY);\r\n    const [isInitialised, setIsInitialised] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (data && !error) {\r\n            dispatch(actions.setAuthData(data.me, true));\r\n            setIsInitialised(true);\r\n        }\r\n        if (error)\r\n            setIsInitialised(true);\r\n    }, [data, error]);\r\n\r\n    console.log(loading, !isInitialised, error?.graphQLErrors, error?.message);\r\n\r\n    if (loading || !isInitialised)\r\n        return <Loading/>;\r\n\r\n    return (\r\n        <Routes>\r\n            <Route path=\"/\" element={<ClientLayout/>}/>\r\n            <Route path=\"admin/*\" element={<AdminLayout/>}/>\r\n            <Route path={'admin/login'} element={<Login/>}/>\r\n        </Routes>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport authReducer from './auth-reducer';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport filesReducer from './files-reducer';\r\n\r\nlet rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    files: filesReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<Promise<void>, AppStateType, unknown, A>;\r\n\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {App} from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport store from \"./redux/redux-store\";\r\nimport {Provider} from 'react-redux';\r\nimport {\r\n    ApolloClient,\r\n    InMemoryCache,\r\n    ApolloProvider,\r\n} from \"@apollo/client\";\r\n\r\nconst client = new ApolloClient({\r\n    //uri: '/graphql',\r\n    uri: 'http://localhost:3001/graphql',\r\n    // credentials: 'include',\r\n    cache: new InMemoryCache(),\r\n    headers: {\r\n        authorization: localStorage.getItem('token') ? `Bearer ${localStorage.getItem('token')}` : \"\",\r\n    },\r\n    defaultOptions: {\r\n        watchQuery: {\r\n            fetchPolicy: 'no-cache',\r\n            errorPolicy: 'all',\r\n        },\r\n        query: {\r\n            fetchPolicy: 'no-cache',\r\n            errorPolicy: 'all',\r\n        },\r\n    }\r\n});\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <ApolloProvider client={client}>\r\n                    <App/>\r\n                </ApolloProvider>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsVUR\":\"ButtonsVUR_buttonsVUR__2UPi3\",\"buttonView\":\"ButtonsVUR_buttonView__1PmNj\",\"buttonUpdate\":\"ButtonsVUR_buttonUpdate__32f1L\",\"buttonRemove\":\"ButtonsVUR_buttonRemove__1IRhH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"Login_loginForm__1TaLU\",\"title\":\"Login_title__1yFpQ\",\"white\":\"Login_white__1Hmsg\",\"rememberMe\":\"Login_rememberMe__2NYZe\",\"forgotPass\":\"Login_forgotPass__3PeBp\",\"submit\":\"Login_submit__2M9pX\"};"],"sourceRoot":""}