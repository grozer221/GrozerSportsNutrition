{"version":3,"sources":["client-area/components/MyMenu/MyMenu.module.css","client-area/components/Layout/ClientLayout.module.css","client-area/components/Products/ProductCard.module.css","client-area/components/Auth/AuthLogin.module.css","client-area/components/Products/ProductsView.module.css","admin-area/components/ButtonsVUD/ButtonsVUR.module.css","common-area/components/PinnedProductsInOrder/PinnedProductsInOrder.module.css","admin-area/components/MyMenu/MyMenu.module.css","client-area/components/Pages/Pages.module.css","client-area/components/Header/Header.module.css","admin-area/components/Products/ProductsView.module.css","admin-area/components/Auth/AuthLogin.module.css","client-area/components/Auth/AuthRegister.module.css","client-area/components/Home/Home.module.css","admin-area/components/Products/ProductsIndex.module.css","admin-area/components/Categories/CategoriesView.module.css","admin-area/components/Charts/StatisticsChart.module.css","client-area/components/Products/ProductsIndex.module.css","client-area/components/Categories/CategoriesView.module.css","admin-area/components/Home/Home.module.css","admin-area/components/Users/UsersView.module.css","admin-area/components/Layout/AdminLayout.module.css","admin-area/components/Pages/PagesView.module.css","admin-area/components/Orders/OrdersView.module.css","admin-area/components/Files/FilesUpdate.module.css","common-area/components/Loading/Loading.module.css","admin-area/components/Users/UsersIndex.module.css","admin-area/components/Files/FilesCreate.module.css","admin-area/components/Files/FilesView.module.css","admin-area/components/Orders/OrdersIndex.module.css","types/types.ts","utils/localStorageActions.ts","admin-area/api/api.ts","schema.ts","common-area/gql/client.ts","client-area/gql/products-query.ts","common-area/components/Loading/Loading.tsx","redux/basket-reducer.ts","client-area/components/Products/ProductCard.tsx","client-area/components/Home/Home.tsx","client-area/components/Error/Error.tsx","redux/auth-selectors.ts","client-area/gql/pages-query.ts","redux/auth-reducer.ts","utils/authorization.ts","client-area/components/Pages/Pages.tsx","admin-area/gql/pages-query.ts","client-area/components/PageView/PageView.tsx","common-area/gql/auth-mutation.ts","client-area/components/ConfirmationEmail/ConfirmationEmail.tsx","client-area/components/Auth/AuthLogin.tsx","client-area/components/Auth/AuthRegister.tsx","client-area/components/Auth/AuthController.tsx","redux/basket.selectors.ts","client-area/components/Header/Header.tsx","client-area/gql/categories-query.ts","client-area/components/MyMenu/MyMenu.tsx","admin-area/components/Error/Error.tsx","utils/stringActions.ts","client-area/components/Products/ProductsIndex.tsx","client-area/components/Products/ProductsView.tsx","client-area/components/Products/ProductsController.tsx","admin-area/components/ButtonsVUD/ButtonsVUR.tsx","common-area/components/PinnedProductsInOrder/PinnedProductsInOrder.tsx","client-area/components/Basket/BasketIndex.tsx","redux/nova-poshta.selectors.ts","common-area/api/api.ts","common-area/api/nova-poshta.ts","redux/nova-poshta-reducer.ts","client-area/gql/orders-mutation.ts","client-area/components/Basket/BasketPlaceAnOrder.tsx","client-area/components/Basket/BasketController.tsx","client-area/gql/orders-query.ts","client-area/components/Account/Account.tsx","client-area/components/Categories/CategoriesView.tsx","client-area/components/Categories/CategoriesController.tsx","client-area/components/Layout/ClientLayout.tsx","common-area/gql/auth-query.ts","admin-area/components/MyMenu/MyMenu.tsx","common-area/components/MyBreadcrumb/MyBreadcrumb.tsx","admin-area/components/Charts/OrdersStatisticsChart.tsx","admin-area/gql/orders-query.ts","admin-area/gql/statistics-query.ts","admin-area/components/Charts/ProfitStatisticsChart.tsx","admin-area/components/Home/Home.tsx","admin-area/gql/users-query.ts","admin-area/gql/users-mutation.ts","admin-area/components/Users/UsersIndex.tsx","admin-area/components/Users/UsersView.tsx","admin-area/styles/sizeFormItem.ts","admin-area/gql/roles-query.ts","admin-area/components/Users/UsersUpdate.tsx","admin-area/components/Users/UsersController.tsx","admin-area/gql/products-mutation.ts","admin-area/gql/files-query.ts","common-area/components/PinnedUploadedFiles/PinnedUploadedFiles.tsx","common-area/components/WysiwygEditor/WysiwygEditor.tsx","admin-area/gql/categories-query.ts","common-area/components/PinnedCategories/PinnedCategories.tsx","admin-area/components/Products/ProductsCreate.tsx","admin-area/gql/products-query.ts","admin-area/components/Products/ProductsIndex.tsx","admin-area/components/Products/ProductsUpdate.tsx","admin-area/components/Products/ProductsView.tsx","admin-area/components/Products/ProductsController.tsx","admin-area/gql/categories-mutation.ts","admin-area/components/Categories/CategoriesIndex.tsx","admin-area/components/Categories/CategoriesCreate.tsx","admin-area/components/Categories/CategoriesView.tsx","admin-area/components/Categories/CategoriesUpdate.tsx","admin-area/components/Categories/CategoriesController.tsx","admin-area/gql/files-mutation.ts","common-area/components/PinnedFiles/PinnedFiles.tsx","admin-area/api/files-api.ts","redux/files-reducer.ts","redux/files.selectors.ts","admin-area/components/Files/FilesCreate.tsx","admin-area/components/Files/FilesIndex.tsx","admin-area/components/Files/FilesUpdate.tsx","admin-area/components/Files/FilesView.tsx","admin-area/components/Files/FilesController.tsx","admin-area/components/Settings/Settings.tsx","admin-area/gql/pages-mutation.ts","admin-area/components/Pages/PagesIndex.tsx","admin-area/components/Pages/PagesCreate.tsx","admin-area/components/Pages/PagesUpdate.tsx","admin-area/components/Pages/PagesView.tsx","admin-area/components/Pages/PagesController.tsx","admin-area/gql/orders-mutation.ts","admin-area/components/Orders/OrdersIndex.tsx","admin-area/components/Orders/OrdersView.tsx","admin-area/components/Orders/OrdersCreate.tsx","admin-area/components/Orders/OrdersUpdate.tsx","admin-area/components/Orders/OrdersController.tsx","admin-area/components/Layout/AdminLayout.tsx","admin-area/components/Auth/AuthLogin.tsx","App.tsx","redux/redux-store.ts","index.tsx","client-area/components/Account/Account.module.css"],"names":["module","exports","RoleName","ShippingMethod","OrderStatus","getAuthorizationHeader","localStorage","getItem","setBasketToLocalStorage","productsInBasket","setItem","JSON","stringify","getBasketFromLocalStorage","parse","baseURL","instance","axios","create","headers","authorization","schema","gql","gqlLinks","graphqlAdmin","HttpLink","uri","graphqlCustomer","client","ApolloClient","link","ApolloLink","split","operation","getContext","gqlLink","cache","InMemoryCache","addTypename","defaultOptions","watchQuery","fetchPolicy","errorPolicy","notifyOnNetworkStatusChange","query","typeDefs","GET_PRODUCTS_QUERY","GET_PRODUCT_QUERY","GET_PRODUCTS_HIT_OF_SALES_QUERY","GET_PRODUCTS_NEWEST_QUERY","Loading","className","s","wrapper_svg","size","initialState","loading","totalPrice","actions","type","product","productInBasket","basketReducer","state","action","forEach","priceUAH","productQuantity","returnState","newTotalPrice","some","map","filter","ProductCard","dispatch","useDispatch","productCard","nameAndPhotos","to","slug","name","carousel","files","file","wrapperImage","image","shape","src","fileImage","alt","fileName","id","priceAndAddToBasket","price","onClick","message","success","ShoppingCartOutlined","Home","getProductsHitOfSalesQuery","useQuery","context","getProductsNewestQuery","error","data","strongWrapper","strongTitle","show","slide","swiping","getProductsHitOfSales","productHitOfSalesQuery","getProductsNewest","productNewest","Error","status","title","subTitle","extra","s_getAuthData","auth","authData","s_getIsAuth","isAuth","GET_PAGES_QUERY","payload","login","a","accessToken","logout","removeItem","authReducer","OrderBy","all","isModeratorOrAdmin","user","roles","role","moderator","admin","Pages","getPagesQuery","useSelector","wrapperPages","pages","getPages","page","GET_PAGE_QUERY","PagesView","pageSlug","useParams","getPageQuery","variables","getPage","text","LOGIN_MUTATION","CONFIRMATION_EMAIL_MUTATION","REGISTER_MUTATION","UPDATE_ME_MUTATION","UPDATE_EMAIL_MUTATION","UPDATE_PASSWORD_MUTATION","ConfirmationEmail","params","navigate","useNavigate","token","useMutation","confirmationEmailMutation","useEffect","then","response","confirmationEmail","catch","console","log","style","width","height","AuthLogin","loginMutation","loginMutationOptions","Form","useForm","form","onFinish","email","password","remember","loginInput","setFields","errors","resetErrors","resetFields","wrapperLoginForm","loginForm","initialValues","Item","rules","required","onInput","prefix","UserOutlined","placeholder","LockOutlined","valuePropName","noStyle","rememberMe","white","forgotPass","htmlType","submit","join","AuthRegister","registerMutation","registerMutationOptions","values","registerInput","register","wrapperRegisterForm","registerForm","AuthController","path","element","s_getTotalPrice","basket","s_getProductsInBasket","Header","header","logo","grozer","phoneNumber","basketPrice","GET_CATEGORIES_QUERY","GET_CATEGORY_QUERY","MyMenu","useState","pageTake","pageSkip","getCategoriesQuery","getCategoriesInput","take","skip","likeName","value","searchedOptions","wrapperMenu","menu","menuItem","dropdown","dropdownButton","dropdownContent","getCategories","categories","category","searchWrapper","options","onSearch","onSelect","Search","getStringFromCamelCase","inputString","match","localeLowerCase","word","charAt","toLocaleLowerCase","substring","getStringFromDate","dateAndTime","length","ProductsIndex","setPageSkip","newest","orderBy","setOrderBy","getProductsQuery","getProductsInput","products","total","productsObj","setProductsObj","getProducts","productsScrollHandler","e","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","newPageSkip","refetch","orderByChangeHandler","wrapperProducts","onScroll","defaultValue","onChange","Object","keys","key","i","Option","ProductsView","productSlug","getProductQuery","getProduct","photosAndMainInfo","autoplay","quantity","color","cards","card","description","showHeader","dataSource","characteristics","columns","dataIndex","pagination","ProductsController","ButtonsVUR","viewUrlA","viewUrl","updateUrl","removeUrl","onView","onUpdate","onRemove","buttonsVUR","buttonView","icon","EyeOutlined","href","target","buttonUpdate","FormOutlined","onConfirm","okText","cancelText","buttonRemove","DeleteOutlined","PinnedProductsInOrder","render","buttonPlusMinus","decrementProductInBasketHandler","MinusOutlined","quantityNumber","incrementProductInBasketHandler","PlusOutlined","removeProductsFromBasketHandler","rowKey","BasketIndex","s_getCitiesLoading","novaPoshta","citiesLoading","s_getWarehousesLoading","wareHousesLoading","s_getCities","cities","s_getWarehouses","warehouses","s_getCitiesError","citiesError","novaPoshtaInstance","novaPoshtaApiKey","novaPoshtaAPI","likeCityName","post","res","deliveryCity","loadCities","getCitiesResponse","Addresses","loadWarehouses","getWarehousesResponse","novaPoshtaReducer","CREATE_ORDER_MUTATION","CANCEL_ORDER_MUTATION","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","BasketPlaceAnOrder","warehouse","shippingMethod","setShippingMethod","warehousesLoading","selectedCity","setSelectedCity","createOrderMutation","createOrderMutationOption","city","address","restValues","newAddress","createOrderInput","deliveryCityCode","deliveryCityName","deliveryWarehouse","createProductInOrder","productId","onSearchCityHandler","trim","debouncedSearchCityHandler","useCallback","debounce","nextValue","firstName","lastName","scrollToFirstError","label","whitespace","Group","Present","DeliveryCity","option","enterButton","Description","BasketController","GET_MY_ORDERS_QUERY","Account","myOrdersObj","setMyOrdersObj","getMyOrdersQuery","getOrdersInput","like","orderStatus","updateMeMutation","updateMeMutationOptions","cancelOrderMutation","cancelOrderMutationOptions","updateEmailMutation","updateEmailMutationOptions","updatePasswordMutation","updatePasswordMutationOptions","isChangeEmailVisible","setIsChangeEmailVisible","isChangePasswordVisible","setIsChangePasswordVisible","updateEmailForm","updatePasswordForm","getMyOrders","onPersonalDataFinish","updateMeInput","updateMe","OrderHeader","order","createdAt","substr","orderHeader","orderHeaderInfo","productsInOrder","productInOrder","clickCancelOrderHandler","orderId","newOrders","orders","cancelOrder","changeEmailHandler","getFieldValue","updateEmailInput","updateEmail","changePasswordHandler","oldPassword","newPassword","updatePasswordInput","TabPane","tab","tabPane","bordered","changeEmailAndPass","marginBottom","visible","onOk","onCancel","confirmLoading","min","expandIconPosition","Panel","productsBig","productBig","carouselBig","new","buttonCancelOrder","pageNumber","CategoriesView","categorySlug","getCategoryQuery","getCategory","CategoriesController","ClientLayout","documentWrapper","container","content","ME_QUERY","Sider","Layout","Menu","SubMenu","collapsed","setCollapsed","collapsible","onCollapse","userInfo","userFirstLastName","theme","mode","LineChartOutlined","ShoppingOutlined","FunnelPlotOutlined","FileOutlined","TeamOutlined","AppstoreAddOutlined","SettingOutlined","LogoutOutlined","MyBreadcrumb","modules","useLocation","pathname","Boolean","OrdersStatisticsChart","ordersStatistics","chartWrapper","LineChart","syncId","Line","dataKey","stroke","Tooltip","XAxis","YAxis","GET_ORDERS_QUERY","GET_ORDER_QUERY","GET_STATISTICS_QUERY","ProfitStatisticsChart","profitStatistics","getOrdersQuery","getStatisticsQuery","wrapperCharts","wrapperChart","getOrdersStatistics","getProfitStatistics","getOrders","GET_USERS_QUERY","GET_USER_QUERY","UPDATE_USER_MUTATION","REMOVE_USER_MUTATION","UsersIndex","searchLike","setSearchLike","getUserQuery","getUsersInput","removeUser","removeUserOptions","isAdmin","onSearchUsersHandler","newSearchLike","debouncedSearchUsersHandler","getUsers","users","UsersView","userEmail","getUser","ordersTitle","sizeFormItem","GET_ROLES_QUERY","UsersUpdate","getRolesQuery","updateUserMutation","updateUserMutationOptions","targetKeys","setTargetKeys","selectedKeys","setSelectedKeys","toString","parsedId","parseInt","newRoles","getRoles","updateUserInput","display","titles","nextTargetKeys","direction","moveKeys","idCustomerRole","find","customer","onSelectChange","sourceSelectedKeys","targetSelectedKeys","UsersController","CREATE_PRODUCT_MUTATION","UPDATE_PRODUCT_MUTATION","REMOVE_PRODUCT_MUTATION","GET_FILES_QUERY","GET_FILE_QUERY","GET_FILE_BY_NAME_QUERY","PinnedUploadedFiles","setFiles","fileRemove","newFiles","clickRemoveHandler","WysiwygEditor","setText","init","onEditorChange","apiKey","GET_CATEGORY_BY_NAME_QUERY","PinnedCategories","setCategories","categoryRemove","newCategories","Input","ProductsCreate","createProduct","createProductOption","getFileByName","getFilesQuery","photos","setPhotos","setOptions","isShown","setIsShown","setDescription","getCategoryByName","searchedCategoryNames","setSearchedCategoryNames","intQuantity","intPriceUAH","photosWithoutExtra","photo","filePath","categoriesWithoutExtra","createProductsVars","createProductInput","getFilesInput","likeFileName","likeMimetype","getFiles","warning","debouncedSearch","selectPhotoHandler","selectCategoryHandler","onSearchCategoryHandler","debouncedSearchCategoriesHandler","checked","addonAfter","List","fields","add","remove","restField","align","MinusCircleOutlined","block","GET_PRODUCT_BY_NAME_QUERY","removeProduct","removeProductOptions","updateProduct","updateProductOptions","setSelectedProducts","rowSelection","selectedRowKeys","selectedRows","toggleIsShownHandler","flag","rest","updateProductInput","newProducts","onSearchProductsHandler","debouncedSearchProductHandler","ProductsUpdate","updateProductMutation","updateProductMutationOptions","searchedPhotosNames","setSearchedPhotosNames","intId","onSearchPhotoHandler","debouncedSearchPhotoHandler","CREATE_CATEGORY_MUTATION","UPDATE_CATEGORY_MUTATION","REMOVE_CATEGORY_MUTATION","CategoriesIndex","setSkipTake","categoriesObj","setCategoriesObj","setSelectedCategories","removeCategory","removeCategoryOptions","updateCategory","updateCategoryOptions","updateCategoryInput","CategoriesCreate","createCategory","createCategoryOptions","createCategoryInput","setProducts","productsTitle","CategoriesUpdate","updateCategoryOption","CREATE_FILE_MUTATION","REMOVE_FILE_MUTATION","EditableColumn","index","filesNames","setFilesNames","newName","newFilesNames","originalName","PinnedFiles","regex","URL","createObjectURL","indexOf","filesAPI","formData","FormData","append","uploadedFiles","upload","result","filesReducer","s_getLoading","s_getUploadedFiles","FilesCreate","createFile","createFileOptions","loadingUpload","createFileInput","multiple","Array","from","labelFile","htmlFor","FilesIndex","removeFile","removeFileOptions","setSelectedFiles","uploadLoading","searchFileName","setSearchFileName","FilesUpdate","inputId","Meta","Card","FilesView","getFileQuery","cover","getFile","mimetype","FilesController","Settings","CREATE_PAGE_MUTATION","UPDATE_PAGE_MUTATION","UPDATE_PAGES_MUTATION","REMOVE_PAGE_MUTATION","PagesIndex","setPages","removePage","removePageOptions","updatePage","updatePageOptions","updatePages","updatePagesOptions","setSelectedPages","updatePageInput","newPages","DragHandle","SortableHandle","MenuOutlined","cursor","justifyContent","alignItems","SortableItem","SortableElement","props","SortableContainerWrapper","SortableContainer","onSortEnd","oldIndex","newIndex","sortedPages","arrayMoveImmutable","concat","el","sorting","sortedPagesWithoutSlug","updatePagesInput","components","body","wrapper","useDragHandle","disableAutoscroll","helperClass","row","restProps","findIndex","x","PagesCreate","createPage","createPageOption","createPageInput","PagesUpdate","updatePageMutation","updatePageMutationOptions","intSorting","info","PagesController","UPDATE_ORDER_MUTATION","REMOVE_ORDER_MUTATION","OrdersIndex","setOrderStatus","removeOrder","removeOrderOptions","setOrdersProducts","onSearchOrdersHandler","debouncedSearchOrdersHandler","selectOrderStatusHandler","filters","OrdersView","getOrderQuery","getOrder","OrdersCreate","getProductByName","basketActions","onSearchProductHandler","selectProductHandler","OrdersUpdate","selectedWarehouse","setSelectedWarehouse","updateOrder","updateOrderOption","numberId","updateOrderInput","OrdersController","Content","AdminLayout","authDate","layout","siteLayoutBackground","App","meQuery","isInitialised","setIsInitialised","me","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","StrictMode","ApolloProvider","document","getElementById"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,YAAc,4BAA4B,KAAO,qBAAqB,SAAW,yBAAyB,SAAW,yBAAyB,eAAiB,+BAA+B,gBAAkB,gCAAgC,cAAgB,gC,oBCAlRD,EAAOC,QAAU,CAAC,gBAAkB,sCAAsC,UAAY,gCAAgC,QAAU,8BAA8B,aAAe,mCAAmC,YAAc,kCAAkC,WAAa,mC,oBCA7QD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,cAAgB,mCAAmC,KAAO,0BAA0B,SAAW,8BAA8B,oBAAsB,yCAAyC,MAAQ,2BAA2B,YAAc,iCAAiC,aAAe,kCAAkC,MAAQ,6B,oBCAxYD,EAAOC,QAAU,CAAC,iBAAmB,oCAAoC,UAAY,6BAA6B,MAAQ,yBAAyB,MAAQ,yBAAyB,WAAa,8BAA8B,WAAa,8BAA8B,OAAS,4B,oBCAnRD,EAAOC,QAAU,CAAC,kBAAoB,wCAAwC,SAAW,+BAA+B,MAAQ,4BAA4B,MAAQ,4BAA4B,KAAO,2BAA2B,oBAAsB,0CAA0C,MAAQ,8B,oBCA1SD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,WAAa,+BAA+B,aAAe,iCAAiC,aAAe,mC,oBCAzKD,EAAOC,QAAU,CAAC,SAAW,wCAAwC,MAAQ,qCAAqC,SAAW,wCAAwC,eAAiB,8CAA8C,gBAAkB,+CAA+C,WAAa,4C,oBCAlTD,EAAOC,QAAU,CAAC,YAAc,4BAA4B,KAAO,qBAAqB,SAAW,yBAAyB,kBAAoB,kCAAkC,KAAO,qBAAqB,MAAQ,wB,oBCAtND,EAAOC,QAAU,CAAC,aAAe,4BAA4B,MAAQ,uB,oBCArED,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,OAAS,uBAAuB,YAAc,4BAA4B,OAAS,uBAAuB,YAAc,8B,oBCAtMD,EAAOC,QAAU,CAAC,kBAAoB,wCAAwC,SAAW,+BAA+B,MAAQ,4BAA4B,MAAQ,4BAA4B,KAAO,6B,oBCAvMD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,MAAQ,yBAAyB,MAAQ,yBAAyB,WAAa,8BAA8B,WAAa,8BAA8B,OAAS,4B,oBCA5ND,EAAOC,QAAU,CAAC,oBAAsB,0CAA0C,aAAe,mCAAmC,MAAQ,4BAA4B,MAAQ,4BAA4B,WAAa,iCAAiC,WAAa,iCAAiC,OAAS,+B,oBCAjTD,EAAOC,QAAU,CAAC,cAAgB,4BAA4B,YAAc,0BAA0B,sBAAwB,sC,oBCA9HD,EAAOC,QAAU,CAAC,SAAW,gCAAgC,MAAQ,6BAA6B,WAAa,oC,oBCA/GD,EAAOC,QAAU,CAAC,SAAW,iCAAiC,MAAQ,8BAA8B,YAAc,oCAAoC,cAAgB,wC,oBCAtKD,EAAOC,QAAU,CAAC,aAAe,wC,oBCAjCD,EAAOC,QAAU,CAAC,gBAAkB,uCAAuC,SAAW,gCAAgC,QAAU,iC,oBCAhID,EAAOC,QAAU,CAAC,SAAW,mC,oBCA7BD,EAAOC,QAAU,CAAC,cAAgB,4BAA4B,aAAe,6B,oBCA7ED,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,YAAc,iC,oBCAjED,EAAOC,QAAU,CAAC,OAAS,4BAA4B,QAAU,6BAA6B,qBAAuB,4C,oBCArHD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,KAAO,0B,oBCAxDD,EAAOC,QAAU,CAAC,SAAW,6BAA6B,MAAQ,4B,oBCAlED,EAAOC,QAAU,CAAC,QAAU,+B,oBCA5BD,EAAOC,QAAU,CAAC,YAAc,+B,oBCAhCD,EAAOC,QAAU,CAAC,MAAQ,4B,oBCA1BD,EAAOC,QAAU,CAAC,UAAY,iC,oBCA9BD,EAAOC,QAAU,CAAC,KAAO,0B,oBCAzBD,EAAOC,QAAU,CAAC,QAAU,+B,kFCDhBC,EAqFAC,EAKAC,E,oJCxFCC,EAAyB,WAClC,OAAOC,aAAaC,QAAQ,SAArB,iBAA0CD,aAAaC,QAAQ,UAAa,IAG1EC,EAA0B,SAACC,GACpCH,aAAaI,QAAQ,mBAAoBC,KAAKC,UAAUH,KAG/CI,EAA4B,WACrC,IAAMJ,EAAmBH,aAAaC,QAAQ,oBAC9C,OAAIE,EACkDE,KAAKG,MAAML,GAGtD,ICbFM,EAAU,wBAGVC,EAAWC,IAAMC,OAAO,CACjCH,QAASA,EAAU,QACnBI,QAAS,CACLC,cAAef,O,iBCPVgB,EAASC,YAAH,m4eCGNC,EACC,kBADDA,EAEF,eAGLC,EAAe,IAAIC,IAAS,CAC9BC,IAAKX,EAAU,iBACfI,QAAS,CACLC,cAAef,OAGjBsB,EAAkB,IAAIF,IAAS,CACjCC,IAAKX,EAAU,oBACfI,QAAS,CACLC,cAAef,OAIVuB,EAAS,IAAIC,IAAa,CACnCC,KAAMC,IAAWC,OACb,SAAAC,GAAS,OAAIA,EAAUC,aAAaC,UAAYZ,IAChDI,EACAH,GAEJY,MAAO,IAAIC,IAAc,CAACC,aAAa,IACvCC,eAAgB,CACZC,WAAY,CACRC,YAAa,eACbC,YAAa,MACbC,6BAA6B,GAEjCC,MAAO,CACHH,YAAa,eACbC,YAAa,MACbC,6BAA6B,IAGrCE,SAAUxB,IC5BDyB,EAAqBxB,YAAH,68BA0ClByB,EAAoBzB,YAAH,ivBA8EjB0B,GAvC4B1B,YAAH,+vBAuCSA,YAAH,6uBAuC/B2B,EAA4B3B,YAAH,ouB,kCCzKzB4B,EAAoB,WAC7B,OACI,qBAAKC,UAAWC,IAAEC,YAAlB,SACI,cAAC,IAAD,CAAMC,KAAM,a,kHCHpBC,GAAe,CACfC,SAAS,EACT/C,iBAAkB,GAClBgD,WAAY,GAyGHC,GAKY,SAACjD,GAAD,MAA0C,CAC3DkD,KAAM,yBACNlD,qBAPKiD,GASW,SAACE,GAAD,MAAuB,CACvCD,KAAM,wBACNC,YAXKF,GAaiB,SAACG,GAAD,MAAuC,CAC7DF,KAAM,8BACNE,oBAfKH,GAiBiB,SAACG,GAAD,MAAuC,CAC7DF,KAAM,8BACNE,oBAnBKH,GAqBgB,SAACG,GAAD,MAAuC,CAC5DF,KAAM,6BACNE,oBAvBKH,GAyBG,iBAAO,CACfC,KAAM,gBAUCG,GA1IO,WAAkE,IAAjEC,EAAgE,uDAAxDR,GAAcS,EAA0C,uCACnF,OAAQA,EAAOL,MACX,IAAK,cACD,OAAO,6BACAI,GADP,IAEIP,QAASQ,EAAOR,UAExB,IAAK,yBACD,IAAIC,EAAa,EACjBO,EAAOvD,iBAAiBwD,SAAQ,SAAAJ,GAAe,OAAIJ,GAAcI,EAAgBD,QAAQM,SAAWL,EAAgBM,mBACpH,IAAMC,EAAW,6BACVL,GADU,IAEbtD,iBAAkBuD,EAAOvD,iBACzBgD,WAAYA,IAGhB,OADAjD,EAAwB4D,EAAY3D,kBAC7B2D,EAEX,IAAK,wBACD,IAAMC,EAAgBN,EAAMN,WAAaO,EAAOJ,QAAQM,SACxD,GAAIH,EAAMtD,iBAAiB6D,MAAK,SAAAT,GAAe,OAAIA,EAAgBD,UAAYI,EAAOJ,WAClF,IAAIQ,EAAW,6BACRL,GADQ,IAEXtD,iBAAkBsD,EAAMtD,iBAAiB8D,KAAI,SAAAV,GAAe,OACxDA,EAAgBD,UAAYI,EAAOJ,QAAnC,6BAEWC,GAFX,IAGQM,gBAAiBN,EAAgBM,gBAAkB,IAErDN,KACVJ,WAAYY,SAGhBD,EAAW,6BACJL,GADI,IAEPtD,iBAAiB,GAAD,oBAAMsD,EAAMtD,kBAAZ,CAA8B,CAACmD,QAASI,EAAOJ,QAASO,gBAAiB,KACzFV,WAAYY,IAIpB,OADA7D,EAAwB4D,EAAY3D,kBAC7B2D,EAEX,IAAK,8BACD,IAAMC,EAAgBN,EAAMN,WAAaO,EAAOH,gBAAgBD,QAAQM,SAClEE,EAAW,6BACVL,GADU,IAEbtD,iBAAkBsD,EAAMtD,iBAAiB8D,KAAI,SAAAV,GAAe,OACxDA,IAAoBG,EAAOH,gBAA3B,6BAEWA,GAFX,IAGQM,gBAAiBN,EAAgBM,gBAAkB,IAErDN,KACVJ,WAAYY,IAGhB,OADA7D,EAAwB4D,EAAY3D,kBAC7B2D,EAEX,IAAK,8BACD,GAA+C,IAA3CJ,EAAOH,gBAAgBM,gBACnBC,EAAcL,EAEtB,IAAMM,EAAgBN,EAAMN,WAAaO,EAAOH,gBAAgBD,QAAQM,SAaxE,OAZAE,EAAW,6BACJL,GADI,IAEPtD,iBAAkBsD,EAAMtD,iBAAiB8D,KAAI,SAAAV,GAAe,OACxDA,IAAoBG,EAAOH,gBAA3B,6BAEWA,GAFX,IAGQM,gBAAiBN,EAAgBM,gBAAkB,IAErDN,KACVJ,WAAYY,IAEhB7D,EAAwB4D,EAAY3D,kBAC7B2D,EAEX,IAAK,6BACD,IAAMC,EAAgBN,EAAMN,WAAcO,EAAOH,gBAAgBD,QAAQM,SAAWF,EAAOH,gBAAgBM,gBACrGC,EAAW,6BACVL,GADU,IAEbtD,iBAAkBsD,EAAMtD,iBAAiB+D,QAAO,SAAAX,GAAe,OAAIA,IAAoBG,EAAOH,mBAC9FJ,WAAYY,IAGhB,OADA7D,EAAwB4D,EAAY3D,kBAC7B2D,EAEX,IAAK,cACD,IAAMA,EAAW,6BACVL,GADU,IAEbP,SAAS,EACT/C,iBAAkB,GAClBgD,WAAY,IAGhB,OADAjD,EAAwB4D,EAAY3D,kBAC7B2D,EAEX,QACI,OAAOL,I,UC/FNU,GAAyB,SAAC,GAAe,IAAD,EAAbb,EAAa,EAAbA,QAC9Bc,EAAWC,eAMjB,OACI,sBAAKxB,UAAWC,KAAEwB,YAAlB,UACI,sBAAKzB,UAAWC,KAAEyB,cAAlB,UACI,cAAC,KAAD,CAAMC,GAAE,oBAAelB,EAAQmB,MAAQ5B,UAAWC,KAAE4B,KAApD,SAA2DpB,EAAQoB,OACnE,cAAC,KAAD,CAAU7B,UAAWC,KAAE6B,SAAvB,mBACKrB,EAAQsB,aADb,aACK,EAAeX,KAAI,SAAAY,GAAI,OACpB,qBAAKhC,UAAWC,KAAEgC,aAAlB,SACI,cAAC,KAAD,CAAQjC,UAAWC,KAAEiC,MAAOC,MAAO,SAAUhC,KAAM,IAAKiC,IAAKJ,EAAKK,UAC1DC,IAAKN,EAAKO,YAFeP,EAAKQ,YAOtD,sBAAKxC,UAAWC,KAAEwC,oBAAlB,UACI,sBAAKzC,UAAWC,KAAEyC,MAAlB,UAA0BjC,EAAQM,SAAlC,UACA,wBAAQ4B,QApBO,WACvBpB,EAAShB,GAA2BE,IACpCmC,IAAQC,QAAR,kBAA2BpC,EAAQoB,KAAnC,0BAkB6C7B,UAAU,eAA/C,SACI,cAAC8C,GAAA,EAAD,a,UCnBPC,GAAW,WACpB,IAAMC,EAA6BC,YAA+DpD,EAC9F,CACIqD,QAAS,CAAClE,QAASZ,KAIrB+E,EAAyBF,YAAuDnD,EAClF,CACIoD,QAAS,CAAClE,QAASZ,KAY3B,OARI4E,EAA2BI,OAC3BR,IAAQQ,MAAMJ,EAA2BI,MAAMR,SAG/CO,EAAuBC,OACvBR,IAAQQ,MAAMD,EAAuBC,MAAMR,SAG3CI,EAA2B3C,SAAW8C,EAAuB9C,QACtD,cAAC,EAAD,IAEP2C,EAA2BK,MAAQF,EAAuBE,KAEtD,gCACI,sBAAKrD,UAAWC,IAAEqD,cAAlB,UACI,qBAAKtD,UAAWC,IAAEsD,YAAlB,SACI,oBAAIvD,UAAW,OAAf,4BAEJ,cAAC,KAAD,CAAUwD,KAAM,IAAKC,MAAO,EAAGC,SAAS,EAAxC,SACKV,EAA2BK,KAAKM,sBAAsBvC,KAAI,SAAAwC,GAAsB,OAC7E,cAAC,GAAD,CAAanD,QAASmD,YAIlC,sBAAK5D,UAAWC,IAAEqD,cAAlB,UACI,qBAAKtD,UAAWC,IAAEsD,YAAlB,SACI,oBAAIvD,UAAW,OAAf,sBAEJ,cAAC,KAAD,CAAUwD,KAAM,IAAKC,MAAO,EAAGC,SAAS,EAAxC,SACKP,EAAuBE,KAAKQ,kBAAkBzC,KAAI,SAAA0C,GAAa,OAC5D,cAAC,GAAD,CAAarD,QAASqD,eAOvC,M,mBC/DEC,GAAY,WACrB,OACI,mCACI,cAAC,KAAD,CACIC,OAAO,MACPC,MAAM,MACNC,SAAS,8CACTC,MACI,cAAC,KAAD,CAAMxC,GAAI,IAAV,SACI,cAAC,KAAD,CAAQnB,KAAK,UAAb,8BCXX4D,GAAgB,SAACxD,GAC1B,OAAOA,EAAMyD,KAAKC,UAGTC,GAAc,SAAC3D,GACxB,OAAOA,EAAMyD,KAAKG,Q,qBCDTC,GAAkBtG,YAAH,wMCHxBiC,IDoB0BjC,YAAH,mOCpBR,CACfmG,SAAU,KACVE,QAAQ,IAeCjE,GACI,SAAC+D,EAAuBE,GAAxB,MAA6C,CACtDhE,KAAM,gBACNkE,QAAS,CAACJ,WAAUE,YAIfG,GAAQ,SAACA,GAAD,gDAA4B,WAAOpD,GAAP,UAAAqD,EAAA,sDAC7CzH,aAAaI,QAAQ,QAASoH,EAAME,aACpCtD,EAAShB,GAAoBoE,GAAO,IAFS,2CAA5B,uDAKRG,GAAS,2DAAiB,WAAOvD,GAAP,UAAAqD,EAAA,sDACnCzH,aAAa4H,WAAW,SACxBxD,EAAShB,GAAoB,MAAM,IAFA,2CAAjB,uDAKPyE,GA7BK,WAAkE,IAAjEpE,EAAgE,uDAAxDR,GAAcS,EAA0C,uCACjF,OAAQA,EAAOL,MACX,IAAK,gBACD,OAAO,6BACAI,GACAC,EAAO6D,SAElB,QACI,OAAO9D,K,SbhBP7D,K,cAAAA,E,sBAAAA,E,qBAAAA,M,cAqFAC,K,sBAAAA,E,mBAAAA,M,cAKAC,K,UAAAA,E,kBAAAA,E,wBAAAA,E,8EAAAA,E,sBAAAA,E,qBAAAA,M,KAsCL,IAiCKgI,GAjCCC,GAAM,O,SAiCPD,K,gBAAAA,E,gBAAAA,E,8BAAAA,E,+BAAAA,Q,Kc/JL,I,gJAAME,GAAqB,SAACC,GAC/B,OAAOA,EAAKC,MAAMlE,MAAK,SAAAmE,GAAI,OAAIA,EAAKzD,OAAS9E,EAASwI,WAAaD,EAAKzD,OAAS9E,EAASyI,UCQjFC,GAAY,WAAO,IAAD,EACrBC,EAAgBzC,YAAqCwB,GACvD,CAACvB,QAAS,CAAClE,QAASZ,KAElBkG,EAAWqB,aAAYvB,IACvBI,EAASmB,aAAYpB,IACrBhD,EAAWC,eAEjB,OACI,sBAAKxB,UAAWC,KAAE2F,aAAlB,UACI,sBAAK5F,UAAWC,KAAE4F,MAAlB,oBACKH,EAAcrC,YADnB,aACK,EAAoByC,SAAS1E,KAAI,SAAA2E,GAAI,OAClC,cAAC,KAAD,CAAoBpE,GAAE,iBAAYoE,EAAKnE,MAAQ5B,UAAWC,KAAE8F,KAA5D,SAAmEA,EAAKlE,MAA7DkE,EAAKvD,OAEnB8B,GAAYa,GAAmBb,EAASc,OACtC,cAAC,KAAD,CAAMzD,GAAE,SAAY3B,UAAWC,KAAE8F,KAAjC,4BAGNvB,EAEO,sBAAKxE,UAAWC,KAAE4F,MAAlB,UACI,cAAC,KAAD,CAAMlE,GAAI,WAAV,qBACA,cAAC,KAAD,CAAMA,GAAI,IAAKgB,QAAS,kBAAMpB,EAASuD,OAAvC,uBAIJ,sBAAK9E,UAAWC,KAAE4F,MAAlB,UACI,cAAC,KAAD,CAAMlE,GAAI,cAAV,mBACA,cAAC,KAAD,CAAMA,GAAI,iBAAV,6BCjCX8C,GAAkBtG,YAAH,0MAiBf6H,GAAiB7H,YAAH,qO,SCbd8H,GAAY,WAAO,IAAD,EAErBC,EADSC,cACSvE,MAAQ,GAC1BwE,EAAenD,YACjB+C,GACA,CACIK,UAAW,CAACzE,KAAMsE,GAClBhD,QAAS,CAAClE,QAASZ,KAI3B,IAAK8H,GAAYE,EAAahD,MAC1B,OAAO,cAAC,GAAD,IAGX,GAAIgD,EAAa/F,QACb,OAAO,cAAC,EAAD,IAGP+F,EAAahD,OACbR,IAAQQ,MAAMgD,EAAahD,OAG/B,IAAM2C,EAAI,UAAGK,EAAa/C,YAAhB,aAAG,EAAmBiD,QAEhC,OACI,8BACKP,GAAQpI,aAAK,OAACoI,QAAD,IAACA,OAAD,EAACA,EAAMQ,S,UC7BpBC,GAAiBrI,YAAH,6ZAsBdsI,GAA8BtI,YAAH,oaA4B3BuI,GAAoBvI,YAAH,+IAWjBwI,GAAqBxI,YAAH,ibAuBlByI,GAAwBzI,YAAH,8JAcrB0I,GAA2B1I,YAAH,udC5FxB2I,GAAoB,WAC7B,IAAMC,EAASZ,cACT5E,EAAWC,eACXwF,EAAWC,cACXC,EAAQH,EAAOG,OAAS,GAJK,EAKCC,aAA0DV,GAC1F,CAACvD,QAAS,CAAClE,QAASZ,KADjBgJ,EAL4B,oBAyBnC,OAjBAC,qBAAU,WACND,EAA0B,CACtBf,UAAW,CAACa,MAAOA,KAElBI,MAAK,SAAAC,GACEA,EAASlE,OACT9B,EAASoD,GAAM4C,EAASlE,KAAKmE,oBAC7B5E,IAAQC,QAAQ,+CAChBmE,EAAS,SAGhBS,OAAM,SAAArE,GACHsE,QAAQC,IAAIvE,GACZR,IAAQQ,MAAMA,EAAMR,SACpBoE,EAAS,UAElB,IAEC,qBAAKY,MAAO,CAACC,MAAO,OAAQC,OAAQ,QAApC,SACI,cAAC,EAAD,O,uECvBCC,GAAgB,WACzB,IAAMxG,EAAWC,eACXgD,EAASmB,aAAYpB,IAFI,EAGe4C,aAAkCX,IAHjD,mBAGxBwB,EAHwB,KAGTC,EAHS,OAIhBC,KAAKC,UAAbC,EAJwB,oBAMzBC,EAAQ,yCAAG,gCAAAzD,EAAA,sDAAQ0D,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAAf,EAAyBC,SACtCR,EAAc,CAAC3B,UAAW,CAACoC,WAAY,CAACH,QAAOC,eAC1CjB,MAAK,SAAAC,GACEA,EAASlE,MACT9B,EAASoD,GAAM4C,EAASlE,KAAKsB,WAGpC8C,OAAM,SAAArE,GACHgF,EAAKM,UAAU,CACX,CACI7G,KAAM,wBACN8G,OAAQ,CAACvF,EAAMR,eAXlB,2CAAH,sDAiBRgG,EAAc,WAChBR,EAAKS,YAAY,CAAC,2BAGtB,OAAIrE,EACO,cAAC,IAAD,CAAU7C,GAAI,MAGrB,qBAAK3B,UAAWC,KAAE6I,iBAAlB,SACI,qBAAK9I,UAAWC,KAAE8I,UAAlB,SACI,eAAC,KAAD,CACIlH,KAAK,YACLmH,cAAe,CAACR,UAAU,GAC1BH,SAAUA,EACVD,KAAMA,EAJV,UAMI,qBAAIpI,UAAWC,KAAEgE,MAAjB,UACI,0DACA,qBAAKjE,UAAU,QAAf,sBAEJ,cAAC,KAAKiJ,KAAN,CACIpH,KAAK,QACLqH,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,4BAEb,CACIpC,KAAM,QACNoC,QAAS,mCATrB,SAaI,cAAC,KAAD,CAAOwG,QAASR,EAAaS,OAAQ,cAACC,GAAA,EAAD,CAActJ,UAAU,wBACtDuJ,YAAY,QAAQ/I,KAAM,YAErC,cAAC,KAAKyI,KAAN,CACIpH,KAAK,WACLqH,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,gCAFtC,SAII,cAAC,KAAD,CACIwG,QAASR,EACTS,OAAQ,cAACG,GAAA,EAAD,CAAcxJ,UAAU,wBAChCQ,KAAK,WACL+I,YAAY,eAGpB,eAAC,KAAKN,KAAN,CAAWpH,KAAK,wBAAhB,UACI,cAAC,KAAKoH,KAAN,CAAWpH,KAAK,WAAW4H,cAAc,UAAUC,SAAO,EAAC1J,UAAWC,KAAE0J,WAAxE,SACI,cAAC,KAAD,CAAUhH,QAASiG,EAAnB,SACI,sBAAM5I,UAAWC,KAAE2J,MAAnB,6BAIR,cAAC,KAAD,CAAM5J,UAAWC,KAAE4J,WAAYlI,GAAI,GAAnC,gCAIJ,eAAC,KAAKsH,KAAN,WACI,cAAC,KAAD,CAAQ5I,QAAS4H,EAAqB5H,QAASG,KAAK,UAAUsJ,SAAS,SAC/D9J,UAAW,CAAC,oBAAqBC,KAAE8J,QAAQC,KAAK,KADxD,oBAIA,sBAAMhK,UAAWC,KAAE2J,MAAnB,iBACA,cAAC,KAAD,CAAMjI,GAAI,cAAV,sC,qBCxFXsI,GAAmB,WAC5B,IAAMzF,EAASmB,aAAYpB,IACrByC,EAAWC,cAFiB,EAGkBE,aAAwCT,IAH1D,mBAG3BwD,EAH2B,KAGTC,EAHS,OAInBjC,KAAKC,UAAbC,EAJ2B,oBAM5BC,EAAQ,yCAAG,WAAO+B,GAAP,UAAAxF,EAAA,sDACbsF,EAAiB,CAAC7D,UAAW,CAACgE,cAAc,gBAAKD,MAC5C9C,MAAK,SAAAC,GACEA,EAASlE,OACTT,IAAQC,QAAQ0E,EAASlE,KAAKiH,UAC9BtD,EAAS,SAGhBS,OAAM,SAAArE,GACHgF,EAAKM,UAAU,CACX,CACI7G,KAAM,QACN8G,OAAQ,CAACvF,EAAMR,eAZlB,2CAAH,sDAkBd,OAAI4B,EACO,cAAC,IAAD,CAAU7C,GAAI,MAGrB,qBAAK3B,UAAWC,KAAEsK,oBAAlB,SACI,qBAAKvK,UAAWC,KAAEuK,aAAlB,SACI,eAAC,KAAD,CACI3I,KAAK,eACLmH,cAAe,CAACR,UAAU,GAC1BH,SAAUA,EACVD,KAAMA,EAJV,UAMI,qBAAIpI,UAAWC,KAAEgE,MAAjB,UACI,0DACA,qBAAKjE,UAAU,QAAf,yBAEJ,cAAC,KAAKiJ,KAAN,CACIpH,KAAK,QACLqH,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,4BAEb,CACIpC,KAAM,QACNoC,QAAS,mCATrB,SAaI,cAAC,KAAD,CAAOyG,OAAQ,cAACC,GAAA,EAAD,CAActJ,UAAU,wBAChCuJ,YAAY,QAAQ/I,KAAM,YAErC,cAAC,KAAKyI,KAAN,CACIpH,KAAK,WACLqH,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,gCAFtC,SAII,cAAC,KAAD,CACIyG,OAAQ,cAACG,GAAA,EAAD,CAAcxJ,UAAU,wBAChCQ,KAAK,WACL+I,YAAY,eAGpB,cAAC,KAAKN,KAAN,CACIpH,KAAK,YACLqH,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,iCAFtC,SAII,cAAC,KAAD,CACIyG,OAAQ,cAACC,GAAA,EAAD,CAActJ,UAAU,wBAChCuJ,YAAY,gBAGpB,cAAC,KAAKN,KAAN,CACIpH,KAAK,WACLqH,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,gCAFtC,SAII,cAAC,KAAD,CACIyG,OAAQ,cAACC,GAAA,EAAD,CAActJ,UAAU,wBAChCuJ,YAAY,eAGpB,eAAC,KAAKN,KAAN,WACI,cAAC,KAAD,CAAQ5I,QAAS8J,EAAwB9J,QAASG,KAAK,UAAUsJ,SAAS,SAClE9J,UAAWC,KAAE8J,OADrB,sBAIA,sBAAM/J,UAAWC,KAAE2J,MAAnB,iBACA,cAAC,KAAD,CAAMjI,GAAI,WAAV,mCCrGX8I,GAAqB,WAC9B,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAM,QAASC,QAAS,cAAC,GAAD,MAC/B,cAAC,IAAD,CAAOD,KAAM,WAAYC,QAAS,cAAC,GAAD,MAClC,cAAC,IAAD,CAAOD,KAAM,IAAKC,QAAS,cAAC,GAAD,U,qBCL1BC,GAAkB,SAAChK,GAC5B,OAAOA,EAAMiK,OAAOvK,YAIXwK,GAAwB,SAAClK,GAClC,OAAOA,EAAMiK,OAAOvN,kBCNXyN,GAAS,WAClB,IAAMzK,EAAaqF,aAAYiF,IAE/B,OACI,sBAAK5K,UAAWC,KAAE+K,OAAlB,UACI,cAAC,KAAD,CAAMrJ,GAAI,IAAV,SACI,qBAAI3B,UAAWC,KAAEgL,KAAjB,UACI,qBAAKjL,UAAWC,KAAEiL,OAAlB,oBACA,wDAGR,sBAAKlL,UAAWC,KAAEkL,YAAlB,UACI,iDACA,qDAEJ,cAAC,KAAD,CAAMxJ,GAAI,UAAW3B,UAAWC,KAAE4K,OAAlC,SACI,sBAAK7K,UAAWC,KAAEmL,YAAlB,UAAgC9K,EAAhC,gB,qBCTH+K,GAAuBlN,YAAH,2hCA0CpBmN,GAAqBnN,YAAH,qzB,mBC9ClBoN,GAAS,WAAO,IAAD,IACQC,mBAAS,IADjB,mBACjBC,EADiB,aAEQD,mBAAS,IAFjB,mBAEjBE,EAFiB,KAGlBC,GAHkB,KAGG1I,YAA+CoI,GACtE,CACIhF,UAAW,CACPuF,mBAAoB,CAChBC,KAAMJ,EACNK,KAAMJ,EACNK,SAAU,KAGlB7I,QAAS,CAAClE,QAASZ,MAZH,EAgBsBoN,mBAA8B,CAAC,CAACQ,MAAO,QAhB7D,mBAgBjBC,EAhBiB,UA0BxB,OACI,sBAAKjM,UAAWC,KAAEiM,YAAlB,UACI,sBAAKlM,UAAWC,KAAEkM,KAAlB,UACI,cAAC,KAAD,CAAMxK,GAAI,IAAK3B,UAAWC,KAAEmM,SAA5B,kBACA,cAAC,KAAD,CAAMzK,GAAI,YAAa3B,UAAWC,KAAEmM,SAApC,sBACA,sBAAKpM,UAAWC,KAAEoM,SAAlB,UACI,wBAAQrM,UAAW,CAACC,KAAEmM,SAAUnM,KAAEqM,gBAAgBtC,KAAK,KAAvD,wBACA,qBAAKhK,UAAWC,KAAEsM,gBAAlB,mBACKZ,EAAmBtI,YADxB,aACK,EAAyBmJ,cAAcC,WAAWrL,KAAI,SAAAsL,GAAQ,OAC3D,cAAC,KAAD,CAAM/K,GAAE,sBAAiB+K,EAAS9K,MAAlC,SAA2C8K,EAAS7K,kBAKpE,qBAAK7B,UAAWC,KAAE0M,cAAlB,SACI,cAAC,KAAD,CACIC,QAASX,EACTY,SAzBM,SAACb,GACnBtE,QAAQC,IAAIqE,IAyBAc,SAtBM,SAACd,EAAeY,GAClClF,QAAQC,IAAIqE,IAsBApE,MAAO,CAACC,MAAO,QAJnB,SAMI,cAACkF,GAAA,EAAD,CAAQxD,YAAY,mBCpD3BxF,GAAY,WACrB,OACI,mCACI,cAAC,KAAD,CACIC,OAAO,MACPC,MAAM,MACNC,SAAS,8CACTC,MACI,cAAC,KAAD,CAAMxC,GAAI,SAAV,SACI,cAAC,KAAD,CAAQnB,KAAK,UAAb,8B,+BCbXwM,GAAyB,SAACC,GAEnC,OADcA,EAAYC,MAAM,oBAAsB,IACzC9L,IAAI+L,IAAiBnD,KAAK,MAGrCmD,GAAkB,SAACC,GACrB,OAAOA,EAAKC,OAAO,GAAGC,oBAAsBF,EAAKG,UAAU,IAIlDC,GAAoB,SAACP,GAC9B,IAAMQ,EAAcR,EAAYpO,MAAM,KACtC,MAAM,GAAN,OAAU4O,EAAY,GAAtB,YAA4BA,EAAY,GAAGF,UAAU,EAAGE,EAAY,GAAGC,OAAS,KCDvEC,GAAgB,WAAO,IAAD,IACCnC,mBAAS,IADV,mBACxBC,EADwB,aAECD,mBAAS,IAFV,mBAExBE,EAFwB,KAEdkC,EAFc,OAGDpC,mBAAkBvG,GAAQ4I,QAHzB,mBAGxBC,EAHwB,KAGfC,EAHe,KAIzBC,EAAmB/K,YAA2CtD,EAChE,CACI0G,UAAW,CACP4H,iBAAkB,CACdpC,KAAMJ,EACNK,KAAMJ,EACNK,SAAU,GACV+B,QAASA,IAGjB5K,QAAS,CAAClE,QAASZ,KAdI,EAiBOoN,mBAA4B,CAAC0C,SAAU,GAAIC,MAAO,IAjBzD,mBAiBxBC,EAjBwB,KAiBXC,EAjBW,KAmB/BhH,qBAAU,WAAO,IAAD,GACZ,UAAI2G,EAAiB3K,YAArB,aAAI,EAAuBiL,cACvBD,EAAe,CACXH,SAAS,GAAD,oBAAME,EAAYF,UAAlB,aAA+BF,EAAiB3K,KAAKiL,YAAYJ,WACzEC,MAAOH,EAAiB3K,KAAKiL,YAAYH,UAGlD,WAACH,EAAiB3K,YAAlB,aAAC,EAAuBiL,cAE3B,IAAMC,EAAqB,yCAAG,WAAOC,GAAP,kBAAA5J,EAAA,yDACpB+F,EAAU6D,EAAEC,gBACGC,KAAKC,IAAIhE,EAAQiE,aAAejE,EAAQkE,WAAalE,EAAQmE,aAC7D,KAAOd,EAAiB3N,SAAYoL,EAAWC,EAAY0C,EAAYD,OAHlE,uBAKtBP,EADMmB,EAAcrD,EAAWD,GAJT,SAMhBuC,EAAiBgB,QAAQ,CAC3Bf,iBAAkB,CACdnC,KAAMiD,EACNlD,KAAMJ,EACNM,SAAU,GACV+B,QAASA,KAXK,2CAAH,sDAiBrBmB,EAAoB,yCAAG,WAAOjD,GAAP,UAAApH,EAAA,6DACL,EACpBgJ,EADoB,GAEpBG,EAAW/B,GACXqC,EAAe,CAACH,SAAU,GAAIC,MAAO,IAJZ,SAKnBH,EAAiBgB,QAAQ,CAC3Bf,iBAAkB,CACdnC,KANY,EAOZD,KAAMH,EACNK,SAAU,GACV+B,QAAS9B,KAVQ,2CAAH,sDAe1B,OACI,sBAAKhM,UAAWC,KAAEiP,gBAAiBC,SAAUZ,EAA7C,UACI,cAAC,KAAD,CAAQa,aAActB,EAAS9N,UAAWC,KAAE6N,QAASuB,SAAUJ,EAA/D,SACMK,OAAOC,KAAKtK,IAAyC7D,KAAI,SAACoO,EAAKC,GAAN,OACvD,cAAC,KAAOC,OAAR,CAAe1D,MAAOwD,EAAtB,SAAoCxC,GAAuBwC,IAA3BC,QAGxC,qBAAKzP,UAAWC,KAAEiO,SAAlB,SACKE,EAAYF,SAAS9M,KAAI,SAAAX,GAAO,OAC7B,cAAC,GAAD,CAAaA,QAASA,GAAcA,EAAQ+B,SAGnDwL,EAAiB3N,SAAW,cAAC,EAAD,Q,mDCrE5BsP,GAAmB,WAAO,IAAD,EAE5BC,EADSzJ,cACYvE,MAAQ,GAC7BiO,EAAkB5M,YACpBrD,EACA,CACIyG,UAAW,CAACzE,KAAMgO,GAClB1M,QAAS,CAAClE,QAASZ,KAGrBmD,EAAWC,eAqBjB,IAAKoO,GAAeC,EAAgBzM,MAChC,OAAO,cAAC,GAAD,IAEX,GAAIyM,EAAgBxP,QAChB,OAAO,cAAC,EAAD,IAEX,IAAMI,EAAO,UAAGoP,EAAgBxM,YAAnB,aAAG,EAAsByM,WACtC,OACI,qCACI,sBAAK9P,UAAWC,KAAE8P,kBAAlB,UACI,cAAC,KAAD,CAAUC,UAAQ,EAAChQ,UAAWC,KAAE6B,SAAhC,gBACKrB,QADL,IACKA,OADL,EACKA,EAASsB,MAAMX,KAAI,SAAAY,GAAI,OACpB,cAAC,KAAD,CAAsBhC,UAAWC,KAAEiC,MAAOC,MAAO,SAAUC,IAAKJ,EAAKK,UAAWlC,KAAM,KAAzE6B,EAAKQ,SAG1B,gCACI,wCAAS/B,QAAT,IAASA,OAAT,EAASA,EAASoB,OAClB,uBAAO7B,UAAU,YAAjB,SACI,kCACA,+BACI,qCACA,6BACI,6CAASS,QAAT,IAASA,OAAT,EAASA,EAAS+B,WAG1B,+BACI,2CACA,6BACI,sCAAO/B,QAAP,IAAOA,OAAP,EAAOA,EAASwP,gBAGtBxP,IAAkB,OAAPA,QAAO,IAAPA,OAAA,EAAAA,EAASgM,WAAWiB,QAAS,GACtC,+BACI,6CACA,oCAAKjN,QAAL,IAAKA,OAAL,EAAKA,EAASgM,WAAWrL,KAAI,SAAAsL,GAAQ,OACjC,cAAC,KAAD,CAAKwD,MAAO,OAAZ,SACI,cAAC,KAAD,CACMvO,GAAI,oBAAsB+K,EAAS9K,KADzC,SACgD8K,EAAS7K,MAD9C6K,EAASlK,mBASxC,sBAAKxC,UAAWC,KAAEwC,oBAAlB,UACI,sBAAKzC,UAAWC,KAAEyC,MAAlB,iBAA0BjC,QAA1B,IAA0BA,OAA1B,EAA0BA,EAASM,SAAnC,UACA,wBAAQ4B,QAvDD,WAAO,IAAD,GAC7B,UAAIkN,EAAgBxM,YAApB,aAAI,EAAsByM,cACtBvO,EAAShB,GAA2BsP,EAAgBxM,KAAKyM,aACzDlN,IAAQC,QAAR,kBAA2BgN,EAAgBxM,KAAKyM,WAAWjO,KAA3D,2BAoDiD7B,UAAU,eAA/C,SACI,cAAC8C,GAAA,EAAD,eAKhB,sBAAK9C,UAAWC,KAAEkQ,MAAlB,UACI,cAAC,KAAD,CAAMlM,MAAM,cAAcjE,UAAWC,KAAEmQ,KAAvC,SAA8C3P,GAAW9C,aAAK,OAAC8C,QAAD,IAACA,OAAD,EAACA,EAAS4P,eACxE,cAAC,KAAD,CAAMpM,MAAM,kBAAkBjE,UAAWC,KAAEmQ,KAA3C,SACI,cAAC,KAAD,CAAOE,YAAY,EAAOC,WAAU,OAAE9P,QAAF,IAAEA,OAAF,EAAEA,EAAS+P,gBACxCC,QA5EP,CACZ,CACIC,UAAW,OACXlB,IAAK,QAET,CACIkB,UAAW,QACXlB,IAAK,UAqE4BmB,YAAY,aChG5CC,GAAqB,WAC9B,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOlG,KAAM,IAAKC,QAAS,cAAC,GAAD,MAC3B,cAAC,IAAD,CAAOD,KAAM,SAAUC,QAAS,cAAC,GAAD,MAChC,cAAC,IAAD,CAAOD,KAAM,IAAKC,QAAS,cAAC,GAAD,U,6DCK1BkG,GAAwB,SAAC,GAA2E,IAA1EC,EAAyE,EAAzEA,SAAUC,EAA+D,EAA/DA,QAASC,EAAsD,EAAtDA,UAAWC,EAA2C,EAA3CA,UAAWC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAC9F,OACI,mCACI,sBAAKpR,UAAWC,KAAEoR,WAAlB,UACKH,EACG,qBAAKlR,UAAWC,KAAEqR,WAAY3O,QAASuO,EAAvC,SACI,cAAC,KAAD,CAAQ/Q,KAAM,GAAIoR,KAAM,cAACC,GAAA,EAAD,QAE1BV,EACI,mBAAGW,KAAMX,EAAUY,OAAQ,QAAS1R,UAAWC,KAAEqR,WAAjD,SACE,cAAC,KAAD,CAAQnR,KAAM,GAAIoR,KAAM,cAACC,GAAA,EAAD,QAE1BT,GAAW,cAAC,KAAD,CAAMpP,GAAIoP,EAAS/Q,UAAWC,KAAEqR,WAAhC,SACb,cAAC,KAAD,CAAQnR,KAAM,GAAIoR,KAAM,cAACC,GAAA,EAAD,QAG/BL,EACG,qBAAKnR,UAAWC,KAAE0R,aAAchP,QAASwO,EAAzC,SACI,cAAC,KAAD,CAAQhR,KAAM,GAAIoR,KAAM,cAACK,GAAA,EAAD,QAE1BZ,GACF,cAAC,KAAD,CAAMrP,GAAIqP,EAAWhR,UAAWC,KAAE0R,aAAlC,SACI,cAAC,KAAD,CAAQxR,KAAM,GAAIoR,KAAM,cAACK,GAAA,EAAD,QAG/BR,EACG,cAAC,KAAD,CACInN,MAAM,wCACN4N,UAAWT,EACXU,OAAO,MACPC,WAAW,KAJf,SAMI,qBAAK/R,UAAWC,KAAE+R,aAAlB,SACI,cAAC,KAAD,CAAQ7R,KAAM,GAAIoR,KAAM,cAACU,GAAA,EAAD,UAI9BhB,GACF,cAAC,KAAD,CAAMtP,GAAIsP,EAAWjR,UAAWC,KAAE+R,aAAlC,SACI,cAAC,KAAD,CAAQ7R,KAAM,GAAIoR,KAAM,cAACU,GAAA,EAAD,c,yCCzCnCC,GAAyC,SAAC,GAAe,IAAd7R,EAAa,EAAbA,QAC9C/C,EAAmBqI,aAAYmF,IAC/BxK,EAAaqF,aAAYiF,IACzBrJ,EAAWC,eAcXiP,EAAU,CACZ,CACIxM,MAAO,KACPyM,UAAW,KACXyB,OAAQ,SAAC5L,EAAW7F,GAAZ,OAAiD,yCAAIA,EAAgBD,QAAQ+B,QAEzF,CACIyB,MAAO,QACPyM,UAAW,YACXyB,OAAQ,SAAC5L,EAAW7F,GAAZ,eACJ,cAAC,KAAD,CAAUV,UAAWC,KAAE6B,SAAvB,gBACKpB,QADL,IACKA,GADL,UACKA,EAAiBD,eADtB,iBACK,EAA0BsB,aAD/B,aACK,EAAiCX,KAAI,SAAAY,GAAI,OACtC,cAAC,KAAD,CAAsBhC,UAAWC,KAAEiC,MAAOC,MAAO,SAAUhC,KAAM,GAAIiC,IAAKJ,EAAKK,UACvEC,IAAKN,EAAKO,UADLP,EAAKQ,WAMlC,CACIyB,MAAO,OACPyM,UAAW,OACXlB,IAAK,OACL2C,OAAQ,SAAC5L,EAAW7F,GAAZ,OAAiD,+BAAOA,EAAgBD,QAAQoB,SAE5F,CACIoC,MAAO,QACPyM,UAAW,WACXlB,IAAK,WACL2C,OAAQ,SAAC5L,EAAW7F,GAAZ,OAAiD,iCAAOA,EAAgBD,QAAQM,SAA/B,YAE7D,CACIkD,MAAO,WACPyM,UAAW,WACXlB,IAAK,WACL2C,OAAQ,SAAC5L,EAAW7F,GAAZ,OACJ,sBAAKV,UAAWC,KAAEgQ,SAAlB,UACI,wBAAQzP,KAAM,SACNR,UAAWC,KAAEmS,gBACbzP,QAAS,kBAlDO,SAACjC,GACrCa,EAAShB,GAAiCG,IAiDP2R,CAAgC3R,IAFvD,SAGI,cAAC4R,GAAA,EAAD,MAEJ,qBAAKtS,UAAWC,KAAEsS,eAAlB,SAAmC7R,EAAgBM,kBACnD,wBAAQR,KAAM,SACNR,UAAWC,KAAEmS,gBACbzP,QAAS,kBApDO,SAACjC,GACrCa,EAAShB,GAAiCG,IAmDP8R,CAAgC9R,IAFvD,SAGI,cAAC+R,GAAA,EAAD,WAKhB,CACIxO,MAAO,cACPyM,UAAW,aACXlB,IAAK,aACL2C,OAAQ,SAAC5L,EAAW7F,GAAZ,OAAiD,iCAAOA,EAAgBD,QAAQM,SAAWL,EAAgBM,gBAA1D,YAE7D,CACIiD,MAAO,UACPyM,UAAW,UACXlB,IAAK,UACL2C,OAAQ,SAAC5L,EAAW7F,GAAZ,OACJ,cAAC,GAAD,CAAY0Q,SAAU,kBAjEM,SAAC1Q,GACrCa,EAAShB,GAAgCG,IAgELgS,CAAgChS,SAKxE,OACI,qCACI,cAAC,KAAD,CAAO+P,QAASA,EAASF,WAAYjT,EAAkBqT,YAAY,EAAOtQ,QAASA,EAASsS,OAAQ,OACpG,qBAAI3S,UAAWC,KAAEK,WAAjB,0BAA2CA,EAA3C,cC9FCsS,GAAc,WACvB,IAAMtV,EAAmBqI,aAAYmF,IAErC,OACI,gCACI,cAAC,GAAD,CAAuBzK,SAAS,IAC/B/C,EAAiBoQ,OAAS,GAAK,cAAC,KAAD,CAAM/L,GAAI,mBAAV,SAC5B,wBAAQ3B,UAAU,eAAlB,kC,mBCXH6S,GAAqB,SAACjS,GAC/B,OAAOA,EAAMkS,WAAWC,eAGfC,GAAyB,SAACpS,GACnC,OAAOA,EAAMkS,WAAWG,mBAGfC,GAAc,SAACtS,GACxB,OAAOA,EAAMkS,WAAWK,QAIfC,GAAkB,SAACxS,GAC5B,OAAOA,EAAMkS,WAAWO,YAGfC,GAAmB,SAAC1S,GAC7B,OAAOA,EAAMkS,WAAWS,a,oBClBfC,GAAqB1V,IAAMC,OAAO,CAC3CH,QAAS,yCCAP6V,GAAmB,mCAEZC,GAAgB,SACfC,GACN,OAAOH,GAAmBI,KAAwB,GAAIpW,KAAKC,UAAU,CACjE,OAAUgW,GACV,UAAa,UACb,aAAgB,oBAChB,iBAAoB,CAChB,SAAYE,EACZ,MAAS,OAEbrM,MAAK,SAAAuM,GAAG,OAAIA,EAAIxQ,SAVfqQ,GAAgB,SAYXI,GACV,OAAON,GAAmBI,KAA2B,GAAIpW,KAAKC,UAAU,CACpE,OAAUgW,GACV,UAAa,UACb,aAAgB,gBAChB,iBAAoB,CAChB,QAAWK,MAEfxM,MAAK,SAAAuM,GAAG,OAAIA,EAAIxQ,SCrBxBjD,GAAe,CACf2S,eAAe,EACfE,mBAAmB,EACnBE,OAAQ,GACRE,WAAY,GACZE,YAAa,MA2CJhT,GACS,SAACF,GAAD,MAAuB,CACrCG,KAAM,qBACNH,YAHKE,GAKa,SAACF,GAAD,MAAuB,CACzCG,KAAM,yBACNH,YAPKE,GASE,SAAC4S,GAAD,MAAqB,CAC5B3S,KAAM,aACN2S,WAXK5S,GAaM,SAAC8S,GAAD,MAA8B,CACzC7S,KAAM,iBACN6S,eAfK9S,GAiBG,iBAAO,CACfC,KAAM,gBAlBDD,GAoBO,SAAC6C,GAAD,MAA2B,CACvC5C,KAAM,mBACN4C,UAIK2Q,GAAa,SAACJ,GAAD,gDACtB,WAAOpS,GAAP,gBAAAqD,EAAA,6DACIrD,EAAShB,IAAyB,IADtC,SAEoCmT,GAAwBC,GAF5D,QAEUK,EAFV,QAG0B3Q,KAAK,IAAM2Q,EAAkB3Q,KAAK,GAAG4Q,UAAUvG,OAAS,EAC1EnM,EAAShB,GAAkByT,EAAkB3Q,KAAK,GAAG4Q,YAErD1S,EAAShB,GAAuB,sBACpCgB,EAAShB,IAAyB,IAPtC,2CADsB,uDAWb2T,GAAiB,SAACJ,GAAD,gDAC1B,WAAOvS,GAAP,gBAAAqD,EAAA,6DACIrD,EAAShB,IAA6B,IAD1C,SAEwCmT,GAA4BI,GAFpE,OAEUK,EAFV,OAGI5S,EAAShB,GAAsB4T,EAAsB9Q,OACrD9B,EAAShB,IAA6B,IAJ1C,2CAD0B,uDAQf6T,GArFW,WAAkE,IAAjExT,EAAgE,uDAAxDR,GAAcS,EAA0C,uCACvF,OAAQA,EAAOL,MACX,IAAK,qBACD,OAAO,6BACAI,GADP,IAEImS,cAAelS,EAAOR,UAE9B,IAAK,yBACD,OAAO,6BACAO,GADP,IAEIqS,kBAAmBpS,EAAOR,UAElC,IAAK,aACD,OAAO,6BACAO,GADP,IAEIuS,OAAQtS,EAAOsS,SAEvB,IAAK,iBACD,OAAO,6BACAvS,GADP,IAEIyS,WAAYxS,EAAOwS,aAE3B,IAAK,cACD,OAAO,6BACAzS,GADP,IAEImS,eAAe,EACfE,mBAAmB,EACnBE,OAAQ,GACRE,WAAY,KAEpB,IAAK,mBACD,OAAO,6BACAzS,GADP,IAEI2S,YAAa1S,EAAOuC,QAE5B,QACI,OAAOxC,ICxBNyT,GAAwBlW,YAAH,sjDA8DrBmW,GAAwBnW,YAAH,+/CChE5BoW,GAAiB,CACnBC,SAAU,CACNC,GAAI,CAACC,KAAM,IACXC,GAAI,CAACD,KAAM,IAEfE,WAAY,CACRH,GAAI,CAACC,KAAM,IACXC,GAAI,CAACD,KAAM,MAGbG,GAAqB,CACvBD,WAAY,CACRH,GAAI,CAACC,KAAM,GAAII,OAAQ,GACvBH,GAAI,CAACD,KAAM,GAAII,OAAQ,KAIlBC,GAAqB,WAAO,IAAD,EACrB7M,KAAKC,UAAbC,EAD6B,oBAE9B9D,EAAWqB,aAAYvB,IACvB7C,EAAWC,eAHmB,EAIQgK,mBAAyBxO,EAAegY,WAJhD,mBAI7BC,EAJ6B,KAIbC,EAJa,KAK9B/B,EAASxN,aAAYuN,IACrBG,EAAa1N,aAAYyN,IACzBL,EAAgBpN,aAAYkN,IAC5BsC,EAAoBxP,aAAYqN,IARF,EASIxH,mBAA2D,MAT/D,mBAS7B4J,EAT6B,KASfC,EATe,OAUqBlO,aAA8CkN,GACnG,CAACnR,QAAS,CAAClE,QAASZ,KAXY,mBAU7BkX,EAV6B,KAURC,EAVQ,KAa9BjY,EAAmBqI,aAAYmF,IAC/ByI,EAAc5N,aAAY2N,IAC1BtM,EAAWC,cACXzC,EAASmB,aAAYvB,IAE3BiD,qBAAU,WACFkM,IACAnL,EAAKM,UAAU,CACX,CACI7G,KAAM,OACN8G,OAAQ,CAAC4K,MAGjBhS,EAAShB,GAAuB,UAErC,CAACgT,IAEJ,IAAMlL,EAAQ,yCAAG,WAAO+B,GAAP,oBAAAxF,EAAA,sDAKqCwF,EAA3CoL,KAAMR,EAAqC5K,EAArC4K,UAAqC5K,EAA1BqL,QAAYC,EALvB,aAKqCtL,EALrC,gCAMb1C,QAAQC,IAAI,4BAA6ByC,GACrCuL,EAAavL,EAAOqL,QACD,cAAnBR,IACAU,EAAavL,EAAOoL,KAAO,IAAMpL,EAAO4K,WAC5CM,EAAoB,CAChBjP,UAAW,CACPuP,iBAAiB,6BACVF,GADS,IAEZD,QAASE,EACTE,iBAAgB,OAAET,QAAF,IAAEA,OAAF,EAAEA,EAActB,aAChCgC,iBAAgB,OAAEV,QAAF,IAAEA,OAAF,EAAEA,EAAcpJ,MAChC+J,kBAAmBf,EACnBgB,qBAAsB1Y,EAAiB8D,KAAI,SAAA9D,GAAgB,MAAK,CAC5D2Y,UAAW3Y,EAAiBmD,QAAQ+B,GACpCxB,gBAAiB1D,EAAiB0D,yBAK7CsG,MAAK,WACF/F,EAAShB,MACTqC,IAAQC,QAAQ,8BAChBmE,EAAS,QAEZS,OAAM,SAAArE,GACHR,IAAQQ,MAAMA,EAAMR,YA/Bf,2CAAH,sDAmCRsT,EAAmB,yCAAG,WAAOlK,GAAP,UAAApH,EAAA,sDACxBrD,EAAShB,GAAsB,KAC/BgB,EAAShB,GAAkB,KAC3B8U,EAAgB,MAChBjN,EAAKM,UAAU,CAAC,CACZ7G,KAAM,aACNmK,MAAO,MAEM,KAAjBA,EAAMmK,QAAiB5U,EAASwS,GAAW/H,IARnB,2CAAH,sDAWnBoK,EAA6BC,sBAAYC,MAAS,SAAAC,GAAS,OAAIL,EAAoBK,KAAY,KAAM,IAS3G,OAAK/R,EAGAlH,EAAiBoQ,OAKlB,8BACI,eAAC,KAAD,6BACQ6G,IADR,IAEInM,KAAMA,EACNvG,KAAK,iBACLwG,SAAUA,EACVW,cAAe,CACXV,MAAK,OAAEhE,QAAF,IAAEA,OAAF,EAAEA,EAAUc,KAAKkD,MACtBkO,UAAS,OAAElS,QAAF,IAAEA,OAAF,EAAEA,EAAUc,KAAKoR,UAC1BC,SAAQ,OAAEnS,QAAF,IAAEA,OAAF,EAAEA,EAAUc,KAAKqR,SACzBxB,eAAgBA,GAEpByB,oBAAkB,EAXtB,UAaI,cAAC,KAAKzN,KAAN,CACIpH,KAAK,QACL8U,MAAM,SACNzN,MAAO,CACH,CACI1I,KAAM,QACNoC,QAAS,kCAEb,CACIuG,UAAU,EACVvG,QAAS,4BACTgU,YAAY,IAXxB,SAeI,cAAC,KAAD,CAAOrN,YAAa,SAAU/I,KAAM,YAExC,cAAC,KAAKyI,KAAN,CACIpH,KAAK,cACL8U,MAAM,cACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,iCAAkCgU,YAAY,IAHpF,SAKI,cAAC,KAAD,CAAOrN,YAAa,0BAExB,cAAC,KAAKN,KAAN,CACIpH,KAAK,YACL8U,MAAM,YACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,+BAAgCgU,YAAY,IAHlF,SAKI,cAAC,KAAD,CAAOrN,YAAa,gBAExB,cAAC,KAAKN,KAAN,CACIpH,KAAK,WACL8U,MAAM,WACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,8BAA+BgU,YAAY,IAHjF,SAKI,cAAC,KAAD,CAAOrN,YAAa,eAExB,cAAC,KAAKN,KAAN,CACI0N,MAAM,kBACN9U,KAAK,iBAFT,SAII,eAAC,KAAMgV,MAAP,CAAaxH,SAAU,SAACb,GAAD,OAAO0G,EAAkB1G,EAAEkD,OAAO1F,QAAzD,UACI,cAAC,KAAD,CAAOA,MAAM,YAAb,uDACA,cAAC,KAAD,CAAOA,MAAM,UAAb,gEAGY,cAAnBiJ,EAEO,qCACI,cAAC,KAAKhM,KAAN,CACIpH,KAAK,OACL8U,MAAM,OACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,6BAHtC,SAKI,cAAC,KAAD,CACIgK,QAASuG,EAAO/R,KAAI,SAAAoU,GAAI,MAAK,CACzBxJ,MAAOwJ,EAAKsB,QACZhD,aAAc0B,EAAKuB,iBAEvBlK,SA1FN,SAACb,GAAD,OAAmBoK,EAA2BpK,IA2FxCc,SAzFN,SAACd,EAAegL,GACtCtP,QAAQC,IAAIqP,GACZ3B,EAAgB2B,GAChBzV,EAAS2S,GAAe8C,EAAOlD,gBAgFP,SAQI,cAAC/G,GAAA,EAAD,CAAQxD,YAAY,cAAc0N,aAAW,EAAC5W,QAAS0S,QAG9DqC,GACG,cAAC,KAAKnM,KAAN,CACIpH,KAAK,YACL8U,MAAM,YACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,kCAHtC,SAKI,cAAC,KAAD,CAAQvC,QAAS8U,EAAjB,SACK9B,EAAWjS,KAAI,SAAA4T,GAAS,OACrB,cAAC,KAAOtF,OAAR,CACI1D,MAAOgJ,EAAUkC,YADrB,SACmClC,EAAUkC,wBAQjE,cAAC,KAAKjO,KAAN,CACIpH,KAAK,UACL8U,MAAM,UACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,gCAHtC,SAKI,cAAC,KAAD,CAAO2G,YAAa,cAIhC,cAAC,KAAKN,KAAN,6BAAe4L,IAAf,aACI,cAAC,KAAD,CAAQrU,KAAK,UAAUsJ,SAAS,SAASzJ,QAASkV,EAA0BlV,QAA5E,6BA/GL,cAAC,IAAD,CAAUsB,GAAI,MAHd,cAAC,IAAD,CAAUA,GAAI,sBCvHhBwV,GAAmB,WAC5B,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOzM,KAAM,IAAKC,QAAS,cAAC,GAAD,MAC3B,cAAC,IAAD,CAAOD,KAAM,kBAAmBC,QAAS,cAAC,GAAD,MACzC,cAAC,IAAD,CAAOD,KAAM,IAAKC,QAAS,cAAC,GAAD,U,wCCI1ByM,GAAsBjZ,YAAH,28D,IAuEQA,YAAH,soD,4BC7CxBkZ,GAAc,WAAO,IAAD,IACvB/S,EAAWqB,aAAYvB,IACvBI,EAASmB,aAAYpB,IAFE,EAGGiH,mBAAS,IAHZ,mBAGtBC,EAHsB,aAIGD,mBAAS,IAJZ,mBAItBE,EAJsB,KAIZkC,EAJY,KAKvBrM,EAAWC,eALY,EAMSgK,mBAA+C,IANxD,mBAMtB8L,EANsB,KAMTC,EANS,KAOvBC,EAAmBvU,YAA2CmU,GAChE,CACI/Q,UAAW,CACPoR,eAAgB,CACZ3L,KAAMJ,EACNG,KAAMJ,EACNiM,KAAM,GACNC,YAAa,OAGrBzU,QAAS,CAAClE,QAASZ,KAjBE,EAoBuB+I,aAAwCR,GACxF,CAACzD,QAAS,CAAClE,QAASZ,KArBK,mBAoBtBwZ,EApBsB,KAoBJC,EApBI,OAuB6B1Q,aAA8CmN,GACpG,CAACpR,QAAS,CAAClE,QAASZ,KAxBK,mBAuBtB0Z,EAvBsB,KAuBDC,EAvBC,OA0B6B5Q,aAA8CP,GACpG,CAAC1D,QAAS,CAAClE,QAASZ,KA3BK,mBA0BtB4Z,EA1BsB,KA0BDC,EA1BC,OA6BmC9Q,aAAoDN,GAChH,CAAC3D,QAAS,CAAClE,QAASZ,KA9BK,mBA6BtB8Z,EA7BsB,KA6BEC,EA7BF,OAgC2B3M,oBAAS,GAhCpC,mBAgCtB4M,EAhCsB,KAgCAC,EAhCA,OAiCiC7M,oBAAS,GAjC1C,mBAiCtB8M,EAjCsB,KAiCGC,EAjCH,OAkCHpQ,eAAnBqQ,EAlCsB,sBAmCArQ,eAAtBsQ,EAnCsB,oBAqC7BpR,qBAAU,WAAO,IAAD,EAC4B,GAAxC,UAAImQ,EAAiBnU,YAArB,aAAI,EAAuBqV,cACvBnB,EAAc,UAACC,EAAiBnU,YAAlB,aAAC,EAAuBqV,eAE3C,WAAClB,EAAiBnU,YAAlB,aAAC,EAAuBqV,cAE3B,IAAMC,GAAoB,yCAAG,WAAOvO,GAAP,kBAAAxF,EAAA,sEAIFgT,EAAiB,CACpCvR,UAAW,CACPuS,cAAc,gBAAKxO,MANF,QAInB7C,EAJmB,QASZlE,OAASkE,EAASoB,QAC3BpH,EAASoD,GAAM4C,EAASlE,KAAKwV,WAC7BjW,IAAQC,QAAQ,uCAEhB,UAAA0E,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAbjC,2CAAH,sDAiBpBkW,GAAoC,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACpCC,EAAYD,EAAMC,UAAUna,MAAM,KAAKmL,KAAK,KAEhD,OADAgP,EAAYA,EAAUC,OAAO,EAAGD,EAAUtL,OAAS,GAE/C,sBAAK1N,UAAWC,KAAEiZ,YAAlB,UACI,sBAAKlZ,UAAWC,KAAEkZ,gBAAlB,UACI,gCACI,oCAAOJ,EAAMvW,MACb,8BAAMwW,IACN,2CAAcD,EAAMpB,kBAExB,gDAAmBoB,EAAMzY,WAAzB,aAEJ,qBAAKN,UAAWC,KAAEiO,SAAlB,SACK6K,EAAMK,gBAAgBhY,KAAI,SAAAiY,GAAc,aACrC,cAAC,KAAD,CAAUrJ,UAAQ,EAAChQ,UAAWC,KAAE6B,SAAhC,gBACKuX,QADL,IACKA,GADL,UACKA,EAAgB5Y,eADrB,aACK,EAAyBsB,MAAMX,KAAI,SAAAY,GAAI,OACpC,cAAC,KAAD,CAAsBhC,UAAWC,KAAEiC,MAAOC,MAAO,SAAUC,IAAKJ,EAAKK,UAC7DlC,KAAM,IADD6B,EAAKQ,QAFqB6W,EAAe7W,aAY5E8W,GAAuB,yCAAG,WAAOC,GAAP,oBAAA3U,EAAA,sEACLkT,EAAoB,CACvCzR,UAAW,CAAC7D,GAAI+W,KAFQ,QACtBhS,EADsB,QAIdoB,OAQVpB,EAASoB,OAAOvH,KAAI,SAAAgC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,aAPjDA,IAAQC,QAAQ,+BACV2W,EAFY,UAEAlC,EAAYmC,cAFZ,aAEA,EAAoBrY,KAAI,SAAA2X,GAAK,aAAIA,EAAMvW,KAAO+W,EAAb,6BAC5CR,GAD4C,IAE/CpB,YAAW,UAAEpQ,EAASlE,YAAX,aAAE,EAAeqW,YAAY/B,cACxCoB,KACJxB,EAAe,CAACpJ,MAAOmJ,EAAYnJ,MAAOsL,OAAQD,KAV1B,2CAAH,sDAgBvBG,GAAkB,yCAAG,6BAAA/U,EAAA,sDACjB0D,EAAQkQ,EAAgBoB,cAAc,SAC5C5B,EAAoB,CAAC3R,UAAW,CAACwT,iBAAkB,CAACvR,MAAOA,MACtDhB,MAAK,SAAAC,GAAa,IAAD,EACdhG,EAASuD,MACTuT,GAAwB,GACxBzV,IAAQC,QAAR,UAAgB0E,EAASlE,YAAzB,aAAgB,EAAeyW,gBAElCrS,OAAM,SAAArE,GACHoV,EAAgB9P,UAAU,CACtB,CACI7G,KAAM,QACN8G,OAAQ,CAACvF,EAAMR,eAZR,2CAAH,qDAkBlBmX,GAAqB,yCAAG,+BAAAnV,EAAA,sDACpBoV,EAAcvB,EAAmBmB,cAAc,eAC/CK,EAAcxB,EAAmBmB,cAAc,eACrD1B,EAAuB,CACnB7R,UAAW,CACP6T,oBAAqB,CAACF,cAAaC,kBAGtC3S,MAAK,SAAAC,GACFkR,EAAmB/P,UAAU,CAAC,CAAC7G,KAAM,cAAemK,MAAO,MAC3DyM,EAAmB/P,UAAU,CAAC,CAAC7G,KAAM,cAAemK,MAAO,MAC3DuM,GAA2B,GAC3B3V,IAAQC,QAAQ,oCAEnB4E,OAAM,SAAArE,GACHqV,EAAmB/P,UAAU,CACzB,CACI7G,KAAM,cACN8G,OAAQ,CAACvF,EAAMR,eAlBL,2CAAH,qDAwB3B,OAAI4U,EAAiBpU,MACV,cAAC,GAAD,IAENoB,EAGDgT,EAAiBnX,QACV,cAAC,EAAD,IAGP,8BACI,eAAC,KAAD,CAAMG,KAAK,OAAX,UACI,eAAC,KAAK2Z,QAAN,CAAcC,IAAI,UAAkBpa,UAAWC,KAAEoa,QAAjD,UACI,cAAC,KAAD,CAAMpW,MAAM,gBAAgBqW,UAAU,EAAtC,SACI,eAAC,KAAD,CAAMzY,KAAK,qBAAqBwG,SAAUsQ,GACpC3P,cAAe,CACXwN,UAAS,OAAElS,QAAF,IAAEA,OAAF,EAAEA,EAAUc,KAAKoR,UAC1BC,SAAQ,OAAEnS,QAAF,IAAEA,OAAF,EAAEA,EAAUc,KAAKqR,UAHnC,UAKI,cAAC,KAAKxN,KAAN,CACIpH,KAAK,YACL8U,MAAM,YACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,8BACTgU,YAAY,IAPxB,SAWI,cAAC,KAAD,CAAOrN,YAAY,gBAEvB,cAAC,KAAKN,KAAN,CACIpH,KAAK,WACL8U,MAAM,WACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,6BACTgU,YAAY,IAPxB,SAWI,cAAC,KAAD,CAAOrN,YAAY,eAEvB,cAAC,KAAKN,KAAN,UACI,cAAC,KAAD,CAAQzI,KAAK,UAAUsJ,SAAU,SAAUzJ,QAASwX,EAAwBxX,QAA5E,2BAMZ,cAAC,KAAD,CAAM4D,MAAM,WAAWqW,UAAU,EAAjC,SACI,sBAAKta,UAAWC,KAAEsa,mBAAlB,UACI,gCACI,sBAAK3S,MAAO,CAAC4S,aAAc,OAA3B,2BAA2ClW,QAA3C,IAA2CA,OAA3C,EAA2CA,EAAUc,KAAKkD,SAC1D,cAAC,KAAD,CAAQ9H,KAAM,UAAWmC,QAAS,kBAAM0V,GAAwB,IACxD9G,KAAM,cAACK,GAAA,EAAD,IADd,oBAIA,cAAC,KAAD,CAAO3N,MAAM,eAAewW,QAASrC,EAAsBsC,KAAMf,GAC1DgB,SAAU,kBAAMtC,GAAwB,IACxCuC,eAAgB3C,EAA2B5X,QAFlD,SAII,cAAC,KAAD,CAAMwB,KAAK,cAAcuG,KAAMoQ,EACzBxP,cAAe,CACXV,MAAK,OAAEhE,QAAF,IAAEA,OAAF,EAAEA,EAAUc,KAAKkD,OAFhC,SAII,cAAC,KAAKW,KAAN,CACIpH,KAAK,QACL8U,MAAM,QACNzN,MAAO,CACH,CACI1I,KAAM,QACNoC,QAAS,kCAEb,CACIuG,UAAU,EACVvG,QAAS,0BACTgU,YAAY,IAXxB,SAeI,cAAC,KAAD,CAAOrN,YAAY,QAAQ/I,KAAM,mBAKjD,gCACI,cAAC,KAAD,CAAQA,KAAM,UAAWmC,QAAS,kBAAM4V,GAA2B,IAC3DhH,KAAM,cAACK,GAAA,EAAD,IADd,6BAIA,cAAC,KAAD,CAAO3N,MAAM,kBAAkBwW,QAASnC,EACjCoC,KAAMX,GACNY,SAAU,kBAAMpC,GAA2B,IAC3CqC,eAAgBzC,EAA8B9X,QAHrD,SAKI,eAAC,KAAD,CAAMwB,KAAK,iBAAiBuG,KAAMqQ,EAAlC,UACI,cAAC,KAAKxP,KAAN,CACIpH,KAAK,cACL8U,MAAM,eACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,iCACTgU,YAAY,GAEhB,CACIiE,IAAK,EACLjY,QAAS,mDAXrB,SAeI,cAAC,KAAD,CAAO2G,YAAY,eAAe/I,KAAM,eAE5C,cAAC,KAAKyI,KAAN,CACIpH,KAAK,cACL8U,MAAM,eACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,iCACTgU,YAAY,GAEhB,CACIiE,IAAK,EACLjY,QAAS,mDAXrB,SAeI,cAAC,KAAD,CAAO2G,YAAY,eAAe/I,KAAM,8BAvHpC,KA+HhC,eAAC,KAAK2Z,QAAN,CAAcC,IAAI,SAAlB,UACI,cAAC,KAAD,CAAUU,mBAAoB,QAAS9a,UAAWC,KAAEwZ,OAApD,gBACKnC,QADL,IACKA,GADL,UACKA,EAAamC,cADlB,aACK,EAAqBrY,KAAI,SAAA2X,GAAK,OAC3B,eAAC,KAASgC,MAAV,CAAgB/P,OAAQ,cAAC8N,GAAD,CAAaC,MAAOA,IAA5C,UACI,uBAAO/Y,UAAU,YAAjB,SACI,kCACA,+BACI,wCACA,6BACI,sCAAO+Y,QAAP,IAAOA,OAAP,EAAOA,EAAOzQ,aAGtB,+BACI,4CACA,6BACI,sCAAOyQ,QAAP,IAAOA,OAAP,EAAOA,EAAOvC,iBAGtB,+BACI,2CACA,6BACI,sCAAOuC,QAAP,IAAOA,OAAP,EAAOA,EAAOtC,gBAGtB,+BACI,+CACA,6BACI,sCAAOsC,QAAP,IAAOA,OAAP,EAAOA,EAAO5N,mBAGtB,+BACI,0CACA,6BACI,sCAAO4N,QAAP,IAAOA,OAAP,EAAOA,EAAOtD,eAGtB,+BACI,kDACA,6BACI,sCAAOsD,QAAP,IAAOA,OAAP,EAAOA,EAAO9D,sBAGtB,+BACI,+CACA,6BACI,sCAAO8D,QAAP,IAAOA,OAAP,EAAOA,EAAOpB,wBAK1B,qBAAK3X,UAAWC,KAAE+a,YAAlB,SACKjC,EAAMK,gBAAgBhY,KAAI,SAAAiY,GAAc,aACrC,sBAAKrZ,UAAWC,KAAEgb,WAAlB,UACI,cAAC,KAAD,CAAUjL,UAAQ,EAAChQ,UAAWC,KAAEib,YAAhC,gBACK7B,QADL,IACKA,GADL,UACKA,EAAgB5Y,eADrB,aACK,EAAyBsB,MAAMX,KAAI,SAAAY,GAAI,OACpC,cAAC,KAAD,CAAsBhC,UAAWC,KAAEiC,MAAOC,MAAO,SACzCC,IAAKJ,EAAKK,UACVlC,KAAM,IAFD6B,EAAKQ,QAFwB6W,EAAe7W,IAOjE,gCACI,8BACI,cAAC,KAAD,CAAMb,GAAE,sBAAiB0X,EAAe5Y,QAAQmB,MAAhD,SACKyX,EAAe5Y,QAAQoB,SAGhC,gCAAMwX,EAAe5Y,QAAQM,SAA7B,UACA,gCAAMsY,EAAerY,gBAArB,uBAKf+X,EAAMpB,cAAgB1a,EAAYke,KAC/B,cAAC,KAAD,CACIlX,MAAM,qCACN4N,UAAW,kBAAMyH,GAAwBP,EAAMvW,KAC/CsP,OAAO,MACPC,WAAW,KAJf,SAMI,cAAC,KAAD,CAAQ/R,UAAWC,KAAEmb,kBAAmB5a,KAAM,UACtCH,QAAS0X,EAA2B1X,QAD5C,wBA5E+C0Y,EAAMvW,SAuFzE,cAAC,KAAD,CAAY2L,MAAOmJ,EAAYnJ,MACnBkB,SAAQ,yCAAE,WAAOgM,GAAP,gBAAAzW,EAAA,6DAENgJ,EADMlC,GAAY2P,EAAa,GAAK5P,GAD9B,SAGA+L,EAAiBxI,QAAQ,CAC3ByI,eAAgB,CACZ3L,KAAMJ,EACNG,KAAMJ,EACNiM,KAAM,GACNC,YAAa,QARf,2CAAF,0DA3FO,UAvIhC,cAAC,IAAD,CAAUhW,GAAI,iB,qBClLhB2Z,GAAqB,WAAO,IAAD,EAE9BC,EADSpV,cACavE,MAAQ,GAC9B4Z,EAAmBvY,YACrBqI,GACA,CACIjF,UAAW,CAACzE,KAAM2Z,GAClBrY,QAAS,CAAClE,QAASZ,KAI3B,IAAKmd,GAAgBC,EAAiBpY,MAClC,OAAO,cAAC,GAAD,IAEX,GAAIoY,EAAiBnb,QACjB,OAAO,cAAC,EAAD,IAEX,IAAMqM,EAAQ,UAAG8O,EAAiBnY,YAApB,aAAG,EAAuBoY,YACxC,OACI,qCACI,wCAAS/O,QAAT,IAASA,OAAT,EAASA,EAAU7K,OACnB,qBAAK7B,UAAWC,KAAEiO,SAAlB,gBACKxB,QADL,IACKA,OADL,EACKA,EAAUwB,SAAS9M,KAAI,SAAAX,GAAO,OAC3B,cAAC,GAAD,CAAaA,QAASA,SAG9B,qBAAKT,UAAWC,KAAEkQ,MAAlB,SACI,cAAC,KAAD,CAAMlM,MAAM,cAAcjE,UAAWC,KAAEmQ,KAAvC,SAA8C1D,GAAY/O,aAAK,OAAC+O,QAAD,IAACA,OAAD,EAACA,EAAU2D,qBClC7EqL,GAAuB,WAChC,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOhR,KAAM,SAAUC,QAAS,cAAC,GAAD,MAChC,cAAC,IAAD,CAAOD,KAAM,IAAKC,QAAS,cAAC,GAAD,UCQ1BgR,GAAmB,WAC5B,OACI,sBAAK3b,UAAWC,IAAE2b,gBAAlB,UACI,qBAAK5b,UAAWC,IAAE2F,aAAlB,SACI,qBAAK5F,UAAWC,IAAE4b,UAAlB,SACI,cAAC,GAAD,QAGR,qBAAK7b,UAAWC,IAAE4b,UAAlB,SACI,cAAC,GAAD,MAEJ,qBAAK7b,UAAWC,IAAEiM,YAAlB,SACI,qBAAKlM,UAAWC,IAAE4b,UAAlB,SACI,cAAC,GAAD,QAGR,qBAAK7b,UAAW,CAACC,IAAE4b,UAAW5b,IAAE6b,SAAS9R,KAAK,KAA9C,SAII,eAAC,IAAD,WACI,cAAC,IAAD,CAAOU,KAAM,IAAKC,QAAS,cAAC,GAAD,MAC3B,cAAC,IAAD,CAAOD,KAAM,cAAeC,QAAS,cAAC,GAAD,MACrC,cAAC,IAAD,CAAOD,KAAM,gBAAiBC,QAAS,cAAC,GAAD,MACvC,cAAC,IAAD,CAAOD,KAAM,YAAaC,QAAS,cAAC,GAAD,MACnC,cAAC,IAAD,CAAOD,KAAM,6BAA8BC,QAAS,cAAC,GAAD,MACpD,cAAC,IAAD,CAAOD,KAAM,eAAgBC,QAAS,cAAC,GAAD,MACtC,cAAC,IAAD,CAAOD,KAAM,UAAWC,QAAS,cAAC,GAAD,MACjC,cAAC,IAAD,CAAOD,KAAM,WAAYC,QAAS,cAAC,GAAD,MAClC,cAAC,IAAD,CAAOD,KAAM,MAAOC,QAAS,uCAC7B,cAAC,IAAD,CAAOD,KAAM,IAAKC,QAAS,cAAC,GAAD,eCxClCoR,GAAW5d,YAAH,qW,wHCad6d,GAASC,KAATD,MAIMzQ,IAHK2Q,KAAXC,QAGmB,WAAO,IAAD,EACM3Q,oBAAS,GADf,mBACrB4Q,EADqB,KACVC,EADU,KAEtB/X,EAAWqB,aAAYvB,IACvB7C,EAAWC,eAEjB,OACI,eAACwa,GAAD,CAAOM,aAAW,EAACF,UAAWA,EAAWG,WAAYF,EAAcrc,UAAWC,KAAEiM,YAAhF,UACI,qBAAKlM,UAAWC,KAAEgL,OAClB,sBAAKjL,UAAWC,KAAEuc,SAAlB,UACI,sBAAKxc,UAAWC,KAAEwc,kBAAlB,UACI,sBAAMzc,UAAWC,KAAE4B,KAAnB,gBAA0ByC,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAUc,KAAKoR,YACzC,sBAAMxW,UAAWC,KAAE4B,KAAnB,gBAA0ByC,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAUc,KAAKqR,cAE7C,qBAAKzW,UAAWC,KAAEoF,MAAlB,gBACKf,QADL,IACKA,OADL,EACKA,EAAUc,KAAKC,MAAMjE,KAAI,SAAAkE,GAAI,OAC1B,cAAC,KAAD,CAAmB4K,MAAO5K,EAAK4K,MAA/B,SAAuC5K,EAAKzD,MAAlCyD,EAAK9C,YAI3B,eAAC,KAAD,CAAMka,MAAM,OAAuCC,KAAK,SAAxD,UACI,cAAC,KAAK1T,KAAN,CAAoBsI,KAAM,cAACqL,GAAA,EAAD,IAA1B,SACI,cAAC,KAAD,CAAMjb,GAAI,SAAV,mBADW,MAGf,cAAC,KAAKsH,KAAN,CAAoBsI,KAAM,cAACzO,GAAA,EAAD,IAA1B,SACI,cAAC,KAAD,CAAMnB,GAAI,gBAAV,qBADW,MAGf,cAAC,KAAKsH,KAAN,CAAoBsI,KAAM,cAACsL,GAAA,EAAD,IAA1B,SACI,cAAC,KAAD,CAAMlb,GAAI,kBAAV,uBADW,MAKf,cAAC,KAAKsH,KAAN,CAAoBsI,KAAM,cAACuL,GAAA,EAAD,IAA1B,SACI,cAAC,KAAD,CAAMnb,GAAI,oBAAV,yBADW,MAKf,cAAC,KAAKsH,KAAN,CAAoBsI,KAAM,cAACwL,GAAA,EAAD,IAA1B,SACI,cAAC,KAAD,CAAMpb,GAAI,eAAV,oBADW,MAGf,cAAC,KAAKsH,KAAN,CAAoBsI,KAAM,cAACyL,GAAA,EAAD,IAA1B,SACI,cAAC,KAAD,CAAMrb,GAAI,eAAV,oBADW,MAKf,cAAC,KAAKsH,KAAN,CAAqBsI,KAAM,cAAC0L,GAAA,EAAD,IAA3B,SACI,cAAC,KAAD,CAAMtb,GAAI,eAAV,oBADW,OAKf,cAAC,KAAKsH,KAAN,CAAqBsI,KAAM,cAAC2L,GAAA,EAAD,IAA3B,SACI,cAAC,KAAD,CAAMvb,GAAI,kBAAV,uBADW,OAKf,cAAC,KAAKsH,KAAN,CAAqBsI,KAAM,cAACjI,GAAA,EAAD,IAA3B,SACI,cAAC,KAAD,CAAM3H,GAAI,IAAV,4BADW,OAGf,cAAC,KAAKsH,KAAN,CAAqBsI,KAAM,cAAC4L,GAAA,EAAD,IAAmBxa,QAAS,kBAAMpB,EAASuD,OAAtE,mBAAe,OAGf,qBAAK8C,MAAO,CAACE,OAAQ,kB,UChFxBsV,GAAmB,WAC5B,IACIC,EADaC,cACMC,SAAS1e,MAAM,KAGtC,OAFAwe,EAAUA,EAAQhc,OAAOmc,SAGrB,eAAC,KAAD,WACI,cAAC,KAAWvU,KAAZ,eAAsB,MACrBoU,EAAQjc,KAAI,SAACvE,EAAQ4S,GAAT,OAAe,cAAC,KAAWxG,KAAZ,UAA0BpM,GAAJ4S,U,uECDjDgO,GAAmC,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,iBAAkBrd,EAAa,EAAbA,QAChE,OACI,qBAAKL,UAAWC,KAAE0d,aAAlB,SACKtd,EACK,cAAC,EAAD,IACA,eAACud,GAAA,EAAD,CAAW/V,MAAO,IAAKC,OAAQ,IAAKzE,KAAMqa,EAAkBG,OAAO,wBAAnE,UACE,cAACC,GAAA,EAAD,CAAMtd,KAAK,WAAWud,QAAQ,cAAcC,OAAO,YACnD,cAACC,GAAA,EAAD,IACA,cAACC,GAAA,EAAD,CAAOH,QAAQ,SACf,cAACI,GAAA,EAAD,UCHPC,GAAmBjgB,YAAH,u8DAuEhBkgB,GAAkBlgB,YAAH,0nDC9EfmgB,GAAuBngB,YAAH,yO,qBCCpBogB,GAAmC,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,iBAAkBne,EAAa,EAAbA,QAChE,OACI,qBAAKL,UAAWC,KAAE0d,aAAlB,SACKtd,EACK,cAAC,EAAD,IACA,eAACud,GAAA,EAAD,CAAW/V,MAAO,IAAKC,OAAQ,IAAKzE,KAAMmb,EAAkBX,OAAO,wBAAnE,UACE,cAACC,GAAA,EAAD,CAAMtd,KAAK,WAAWud,QAAQ,aAAaC,OAAO,YAClD,cAACC,GAAA,EAAD,IACA,cAACC,GAAA,EAAD,CAAOH,QAAQ,SACf,cAACI,GAAA,EAAD,UCNPpb,GAAW,WAAO,IAAD,UACMyI,mBAAS,IADf,mBACnBC,EADmB,aAEMD,mBAAS,IAFf,mBAEnBE,EAFmB,KAETkC,EAFS,KAGpB6Q,EAAiBxb,YACnBmb,GACA,CACI/X,UAAW,CACPoR,eAAgB,CACZ3L,KAAMJ,EACNG,KAAMJ,EACNiM,KAAM,GACNC,YAAa1a,EAAYke,MAGjCjY,QAAS,CAAClE,QAASZ,KAIrBsgB,EAAqBzb,YAA+Cqb,GACtE,CAACpb,QAAS,CAAClE,QAASZ,KAGlBqS,EAA8B,CAChC,CACIxM,MAAO,KACPyM,UAAW,KACXlB,IAAK,KACL2C,OAAQ,SAAC5L,EAAWwS,GAAZ,OAA6B,yCAAIA,EAAMvW,QAEnD,CACIyB,MAAO,QACPyM,UAAW,QACXlB,IAAK,SAET,CACIvL,MAAO,YACPyM,UAAW,YACXlB,IAAK,aAET,CACIvL,MAAO,WACPyM,UAAW,WACXlB,IAAK,YAET,CACIvL,MAAO,eACPyM,UAAW,cACXlB,IAAK,eAET,CACIvL,MAAO,eACPyM,UAAW,cACXlB,IAAK,cACL2C,OAAQ,SAAC5L,EAAWwS,GAAZ,OAA6B,+BAAO/L,GAAuB+L,EAAMpB,iBAE7E,CACI1T,MAAO,cACPyM,UAAW,aACXlB,IAAK,aACL2C,OAAQ,SAAC5L,EAAWwS,GAAZ,OAA6B,iCAAOA,EAAMzY,WAAb,YAEzC,CACI2D,MAAO,aACPyM,UAAW,YACXlB,IAAK,YACL2C,OAAQ,SAAC5L,EAAWwS,GAAZ,OAA6B,+BAAOvL,GAAkBuL,EAAMC,eAExE,CACI/U,MAAO,UACPyM,UAAW,UACXlB,IAAK,UACL2C,OAAQ,SAAC5L,EAAWwS,GAAZ,OACJ,cAAC,GAAD,CAAYhI,QAAO,mBAAcgI,EAAMvW,IAAMwO,UAAS,0BAAqB+H,EAAMvW,SAK7F,OACI,qCACI,sBAAKxC,UAAWC,KAAE0e,cAAlB,UACI,sBAAK3e,UAAWC,KAAE2e,aAAlB,UACI,uDACA,cAAC,GAAD,CAAuBlB,iBAAgB,UAAEgB,EAAmBrb,YAArB,aAAE,EAAyBwb,oBAC3Cxe,QAASqe,EAAmBre,aAEvD,sBAAKL,UAAWC,KAAE2e,aAAlB,UACI,uDACA,cAAC,GAAD,CAAuBJ,iBAAgB,UAAEE,EAAmBrb,YAArB,aAAE,EAAyByb,oBAC3Cze,QAASqe,EAAmBre,gBAG3D,gDACA,cAAC,KAAD,CACIA,QAASoe,EAAepe,QACxBoQ,QAASA,EACTF,WAAU,UAAEkO,EAAepb,YAAjB,aAAE,EAAqB0b,UAAUtF,OAC3C9I,WAAY,CACRxC,MAAK,UAAEsQ,EAAepb,YAAjB,aAAE,EAAqB0b,UAAU5Q,MACtCkB,SAAS,WAAD,8BAAE,WAAOgM,GAAP,gBAAAzW,EAAA,6DAENgJ,EADMlC,GAAY2P,EAAa,GAAK5P,GAD9B,SAGAgT,EAAezP,QAAQ,CACzByI,eAAgB,CACZ3L,KAAMJ,EACNG,KAAMJ,EACNiM,KAAM,GACNC,YAAa1a,EAAYke,OAR3B,2CAAF,mDAAC,IAabxI,OAAQ,WChHXqM,GAAkB7gB,YAAH,uaAwBf8gB,GAAiB9gB,YAAH,mkE,+BClBd+gB,GAAuB/gB,YAAH,sXAqBpBghB,GAAuBhhB,YAAH,sHCzBpBihB,GAAiB,WAAO,IAAD,IAC1B9a,EAAWqB,aAAYvB,IADG,EAEAoH,mBAAS,IAFT,mBAEzBC,EAFyB,aAGAD,mBAAS,IAHT,mBAGzBE,EAHyB,KAGfkC,EAHe,OAIIpC,mBAAS,IAJb,mBAIzB6T,EAJyB,KAIbC,EAJa,KAK1BC,EAAetc,YACjB+b,GACA,CACI3Y,UAAW,CACPmZ,cAAe,CACX1T,KAAMJ,EACNG,KAAMJ,EACNiM,KAAM2H,IAGdnc,QAAS,CAAClE,QAASZ,KAfK,EAkBQ+I,aAA4CgY,GAChF,CAACjc,QAAS,CAAClE,QAASZ,KAnBQ,mBAkBzBqhB,EAlByB,KAkBbC,EAlBa,KAuB1BtO,EAAQ,yCAAG,WAAO9I,GAAP,kBAAA1D,EAAA,sEACU6a,EAAW,CAACpZ,UAAW,CAACiC,MAAOA,KADzC,YACPf,EADO,QAEAlE,KAFA,gCAGHkc,EAAavQ,QAAQ,CACvBwQ,cAAe,CACX1T,KAAMJ,EACNG,KAAMJ,EACNiM,KAAM2H,KAPL,6BAWT,UAAA9X,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAX7C,2CAAH,sDAeR6N,EAAU,CACZ,CACIxM,MAAO,KACPyM,UAAW,KACXlB,IAAK,KACL2C,OAAQ,SAAC5L,EAAWnB,GAAZ,OAA2B,yCAAIA,EAAK5C,QAEhD,CACIyB,MAAO,QACPyM,UAAW,QACXlB,IAAK,SAET,CACIvL,MAAO,YACPyM,UAAW,YACXlB,IAAK,aAET,CACIvL,MAAO,WACPyM,UAAW,WACXlB,IAAK,YAET,CACIvL,MAAO,QACPyM,UAAW,QACXlB,IAAK,QACL2C,OAAQ,SAAC5L,EAAWnB,GAAZ,OACJ,qBAAKpF,UAAWC,KAAEoF,MAAlB,SACKD,EAAKC,MAAMjE,KAAI,SAAAkE,GAAI,OAChB,cAAC,KAAD,CAAmB4K,MAAO5K,EAAK4K,MAA/B,SAAuC5K,EAAKzD,MAAlCyD,EAAK9C,WAK/B,CACIyB,MAAO,UACPyM,UAAW,UACXlB,IAAK,UACL2C,OAAQ,SAAC5L,EAAWnB,GAChB,OAAId,G3CrFG,SAACc,GACpB,OAAOA,EAAKC,MAAMlE,MAAK,SAAAmE,GAAI,OAAIA,EAAKzD,OAAS9E,EAASyI,S2CoF1Bma,CAAO,OAACrb,QAAD,IAACA,OAAD,EAACA,EAAUc,OAASA,EAAK5C,MAAL,OAAY8B,QAAZ,IAAYA,OAAZ,EAAYA,EAAUc,KAAK5C,IAC3D,cAAC,GAAD,CAAYuO,QAAO,UAAK3L,EAAKkD,OAAS0I,UAAS,iBAAY5L,EAAKkD,OACpD8I,SAAU,kBAAMA,EAAShM,EAAKkD,UAE1C,cAAC,GAAD,CAAYyI,QAAO,UAAK3L,EAAKkD,YAO9CsX,EAAoB,yCAAG,WAAOpR,GAAP,gBAAA5J,EAAA,6DACL,EACdib,EAAgBrR,EAAEkD,OAAO1F,MAC/B4B,EAFoB,GAGpB0R,EAAcO,GAJW,SAKnBN,EAAavQ,QAAQ,CACvBwQ,cAAe,CACX1T,KANY,EAOZD,KAAMJ,EACNiM,KAAMmI,KATW,2CAAH,sDAcpBC,EAA8BzJ,sBAAYC,MAAS,SAAAC,GAAS,OAAIqJ,EAAqBrJ,KAAY,KAAM,IAO7G,OAJIgJ,EAAanc,OACbR,IAAQQ,MAAMmc,EAAanc,OAI3B,qCACI,sBAAKpD,UAAU,gBAAf,UACI,qBAAKA,UAAU,gBAAf,SACI,6CAEJ,cAAC+M,GAAA,EAAD,CAAQxD,YAAY,eAAevJ,UAAW,SACtCqP,SAbO,SAACb,GAAD,OAAsCsR,EAA4BtR,IAa3CyI,aAAW,EACzC5W,QAASkf,EAAalf,aAElC,cAAC,KAAD,IACA,cAAC,KAAD,CACIA,QAASkf,EAAalf,SAAWqf,EAAkBrf,QACnDoQ,QAASA,EACTF,WAAU,UAAEgP,EAAalc,YAAf,aAAE,EAAmB0c,SAASC,MACxCrP,WAAY,CACRxC,MAAK,UAAEoR,EAAalc,YAAf,aAAE,EAAmB0c,SAAS5R,MACnCkB,SAAS,WAAD,8BAAE,WAAOgM,GAAP,gBAAAzW,EAAA,6DAENgJ,EADMlC,GAAY2P,EAAa,GAAK5P,GAD9B,SAGA8T,EAAavQ,QAAQ,CACvBwQ,cAAe,CACX1T,KAAMJ,EACNG,KAAMJ,EACNiM,KAAM2H,KAPR,2CAAF,mDAAC,IAYb1M,OAAO,W,qBC3IVsN,GAAgB,WAAO,IAAD,IAEzBC,EADS/Z,cACUmC,OAAS,GAC5BiX,EAAetc,YACjBgc,GACA,CACI5Y,UAAW,CAACiC,MAAO4X,GACnBhd,QAAS,CAAClE,QAASZ,KAIrBqS,EAA8B,CAChC,CACIxM,MAAO,KACPyM,UAAW,KACXlB,IAAK,KACL2C,OAAQ,SAAC5L,EAAWwS,GAAZ,OAA6B,yCAAIA,EAAMvW,QAEnD,CACIyB,MAAO,QACPyM,UAAW,QACXlB,IAAK,SAET,CACIvL,MAAO,YACPyM,UAAW,YACXlB,IAAK,aAET,CACIvL,MAAO,WACPyM,UAAW,WACXlB,IAAK,YAET,CACIvL,MAAO,eACPyM,UAAW,cACXlB,IAAK,eAET,CACIvL,MAAO,eACPyM,UAAW,cACXlB,IAAK,cACL2C,OAAQ,SAAC5L,EAAWwS,GAAZ,OAA6B,+BAAO/L,GAAuB+L,EAAMpB,iBAE7E,CACI1T,MAAO,cACPyM,UAAW,aACXlB,IAAK,aACL2C,OAAQ,SAAC5L,EAAWwS,GAAZ,OAA6B,iCAAOA,EAAMzY,WAAb,YAEzC,CACI2D,MAAO,aACPyM,UAAW,YACXlB,IAAK,YACL2C,OAAQ,SAAC5L,EAAWwS,GAAZ,OAA6B,+BAAOvL,GAAkBuL,EAAMC,eAExE,CACI/U,MAAO,UACPyM,UAAW,UACXlB,IAAK,UACL2C,OAAQ,SAAC5L,EAAWwS,GAAZ,OACJ,cAAC,GAAD,CAAYhI,QAAO,uBAAkBgI,EAAMvW,IAAMwO,UAAS,8BAAyB+H,EAAMvW,SAKrG,IAAK0d,GAAaX,EAAanc,MAC3B,OAAO,cAAC,GAAD,IAEX,GAAImc,EAAalf,QACb,OAAO,cAAC,EAAD,IAEX,IAAM+E,EAAI,UAAGma,EAAalc,YAAhB,aAAG,EAAmB8c,QAChC,OACI,mCACI,sBAAKngB,UAAWC,KAAE8P,kBAAlB,UACI,wCAAS3K,QAAT,IAASA,OAAT,EAASA,EAAMkD,QACf,uBAAOtI,UAAU,YAAjB,SACI,kCACA,+BACI,qCACA,6BACI,6CAASoF,QAAT,IAASA,OAAT,EAASA,EAAM5C,WAGvB,+BACI,4CACA,6BACI,sCAAO4C,QAAP,IAAOA,OAAP,EAAOA,EAAMoR,iBAGrB,+BACI,2CACA,6BACI,sCAAOpR,QAAP,IAAOA,OAAP,EAAOA,EAAMqR,gBAGnBrR,IAAY,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMC,MAAMqI,QAAS,GAC3B,+BACI,wCACA,oBAAI1N,UAAWC,KAAEoF,MAAjB,SACKD,EAAKC,MAAMjE,KAAI,SAAAkE,GAAI,OAChB,cAAC,KAAD,CAAmB4K,MAAO5K,EAAK4K,MAA/B,SAAuC5K,EAAKzD,MAAlCyD,EAAK9C,iBAOnC,cAAC,KAAD,CACIyB,MAAO,kBAAM,qBAAKjE,UAAWC,KAAEmgB,YAAlB,qBACb3P,QAASA,EACTF,WAAU,UAAEgP,EAAalc,YAAf,aAAE,EAAmB8c,QAAQ1G,OAgBvC9I,YAAY,EACZgC,OAAQ,a,UC/If0N,GAAe,CACxB7L,SAAU,CAACE,KAAM,GACjBE,WAAY,CAACF,KAAM,KCKV4L,GAAkBniB,YAAH,iJCMfoiB,GAAkB,WAAO,IAAD,YAE3BL,EADS/Z,cACUmC,OAAS,GAC5BiX,EAAetc,YAAmCgc,GACpD,CACI5Y,UAAW,CAACiC,MAAO4X,GACnBhd,QAAS,CAAClE,QAASZ,KAGrBoiB,EAAgBvd,YAAqCqd,GACvD,CACIpd,QAAS,CAAClE,QAASZ,KAXM,EAcuB+I,aAA4C+X,GAChG,CAAChc,QAAS,CAAClE,QAASZ,KAfS,mBAc1BqiB,EAd0B,KAcNC,EAdM,KAiB3B1Z,EAAWC,cAjBgB,EAmBGuE,mBAAmB,IAnBtB,mBAmB1BmV,EAnB0B,KAmBdC,EAnBc,OAoBOpV,mBAAS,IApBhB,mBAoB1BqV,EApB0B,KAoBZC,EApBY,KAwCjCzZ,qBAAU,WAAO,IAAD,GACZ,UAAIkY,EAAalc,YAAjB,aAAI,EAAmB8c,UACnBS,EAAcrB,EAAalc,KAAK8c,QAAQ9a,MAAMjE,KAAI,SAAAkE,GAAI,OAAIA,EAAK9C,GAAGue,iBAEvE,WAACxB,EAAalc,YAAd,aAAC,EAAmB8c,UAEvB,IAAM9X,EAAQ,yCAAG,WAAO+B,GAAP,wBAAAxF,EAAA,6DAMPoc,EAAWC,SAAS7W,EAAO5H,IAG7B0e,EADAV,EAAcnd,KACN,UAAGmd,EAAcnd,YAAjB,aAAG,EAAoB8d,SAC1B9f,QAAO,SAAAiE,GAAI,OAAIqb,EAAWxf,MAAK,SAAAqO,GAAG,OAAIA,IAAQlK,EAAK9C,GAAGue,iBACtD3f,KAAI,SAAAkE,GACwBA,EAAlB4K,MACP,OAFS,aACgB5K,EADhB,cAKN,GAEfoC,QAAQC,MAlBK,SAmBU8Y,EAAmB,CACtCpa,UAAW,CACP+a,gBAAgB,6BACThX,GADQ,IAEX5H,GAAIwe,EACJ3b,MAAO6b,OAxBN,QAmBP3Z,EAnBO,QA4BAlE,OAASkE,EAASoB,OAC3B3B,EAAS,MAET,UAAAO,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YA/B7C,2CAAH,sDAmCd,OAAKsd,GAAaX,EAAanc,MACpB,cAAC,GAAD,IAEPmc,EAAalf,QACN,cAAC,EAAD,IAGP,eAAC,KAAD,2BAAMwB,KAAK,aACLwG,SAAUA,EACVW,cAAe,CACXxG,GAAE,UAAE+c,EAAalc,YAAf,aAAE,EAAmB8c,QAAQ3d,GAC/B8F,MAAK,UAAEiX,EAAalc,YAAf,aAAE,EAAmB8c,QAAQ7X,MAClCkO,UAAS,UAAE+I,EAAalc,YAAf,aAAE,EAAmB8c,QAAQ3J,UACtCC,SAAQ,UAAE8I,EAAalc,YAAf,aAAE,EAAmB8c,QAAQ1J,WAErC4J,IARV,cAUI,cAAC,KAAKpX,KAAN,CAAWpH,KAAK,KAAK+F,MAAO,CAACyZ,QAAS,QAAtC,SACI,cAAC,KAAD,CAAO7gB,KAAM,aAEjB,cAAC,KAAKyI,KAAN,CACIpH,KAAK,QACL8U,MAAM,SACNzN,MAAO,CACH,CACI1I,KAAM,QACNoC,QAAS,kCAEb,CACIuG,UAAU,EACVvG,QAAS,4BACTgU,YAAY,IAXxB,SAeI,cAAC,KAAD,CAAOrN,YAAa,SAAU/I,KAAM,YAExC,cAAC,KAAKyI,KAAN,CACIpH,KAAK,YACL8U,MAAM,YACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,+BACTgU,YAAY,IAPxB,SAWI,cAAC,KAAD,CAAOrN,YAAa,gBAExB,cAAC,KAAKN,KAAN,CACIpH,KAAK,WACL8U,MAAM,WACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,8BACTgU,YAAY,IAPxB,SAWI,cAAC,KAAD,CAAOrN,YAAa,eAExB,cAAC,KAAKN,KAAN,CAAW0N,MAAO,QAAlB,SACI,cAAC,KAAD,CACIpG,WAAU,UAAEiQ,EAAcnd,YAAhB,aAAE,EAAoB8d,SAChCG,OAAQ,CAAC,aAAD,cACRX,WAAYA,EACZE,aAAcA,EACdxR,SAhIC,SAACkS,EAA0BC,EAAgBC,GACxD,GAAIjB,EAAcnd,KAAM,CAAC,IAAD,EACpBqE,QAAQC,IAAI,iBAAkB4Z,GAC9B,IAAMG,EAAc,UAAGlB,EAAcnd,KAAK8d,SAASQ,MAAK,SAAArc,GAAI,OAAIA,EAAKzD,OAAS9E,EAAS6kB,mBAAnE,aAAG,EAA2Epf,GAAGue,WACjGQ,EAAepgB,MAAK,SAAAqO,GAAG,OAAIA,IAAQkS,KACnCd,EAAcW,GAEdX,EAAc,GAAD,oBAAKW,GAAL,CAAqBG,OA0H9BG,eApHO,SAACC,EAAyBC,GAE7CjB,EAAgB,GAAD,oBAAKgB,GAAL,aAA4BC,MAmH/B5P,OAAQ,SAAA7M,GAAI,OAAIA,EAAKzD,MACrB8Q,OAAQ,SAAArN,GAAI,OAAIA,EAAK9C,GAAGue,gBAGhC,cAAC,KAAK9X,KAAN,UACI,cAAC,KAAD,CAAQzI,KAAK,UAAUsJ,SAAU,SACzBzJ,QAASkf,EAAalf,SAAWqgB,EAA0BrgB,QADnE,2BCnKH2hB,GAAsB,WAC/B,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOtX,KAAM,IAAKC,QAAS,cAAC,GAAD,MAC3B,cAAC,IAAD,CAAOD,KAAM,SAAUC,QAAS,cAAC,GAAD,MAChC,cAAC,IAAD,CAAOD,KAAM,gBAAiBC,QAAS,cAAC,GAAD,MACvC,cAAC,IAAD,CAAOD,KAAM,IAAKC,QAAS,cAAC,GAAD,U,yCCM1BsX,GAA0B9jB,YAAH,kzBA4CvB+jB,GAA0B/jB,YAAH,kzBAuCvBgkB,GAA0BhkB,YAAH,sHCvFvBikB,GAAkBjkB,YAAH,8ZAsBfkkB,GAAiBlkB,YAAH,wRAmBdmkB,GAAyBnkB,YAAH,2TC5CtBokB,GAAuC,SAAC,GAAgC,IAA/BliB,EAA8B,EAA9BA,QAAS0B,EAAqB,EAArBA,MAAOygB,EAAc,EAAdA,SAO5D/R,EAAU,CACZ,CACIxM,MAAO,QACPuL,IAAK,QACL2C,OAAQ,SAAC5L,EAAWvE,GAChB,OACI,cAAC,KAAD,CAAQG,MAAO,SAAUhC,KAAM,GAAIiC,IAAKJ,EAAKK,UAAWC,IAAKN,EAAKO,aAK9E,CACI0B,MAAO,gBACPyM,UAAW,eACXlB,IAAK,gBAET,CACIvL,MAAO,YACPyM,UAAW,WACXlB,IAAK,YAET,CACIvL,MAAO,OACPyM,UAAW,OACXlB,IAAK,QAET,CACIvL,MAAO,UACPyM,UAAW,UACXlB,IAAK,UACL2C,OAAQ,SAAC5L,EAAWvE,GAAZ,OACJ,cAAC,GAAD,CAAYoP,SAAU,kBApCP,SAACqR,GACxB,IAAMC,EAAW3gB,EAAMV,QAAO,SAAAW,GAAI,OAAIA,IAASygB,KAC/CD,EAASE,GAkC2BC,CAAmB3gB,SAK3D,OACI,cAAC,KAAD,CAAOyO,QAASA,EAASF,WAAYxO,EAAO4O,YAAY,EAAOtQ,QAASA,EAASsS,OAAQ,Q,oBChDpFiQ,GAA2B,SAAC,GAAqB,IAApBrc,EAAmB,EAAnBA,KAAMsc,EAAa,EAAbA,QAC5C,OACI,cAAC,KAAD,CACIC,KAAM,CACFhb,OAAQ,QAEZkE,MAAOzF,EACPwc,eAAgBF,EAChBG,OAAQ,sDCHP3X,GAAuBlN,YAAH,2hCA0CpBmN,GAAqBnN,YAAH,qzBAuClB8kB,GAA6B9kB,YAAH,+zBClF1B+kB,GAAoC,SAAC,GAA0C,IAAzC7iB,EAAwC,EAAxCA,QAASoM,EAA+B,EAA/BA,WAAY0W,EAAmB,EAAnBA,cAO9D1S,EAAU,CACZ,CACIxM,MAAO,KACPyM,UAAW,KACXyB,OAAQ,SAAC5L,EAAWmG,GAAZ,OAAmC,yCAAIA,EAASlK,QAE5D,CACIyB,MAAO,OACPyM,UAAW,OACXlB,IAAK,QAET,CACIvL,MAAO,UACPyM,UAAW,UACXlB,IAAK,UACL2C,OAAQ,SAAC5L,EAAWmG,GAAZ,OACJ,cAAC,GAAD,CAAY0E,SAAU,kBArBP,SAACgS,GACxB,IAAMC,EAAgB5W,EAAWpL,QAAO,SAAAqL,GAAQ,OAAIA,IAAa0W,KACjED,EAAcE,GAmBsBV,CAAmBjW,SAK3D,OACI,cAAC,KAAD,CAAO+D,QAASA,EAASF,WAAY9D,EAAYkE,YAAY,EAAOtQ,QAASA,KCV9E0M,GAAUuW,KAAVvW,OAEMwW,GAAqB,WAAO,IAAD,EACSpc,aAAkD8a,GAAyB,CAAC/e,QAAS,CAAClE,QAASZ,KADxG,mBAC7BolB,EAD6B,KACdC,EADc,KAE9BC,EAAgBzgB,YAA+Cqf,GAAwB,CAACpf,QAAS,CAAClE,QAASZ,KAC3GulB,EAAgB1gB,YAAqCmf,GAAiB,CAAClf,QAAS,CAAClE,QAASZ,KAC1F4I,EAAWC,cAJmB,EAKRuE,mBAAS,IALD,mBAK7BoY,EAL6B,KAKrBC,EALqB,OAMNrY,mBAA8B,IANxB,mBAM7BoB,EAN6B,KAMpBkX,EANoB,OAONtY,oBAAkB,GAPZ,mBAO7BuY,EAP6B,KAOpBC,EAPoB,OAQExY,mBAAiB,IARnB,mBAQ7B6E,EAR6B,KAQhB4T,EARgB,KAU9BtY,EAAqB1I,YAA+CoI,GAAsB,CAACnI,QAAS,CAAClE,QAASZ,KAC9G8lB,EAAoBjhB,YAAuDggB,GAA4B,CAAC/f,QAAS,CAAClE,QAASZ,KAX7F,EAYsBoN,mBAA8B,IAZpD,mBAY7B2Y,EAZ6B,KAYNC,EAZM,OAaA5Y,mBAAS,IAbT,mBAa7BiB,EAb6B,KAajB0W,EAbiB,KAgB9B9a,EAAQ,yCAAG,WAAO+B,GAAP,0BAAAxF,EAAA,sDAMPyf,EAAcpD,SAAS7W,EAAO6F,UAC9BqU,EAAcrD,SAAS7W,EAAOrJ,UAC9ByP,EAAkBpG,EAAOoG,iBAAmB,GAC5C+T,EAAqBX,EAAOxiB,KAAI,SAAAojB,GACKA,EAAhCC,SAAgCD,EAAtBniB,UACjB,OAF2C,aACJmiB,EADI,6BAIzCE,EAAgDjY,EAAWrL,KAAI,SAAAsL,GAC/BA,EAA3B9K,KAA2B8K,EAArBwB,SACb,OAF6E,aAC3CxB,EAD2C,wBAI3EiY,EAAwC,CAC1CC,mBAAmB,6BACZxa,GADW,IAEd2Z,UACA9T,SAAUoU,EACVtjB,SAAUujB,EACVjU,YAAaA,EACbG,gBAAiBA,EACjBzO,MAAOwiB,EACP9X,WAAYiY,KAGpBlB,EAAc,CAACnd,UAAWse,IACrBrd,MAAK,kBAAMN,EAAS,SACpBS,OAAM,SAAArE,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YA/B3B,2CAAH,sDAkCRiK,EAAQ,yCAAG,WAAOb,GAAP,kBAAApH,EAAA,yDACQ,KAAjBoH,EAAMmK,OADG,uBAET2N,EAAW,IAFF,0CAKUH,EAAc3U,QAAQ,CACzC6V,cAAe,CACX/Y,KAAM,EACND,KAAM,EACNiZ,aAAc9Y,EACd+Y,aAAc,WAVT,QAKPxd,EALO,QAaCoB,OAMV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,aALtDkhB,EAAWvc,EAASlE,KAAK2hB,SAASjjB,MAAMX,KAAI,SAAAY,GAAI,MAAK,CAACgK,MAAOhK,EAAKO,cAC7DgF,EAASlE,KAAK2hB,SAASjjB,MAAM2L,QAC9B9K,IAAQqiB,QAAQ,uCAhBX,2CAAH,sDAuBRC,EAAkB7O,sBAAYC,MAAS,SAAAC,GAAS,OAAI1J,EAAS0J,KAAY,KAAM,IAG/E4O,EAAkB,yCAAG,WAAOnZ,GAAP,kBAAApH,EAAA,0DACnBgf,EAAOziB,MAAK,SAAAqjB,GAAK,OAAIA,EAAMjiB,WAAayJ,KADrB,uBAEnBpJ,IAAQqiB,QAAQ,gCAFG,iCAKvBvd,QAAQC,IAAI,aAAeqE,GALJ,SAMA0X,EAAc1U,QAAQ,CACzCzM,SAAUyJ,IAPS,QAMjBzE,EANiB,QASToB,OAGV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAFtDihB,EAAU,GAAD,oBAAKD,GAAL,CAAarc,EAASlE,KAAKqgB,iBAVjB,2CAAH,sDAiBlB0B,EAAqB,yCAAG,WAAOpZ,GAAP,kBAAApH,EAAA,0DACtB6H,EAAWtL,MAAK,SAAAuL,GAAQ,OAAIA,EAAS7K,OAASmK,KADxB,uBAEtBpJ,IAAQqiB,QAAQ,mCAFM,0CAKHf,EAAkBlV,QAAQ,CAC7CnN,KAAMmK,IANgB,QAKpBzE,EALoB,QAQZoB,OAGV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAFtDugB,EAAc,GAAD,oBAAK1W,GAAL,CAAiBlF,EAASlE,KAAK6gB,qBATtB,2CAAH,sDAerBmB,EAAuB,yCAAG,WAAOrZ,GAAP,kBAAApH,EAAA,yDACP,KAAjBoH,EAAMmK,OADkB,uBAExBiO,EAAyB,IAFD,0CAKLzY,EAAmBqD,QAAQ,CAC9CpD,mBAAoB,CAChBE,KAAM,EACND,KAAM,GACNE,SAAUC,KATU,QAKtBzE,EALsB,QAYdoB,OAMV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,aALtDwhB,EAAyB7c,EAASlE,KAAKmJ,cAAcC,WAAWrL,KAAI,SAAAsL,GAAQ,MAAK,CAACV,MAAOU,EAAS7K,UAC7F0F,EAASlE,KAAKmJ,cAAcC,WAAWiB,QACxC9K,IAAQqiB,QAAQ,2CAfI,2CAAH,sDAsBvBK,EAAmCjP,sBAAYC,MAAS,SAAAC,GAAS,OAAI8O,EAAwB9O,KAAY,KAAM,IAIrH,OACI,eAAC,KAAD,CAAM1U,KAAK,gBAAgBwG,SAAUA,EAArC,UACI,cAAC,KAAKY,KAAN,6BACQoX,IADR,IAEIxe,KAAK,UACL8U,MAAM,WAHV,SAKI,cAAC,KAAD,CAAQxW,KAAM,QAASolB,QAASxB,EAAS1U,SAAU2U,OAEvD,cAAC,KAAK/a,KAAN,6BACQoX,IADR,IAEIxe,KAAK,OACL8U,MAAM,OACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,8BAPrB,SAWI,cAAC,KAAD,CAAO2G,YAAY,YAEvB,cAAC,KAAKN,KAAN,6BACQoX,IADR,IAEI1J,MAAM,SAFV,SAII,cAAC,KAAD,CACI/J,QAASA,EACTC,SAxFK,SAACb,GAAD,OAAmBkZ,EAAgBlZ,IAyFxCc,SAAUqY,EAHd,SAKI,cAAC,GAAD,CAAQ5b,YAAY,kBAAkB0N,aAAW,EACzC5W,QAASqjB,EAAcrjB,SAAWsjB,EAActjB,eAG/DujB,EAAOlW,OAAS,GACb,cAAC,KAAKzE,KAAN,UACI,cAAC,GAAD,CAAqB5I,QAASojB,EAAoBpjB,QAC7B0B,MAAO6hB,EAAQpB,SAAUqB,MAGtD,cAAC,KAAK5a,KAAN,6BACQoX,IADR,IAEIxe,KAAK,WACL8U,MAAM,WACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,kCAPrB,SAWI,cAAC,KAAD,CAAO2G,YAAY,WAAW/I,KAAM,SAAUglB,WAAY,aAE9D,cAAC,KAAKvc,KAAN,6BACQoX,IADR,IAEIxe,KAAK,WACL8U,MAAM,QACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,+BAPrB,SAWI,cAAC,KAAD,CAAO2G,YAAY,QAAQ/I,KAAM,SAAUglB,WAAW,WAE1D,cAAC,KAAKvc,KAAN,6BACQoX,IADR,IAEI1J,MAAO,cAFX,SAII,cAAC,GAAD,CAAepQ,KAAM8J,EAAawS,QAASoB,OAE/C,cAAC,KAAKwB,KAAN,CAEI5jB,KAAK,kBAFT,SAIK,SAAC6jB,EAAD,OAAUC,EAAV,EAAUA,IAAKC,EAAf,EAAeA,OAAf,OACG,qCACKF,EAAOtkB,KAAI,gBAAEoO,EAAF,EAAEA,IAAK3N,EAAP,EAAOA,KAASgkB,EAAhB,sCACR,eAAC,KAAD,CAAiBje,MAAO,CAACyZ,QAAS,OAAQ7G,aAAc,GAAIsL,MAAM,WAAlE,UACI,cAAC,KAAK7c,KAAN,6BACQ4c,GADR,IAEIhkB,KAAM,CAACA,EAAM,QACbqH,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,iBAHtC,SAKI,cAAC,KAAD,CAAO2G,YAAY,YAEvB,cAAC,KAAKN,KAAN,6BACQ4c,GADR,IAEIhkB,KAAM,CAACA,EAAM,SACbqH,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,kBAHtC,SAKI,cAAC,KAAD,CAAO2G,YAAY,aAEvB,cAACwc,GAAA,EAAD,CAAqBpjB,QAAS,kBAAMijB,EAAO/jB,QAfnC2N,MAkBhB,cAAC,KAAKvG,KAAN,UACI,cAAC,KAAD,CAAQzI,KAAK,SAASmC,QAAS,kBAAMgjB,KAAOK,OAAK,EAACzU,KAAM,cAACkB,GAAA,EAAD,IAAxD,wCAOhB,cAAC,KAAKxJ,KAAN,CACI0N,MAAM,aADV,SAGI,cAAC,KAAD,CACI/J,QAASuX,EACTtX,SAlHgB,SAACb,GAAD,OAAmBsZ,EAAiCtZ,IAmHpEc,SAAUsY,EAHd,SAKI,cAAC,GAAD,CAAQ7b,YAAY,oBAAoB0N,aAAW,EAC3C5W,QAASsL,EAAmBtL,SAAW6jB,EAAkB7jB,cAGxEoM,EAAWiB,OAAS,GACjB,cAAC,KAAKzE,KAAN,UACI,cAAC,GAAD,CAAkB5I,QAASsL,EAAmBtL,SAAW6jB,EAAkB7jB,QACzDoM,WAAYA,EACZ0W,cAAeA,MAGzC,cAAC,KAAKla,KAAN,UACI,cAAC,KAAD,CAAQzI,KAAK,UAAUsJ,SAAU,SACzBzJ,QAASojB,EAAoBpjB,SAAWsjB,EAActjB,SAAWqjB,EAAcrjB,QADvF,0BCvRHV,GAAqBxB,YAAH,+8BA0ClByB,GAAoBzB,YAAH,mvBAuCjB8nB,GAA4B9nB,YAAH,iwB,qBCvEzBwP,GAAoB,WAAO,IAAD,IACHnC,mBAAS,IADN,mBAC5BC,EAD4B,aAEHD,mBAAS,IAFN,mBAE5BE,EAF4B,KAElBkC,EAFkB,OAGLpC,mBAAkBvG,GAAQ4I,QAHrB,mBAG5BC,EAH4B,KAGnBC,EAHmB,OAICvC,mBAAS,IAJV,mBAI5B6T,EAJ4B,KAIhBC,EAJgB,KAK7BtR,EAAmB/K,YACrBtD,GACA,CACI0G,UAAW,CACP4H,iBAAkB,CACdnC,KAAMJ,EACNG,KAAMJ,EACNM,SAAUsT,EACVvR,QAASA,IAGjB5K,QAAS,CAAClE,QAASZ,KAhBQ,EAmBW+I,aAAkDgb,GAAyB,CAACjf,QAAS,CAAClE,QAASZ,KAnB1G,mBAmB5B8nB,EAnB4B,KAmBbC,EAnBa,OAoBWhf,aAAkD+a,GAAyB,CAAChf,QAAS,CAAClE,QAASZ,KApB1G,mBAoB5BgoB,EApB4B,KAoBbC,EApBa,OAqBa7a,mBAAoB,IArBjC,mBAqBV8a,GArBU,aAsBG9a,mBAA4B,CAAC0C,SAAU,GAAIC,MAAO,IAtBrD,mBAsB5BC,EAtB4B,KAsBfC,EAtBe,KAwBnChH,qBAAU,WAAO,IAAD,GACZ,UAAI2G,EAAiB3K,YAArB,aAAI,EAAuBiL,cACvBD,EAAeL,EAAiB3K,KAAKiL,eAC1C,WAACN,EAAiB3K,YAAlB,aAAC,EAAuBiL,cAE3B,IAAM8C,EAAQ,yCAAG,WAAOxP,GAAP,kBAAAgD,EAAA,sEACUshB,EAAc,CAAC7f,UAAW,CAACzE,KAAMA,KAD3C,YACP2F,EADO,QAEAlE,KAFA,gCAGH2K,EAAiBgB,QAAQ,CAC3Bf,iBAAkB,CACdnC,KAAMJ,EACNG,KAAMJ,EACNM,SAAUsT,EACVvR,QAASA,KARR,6BAYT,UAAAvG,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAZ7C,2CAAH,sDAgBR2jB,EAAe,CACjBlX,SAAU,SAACmX,EAA8BC,GACrC/e,QAAQC,IAAR,2BAAgC6e,GAAmB,iBAAkBC,GACrEH,EAAoBG,KAItBC,EAAoB,yCAAG,WAAOjmB,EAAkBkmB,GAAzB,4BAAA/hB,EAAA,6DACWnE,EAA7BmB,KAAM6K,EAAuBhM,EAAvBgM,YAAema,EADH,aACWnmB,EADX,wBAEpBsjB,QAAU4C,EACT5kB,EAA2BtB,EAAQsB,MAAMX,KAAI,SAAAY,GACRA,EAAhCK,UAAgCL,EAArByiB,SAClB,OAFuD,aAChBziB,EADgB,6BAIrD0iB,EAPmB,OAO6BjY,QAP7B,IAO6BA,OAP7B,EAO6BA,EAAYrL,KAAI,SAAAsL,GAChCA,EAA3B9K,KAA2B8K,EAArBwB,SACb,OAF8E,aAC5CxB,EAD4C,wBAPzD,SAWF0Z,EAAc,CACjC/f,UAAW,CACPwgB,mBAAmB,6BACZD,GADW,IAEd7kB,MAAOA,EACP0K,WAAYiY,OAhBC,QAWnBnd,EAXmB,QAoBXoB,OAIV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,aAHhDkkB,EAAc1Y,EAAYF,SAAS9M,KAAI,SAAAX,GAAO,aAAIA,EAAQ+B,KAAR,UAAc+E,EAASlE,YAAvB,aAAc,EAAe+iB,cAAc5jB,IAAK+E,EAASlE,KAAK+iB,cAAgB3lB,KACtI4N,EAAe,CAACH,SAAU4Y,EAAa3Y,MAAOC,EAAYD,SAtBrC,2CAAH,wDA4BpBsC,EAAgC,CAClC,CACIxM,MAAO,KACPyM,UAAW,KACXlB,IAAK,KACL2C,OAAQ,SAAC5L,EAAW9F,GAAZ,OAAiC,yCAAIA,EAAQ+B,QAEzD,CACIyB,MAAO,WACPyM,UAAW,UACXlB,IAAK,UACL2C,OAAQ,SAAC5L,EAAW9F,GAAZ,OACJ,cAAC,KAAD,CAAQN,KAAM,QAASolB,QAAS9kB,EAAQsjB,QAChC1U,SAAU,SAACsX,GAAD,OAAUD,EAAqBjmB,EAASkmB,QAGlE,CACI1iB,MAAO,QACPyM,UAAW,YACXlB,IAAK,YACL2C,OAAQ,SAAC5L,EAAW9F,GAAZ,aACJ,cAAC,KAAD,CAAUT,UAAWC,KAAE6B,SAAvB,mBACKrB,EAAQsB,aADb,aACK,EAAeX,KAAI,SAAAY,GAAI,OACpB,cAAC,KAAD,CAAsBhC,UAAWC,KAAEiC,MAAOC,MAAO,SAAUhC,KAAM,GAAIiC,IAAKJ,EAAKK,UACvEC,IAAKN,EAAKO,UADLP,EAAKQ,WAMlC,CACIyB,MAAO,OACPyM,UAAW,OACXlB,IAAK,QAET,CACIvL,MAAO,aACPyM,UAAW,aACXlB,IAAK,aACL2C,OAAQ,SAAC5L,EAAW9F,GAAZ,aACJ,qBAAKT,UAAWC,KAAEwM,WAAlB,UACY,OAAPhM,QAAO,IAAPA,GAAA,UAAAA,EAASgM,kBAAT,eAAqBiB,QAAS,GAAKjN,EAAQgM,WAAWrL,KAAI,SAAAsL,GAAQ,OAC/D,cAAC,KAAD,CAAKwD,MAAM,OAAX,SACI,eAAC,KAAD,CAAMvO,GAAE,2BAAsB+K,EAAS9K,MAAvC,UAAgD8K,EAAS7K,KAAzD,QADmB6K,EAASlK,WAOhD,CACIyB,MAAO,WACPyM,UAAW,WACXlB,IAAK,YAET,CACIvL,MAAO,QACPyM,UAAW,WACXlB,IAAK,WACL2C,OAAQ,SAAC5L,EAAW9F,GAAZ,OAAiC,qCAAGA,EAAQM,SAAX,YAE7C,CACIkD,MAAO,UACPyM,UAAW,UACXlB,IAAK,UACL2C,OAAQ,SAAC5L,EAAW9F,GAAZ,OACJ,cAAC,GAAD,CAAYsQ,QAAO,UAAKtQ,EAAQmB,MAAQoP,UAAS,iBAAYvQ,EAAQmB,MACzDwP,SAAU,kBAAMA,EAAS3Q,EAAQmB,YAMnDmlB,EAAuB,yCAAG,WAAOvY,GAAP,oBAAA5J,EAAA,6DACR,EACdib,EAAgBrR,EAAEkD,OAAO1F,MAC/BsT,EAAcO,GACdjS,EAHoB,GADQ,SAKLI,EAAiBgB,QAAQ,CAC5Cf,iBAAkB,CACdnC,KANY,EAOZD,KAAMJ,EACNM,SAAU8T,EACV/R,QAASA,KAVW,QAKtBvG,EALsB,QAafoB,SACT,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,aAd9B,2CAAH,sDAiBvBokB,EAAgC3Q,sBAAYC,MAAS,SAAAC,GAAS,OAAIwQ,EAAwBxQ,KAAY,KAAM,IAG5GtH,EAAoB,yCAAG,WAAOjD,GAAP,UAAApH,EAAA,6DACL,EACpBgJ,EADoB,GAEpBG,EAAW/B,GACXqC,EAAe,CAACH,SAAU,GAAIC,MAAO,IAJZ,SAKnBH,EAAiBgB,QAAQ,CAC3Bf,iBAAkB,CACdnC,KANY,EAOZD,KAAMH,EACNK,SAAUsT,EACVvR,QAAS9B,KAVQ,2CAAH,sDAkB1B,OAHIgC,EAAiB5K,OACjBR,IAAQQ,MAAM4K,EAAiB5K,MAAMR,SAGrC,qCACI,sBAAK5C,UAAU,gBAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,8CACA,cAAC,KAAD,CAAM2B,GAAI,SAAV,SACI,cAAC,KAAD,0BAGR,cAACoL,GAAA,EAAD,CAAQxD,YAAY,kBAAkBvJ,UAAW,SACzCqP,SA9BS,SAACb,GAAD,OAAsCwY,EAA8BxY,IA8B7CyI,aAAW,EAC3C5W,QAAS2N,EAAiB3N,aAEtC,cAAC,KAAD,IACA,gCACI,cAAC,KAAD,CAAQuH,MAAO,CAACC,MAAO,QAAS2S,aAAc,QACtCpL,aAActB,EACd9N,UAAWC,KAAE6N,QACbuB,SAAUJ,EAHlB,SAKMK,OAAOC,KAAKtK,IAAyC7D,KAAI,SAACoO,EAAKC,GAAN,OACvD,cAAC,KAAOC,OAAR,CAAe1D,MAAOwD,EAAtB,SAAoCxC,GAAuBwC,IAA3BC,QAGxC,cAAC,KAAD,CACIpP,QAAS2N,EAAiB3N,SAAW8lB,EAAqB9lB,SAAWgmB,EAAqBhmB,QAC1FkmB,aAAY,gBAAMA,GAClB9V,QAASA,EACTF,WAAYnC,EAAYF,SACxByC,WAAY,CACRxC,MAAOC,EAAYD,MACnBkB,SAAS,WAAD,8BAAE,WAAOgM,GAAP,gBAAAzW,EAAA,6DAENgJ,EADMlC,GAAY2P,EAAa,GAAK5P,GAD9B,SAGAuC,EAAiBgB,QAAQ,CAC3Bf,iBAAkB,CACdnC,KAAMJ,EACNG,KAAMJ,EACNM,SAAU,GACV+B,QAASA,KARX,2CAAF,mDAAC,IAab6E,OAAQ,cC9NrB5F,GAAUuW,KAAVvW,OAEMka,GAAqB,WAAO,IAAD,YAE9BrX,EADSzJ,cACYvE,MAAQ,GAC7BiO,EAAkB5M,YACpBrD,GACA,CACIyG,UAAW,CAACzE,KAAMgO,GAClB1M,QAAS,CAAClE,QAASZ,KAPS,EAU0B+I,aAAkD+a,GAAyB,CAAChf,QAAS,CAAClE,QAASZ,KAVzH,mBAU7B8oB,EAV6B,KAUNC,EAVM,KAW9BngB,EAAWC,cAXmB,EAYNuE,oBAAkB,GAZZ,mBAY7BuY,EAZ6B,KAYpBC,EAZoB,OAaExY,mBAAiB,IAbnB,mBAa7B6E,EAb6B,KAahB4T,EAbgB,KAe9BN,EAAgB1gB,YAAqCmf,GAAiB,CAAClf,QAAS,CAAClE,QAASZ,KAC1FslB,EAAgBzgB,YAA+Cqf,GAAwB,CAACpf,QAAS,CAAClE,QAASZ,KAhB7E,EAiBkBoN,mBAA8B,IAjBhD,mBAiB7B4b,EAjB6B,KAiBRC,EAjBQ,OAkBR7b,mBAAS,IAlBD,mBAkB7BoY,EAlB6B,KAkBrBC,EAlBqB,KAoB9BlY,EAAqB1I,YAA+CoI,GAAsB,CAACnI,QAAS,CAAClE,QAASZ,KAC9G8lB,EAAoBjhB,YAAuDggB,GAA4B,CAAC/f,QAAS,CAAClE,QAASZ,KArB7F,EAsBsBoN,mBAA8B,IAtBpD,mBAsB7B2Y,EAtB6B,KAsBNC,EAtBM,OAuBA5Y,mBAAS,IAvBT,mBAuB7BiB,EAvB6B,KAuBjB0W,EAvBiB,KAyBpC9b,qBAAU,WACFwI,EAAgBxM,OAChB2gB,EAAWnU,EAAgBxM,KAAKyM,WAAWiU,SAC3CF,EAAUhU,EAAgBxM,KAAKyM,WAAW/N,OAC1CohB,EAActT,EAAgBxM,KAAKyM,WAAWrD,YAC9CwX,EAAepU,EAAgBxM,KAAKyM,WAAWO,gBAEpD,CAACR,EAAgBxM,OAEpB,IAAMgF,EAAQ,yCAAG,WAAO+B,GAAP,wBAAAxF,EAAA,sDAOP0iB,EAAQrG,SAAS7W,EAAO5H,IACxB6hB,EAAcpD,SAAS7W,EAAO6F,UAC9BqU,EAAcrD,SAAS7W,EAAOrJ,UAC9BgB,EAA2B6hB,EAAOxiB,KAAI,SAAAojB,GACDA,EAAhCniB,UAAgCmiB,EAArBC,SAClB,OAFiD,aACVD,EADU,6BAI/CE,EAAgDjY,EAAWrL,KAAI,SAAAsL,GAC/BA,EAA3B9K,KAA2B8K,EAArBwB,SACb,OAF6E,aAC3CxB,EAD2C,wBAIjFwa,EAAsB,CAClB7gB,UAAW,CACPwgB,mBAAmB,6BACZzc,GADW,IAEd5H,GAAI8kB,EACJvD,QAASA,EACT9T,SAAUoU,EACVtjB,SAAUujB,EACVjU,YAAaA,EACbtO,MAAOA,EACP0K,WAAYiY,OAInBpd,MAAK,kBAAMN,EAAS,SACpBS,OAAM,SAAArE,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAjC3B,2CAAH,sDAoCRuiB,EAAkB,yCAAG,WAAOnZ,GAAP,kBAAApH,EAAA,0DACnBgf,EAAOziB,MAAK,SAAAqjB,GAAK,OAAIA,EAAMjiB,WAAayJ,KADrB,uBAEnBpJ,IAAQqiB,QAAQ,gCAFG,0CAKAvB,EAAc1U,QAAQ,CACzCzM,SAAUyJ,IANS,QAKjBzE,EALiB,QAQToB,OAGV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAFtDihB,EAAU,GAAD,oBAAKD,GAAL,CAAarc,EAASlE,KAAKqgB,iBATjB,2CAAH,sDAelB6D,EAAoB,yCAAG,WAAOvb,GAAP,kBAAApH,EAAA,yDACJ,KAAjBoH,EAAMmK,OADe,uBAErBkR,EAAuB,IAFF,0CAKF1D,EAAc3U,QAAQ,CACzC6V,cAAe,CACX/Y,KAAM,EACND,KAAM,GACNiZ,aAAc9Y,EACd+Y,aAAc,WAVG,QAKnBxd,EALmB,QAaXoB,OAMV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,aALtDykB,EAAuB9f,EAASlE,KAAK2hB,SAASjjB,MAAMX,KAAI,SAAAY,GAAI,MAAK,CAACgK,MAAOhK,EAAKO,cACzEgF,EAASlE,KAAK2hB,SAASjjB,MAAM2L,QAC9B9K,IAAQqiB,QAAQ,uCAhBC,2CAAH,sDAuBpBuC,EAA8BnR,sBAAYC,MAAS,SAAAC,GAAS,OAAIgR,EAAqBhR,KAAY,KAAM,IAIvG6O,EAAqB,yCAAG,WAAOpZ,GAAP,kBAAApH,EAAA,0DACtB6H,EAAWtL,MAAK,SAAAuL,GAAQ,OAAIA,EAAS7K,OAASmK,KADxB,uBAEtBpJ,IAAQqiB,QAAQ,mCAFM,0CAKHf,EAAkBlV,QAAQ,CAC7CnN,KAAMmK,IANgB,QAKpBzE,EALoB,QAQZoB,OAGV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAFtDugB,EAAc,GAAD,oBAAK1W,GAAL,CAAiBlF,EAASlE,KAAK6gB,qBATtB,2CAAH,sDAerBmB,GAAuB,yCAAG,WAAOrZ,GAAP,kBAAApH,EAAA,yDACP,KAAjBoH,EAAMmK,OADkB,uBAExBiO,EAAyB,IAFD,0CAKLzY,EAAmBqD,QAAQ,CAC9CpD,mBAAoB,CAChBE,KAAM,EACND,KAAM,GACNE,SAAUC,KATU,QAKtBzE,EALsB,QAYdoB,OAMV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,aALtDwhB,EAAyB7c,EAASlE,KAAKmJ,cAAcC,WAAWrL,KAAI,SAAAsL,GAAQ,MAAK,CAACV,MAAOU,EAAS7K,UAC7F0F,EAASlE,KAAKmJ,cAAcC,WAAWiB,QACxC9K,IAAQqiB,QAAQ,2CAfI,2CAAH,sDAsBvBK,GAAmCjP,sBAAYC,MAAS,SAAAC,GAAS,OAAI8O,GAAwB9O,KAAY,KAAM,IAGrH,OAAK3G,GAGDC,EAAgBzM,OAChBR,IAAQQ,MAAMyM,EAAgBzM,MAAMR,SAEpCiN,EAAgBxP,QACT,cAAC,EAAD,IAGP,eAAC,KAAD,CAAMwB,KAAK,gBAAgBwG,SAAUA,EAC/BW,cAAe,CACXxG,GAAE,UAAEqN,EAAgBxM,YAAlB,aAAE,EAAsByM,WAAWtN,GACrCX,KAAI,UAAEgO,EAAgBxM,YAAlB,aAAE,EAAsByM,WAAWjO,KACvCoO,SAAQ,UAAEJ,EAAgBxM,YAAlB,aAAE,EAAsByM,WAAWG,SAC3ClP,SAAQ,UAAE8O,EAAgBxM,YAAlB,aAAE,EAAsByM,WAAW/O,SAC3CsP,YAAW,UAAER,EAAgBxM,YAAlB,aAAE,EAAsByM,WAAWO,YAC9CG,gBAAe,UAAEX,EAAgBxM,YAAlB,aAAE,EAAsByM,WAAWU,iBAP5D,UASI,cAAC,KAAKvH,KAAN,CAAWpH,KAAK,KAAK+F,MAAO,CAACyZ,QAAS,QAAtC,SACI,cAAC,KAAD,CAAO7gB,KAAM,aAEjB,cAAC,KAAKyI,KAAN,6BACQoX,IADR,IAEIxe,KAAK,UACL8U,MAAM,WAHV,SAKI,cAAC,KAAD,CAAQxW,KAAM,QAASolB,QAASxB,EAAS1U,SAAU2U,OAEvD,cAAC,KAAK/a,KAAN,6BACQoX,IADR,IAEIxe,KAAK,OACL8U,MAAM,OACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,8BAPrB,SAWI,cAAC,KAAD,CAAO2G,YAAY,YAEvB,cAAC,KAAKN,KAAN,6BACQoX,IADR,IAEI1J,MAAM,SAFV,SAII,cAAC,KAAD,CACI/J,QAASwa,EACTva,SA3FW,SAACb,GAAD,OAAmBwb,EAA4Bxb,IA4F1Dc,SAAUqY,EAHd,SAKI,cAAC,GAAD,CAAQ5b,YAAY,yBAAyB0N,aAAW,EAChD5W,QAASqjB,EAAcrjB,SAAWsjB,EAActjB,eAG/DujB,EAAOlW,OAAS,GACb,cAAC,KAAKzE,KAAN,UACI,cAAC,GAAD,CAAqB5I,QAASwP,EAAgBxP,SAAWqjB,EAAcrjB,QAAS0B,MAAO6hB,EAClEpB,SAAUqB,MAGvC,cAAC,KAAK5a,KAAN,6BACQoX,IADR,IAEIxe,KAAK,WACL8U,MAAM,WACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,kCAPrB,SAWI,cAAC,KAAD,CAAO2G,YAAY,WAAW/I,KAAM,cAExC,cAAC,KAAKyI,KAAN,6BACQoX,IADR,IAEIxe,KAAK,WACL8U,MAAM,QACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,+BAPrB,SAWI,cAAC,KAAD,CAAO2G,YAAY,QAAQ/I,KAAM,SAAUglB,WAAW,WAE1D,cAAC,KAAKvc,KAAN,6BACQoX,IADR,IAEI1J,MAAO,cAFX,SAII,cAAC,GAAD,CAAepQ,KAAM8J,EAAawS,QAASoB,OAE/C,cAAC,KAAKhb,KAAN,CACI0N,MAAM,aADV,SAGI,cAAC,KAAD,CACI/J,QAASuX,EACTtX,SApGgB,SAACb,GAAD,OAAmBsZ,GAAiCtZ,IAqGpEc,SAAUsY,EAHd,SAKI,cAAC,GAAD,CAAQ7b,YAAY,oBAAoB0N,aAAW,EAC3C5W,QAASsL,EAAmBtL,SAAW6jB,EAAkB7jB,cAGxEoM,EAAWiB,OAAS,GACjB,cAAC,KAAKzE,KAAN,UACI,cAAC,GAAD,CAAkB5I,QAASsL,EAAmBtL,SAAW6jB,EAAkB7jB,QACzDoM,WAAYA,EACZ0W,cAAeA,MAGzC,cAAC,KAAKsC,KAAN,CAAW5jB,KAAK,kBAAhB,SACK,SAAC6jB,EAAD,OAAUC,EAAV,EAAUA,IAAKC,EAAf,EAAeA,OAAf,OACG,qCACKF,EAAOtkB,KAAI,gBAAEoO,EAAF,EAAEA,IAAK3N,EAAP,EAAOA,KAASgkB,EAAhB,sCACR,eAAC,KAAD,CAAiBje,MAAO,CAACyZ,QAAS,OAAQ7G,aAAc,GAAIsL,MAAM,WAAlE,UACI,cAAC,KAAK7c,KAAN,6BACQ4c,GADR,IAEIhkB,KAAM,CAACA,EAAM,QACbqH,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,iBAHtC,SAKI,cAAC,KAAD,CAAO2G,YAAY,YAEvB,cAAC,KAAKN,KAAN,6BACQ4c,GADR,IAEIhkB,KAAM,CAACA,EAAM,SACbqH,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,kBAHtC,SAKI,cAAC,KAAD,CAAO2G,YAAY,aAEvB,cAACwc,GAAA,EAAD,CAAqBpjB,QAAS,kBAAMijB,EAAO/jB,QAfnC2N,MAkBhB,cAAC,KAAKvG,KAAN,UACI,cAAC,KAAD,CAAQzI,KAAK,SAASmC,QAAS,kBAAMgjB,KAAOK,OAAK,EAACzU,KAAM,cAACkB,GAAA,EAAD,IAAxD,wCAOhB,cAAC,KAAKxJ,KAAN,UACI,cAAC,KAAD,CAAQzI,KAAK,UAAUsJ,SAAU,SACzBzJ,QAAS8mB,EAA6B9mB,SAAWwP,EAAgBxP,SAAWsjB,EAActjB,QADlG,0BA9ID,cAAC,GAAD,K,qBCjLFsP,GAAmB,WAAO,IAAD,EAE5BC,EADSzJ,cACYvE,MAAQ,GAC7BiO,EAAkB5M,YACpBrD,GACA,CACIyG,UAAW,CAACzE,KAAMgO,GAClB1M,QAAS,CAAClE,QAASZ,KAPO,EAUY+I,aAAkDgb,GAAyB,CAACjf,QAAS,CAAClE,QAASZ,KAV3G,mBAU3B8nB,EAV2B,KAW5Blf,GAX4B,KAWjBC,eAaXmK,EAAQ,yCAAG,WAAOxP,GAAP,kBAAAgD,EAAA,sEACUshB,EAAc,CAAC7f,UAAW,CAACzE,KAAMA,KAD3C,QACP2F,EADO,QAEAlE,KACT2D,EAAS,OAET,UAAAO,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAL7C,2CAAH,sDASd,IAAKgN,GAAeC,EAAgBzM,MAChC,OAAO,cAAC,GAAD,IAEX,GAAIyM,EAAgBxP,QAChB,OAAO,cAAC,EAAD,IAEX,IAAMI,EAAO,UAAGoP,EAAgBxM,YAAnB,aAAG,EAAsByM,WACtC,OACI,qCACI,sBAAK9P,UAAWC,KAAE8P,kBAAlB,UACI,cAAC,KAAD,CAAUC,UAAQ,EAAChQ,UAAWC,KAAE6B,SAAhC,gBACKrB,QADL,IACKA,OADL,EACKA,EAASsB,MAAMX,KAAI,SAAAY,GAAI,OACpB,cAAC,KAAD,CAAsBhC,UAAWC,KAAEiC,MAAOC,MAAO,SAAUC,IAAKJ,EAAKK,UAAWlC,KAAM,KAAzE6B,EAAKQ,SAG1B,gCACI,cAAC,GAAD,CAAYwO,UAAS,oBAAepB,GAAewB,SAAU,kBAAMA,EAASxB,MAC5E,wCAASnP,QAAT,IAASA,OAAT,EAASA,EAASoB,OAClB,uBAAO7B,UAAU,YAAjB,SACI,kCACA,+BACI,qCACA,6BACI,6CAASS,QAAT,IAASA,OAAT,EAASA,EAAS+B,WAG1B,+BACI,2CACA,8BACY,OAAP/B,QAAO,IAAPA,OAAA,EAAAA,EAASsjB,SACJ,cAAC,KAAD,CAAK7T,MAAM,QAAX,iBACA,cAAC,KAAD,CAAKA,MAAM,MAAX,qBAId,+BACI,wCACA,6BACI,sCAAOzP,QAAP,IAAOA,OAAP,EAAOA,EAASM,gBAGxB,+BACI,2CACA,6BACI,sCAAON,QAAP,IAAOA,OAAP,EAAOA,EAASwP,gBAGtBxP,IAAkB,OAAPA,QAAO,IAAPA,OAAA,EAAAA,EAASgM,WAAWiB,QAAS,GACtC,+BACI,6CACA,oCAAKjN,QAAL,IAAKA,OAAL,EAAKA,EAASgM,WAAWrL,KAAI,SAAAsL,GAAQ,OACjC,cAAC,KAAD,CAAKwD,MAAO,OAAZ,SACI,cAAC,KAAD,CACMvO,GAAI,oBAAsB+K,EAAS9K,KADzC,SACgD8K,EAAS7K,MAD9C6K,EAASlK,yBAWhD,sBAAKxC,UAAWC,KAAEkQ,MAAlB,UACI,cAAC,KAAD,CAAMlM,MAAM,cAAcjE,UAAWC,KAAEmQ,KAAvC,SAA8C3P,GAAW9C,aAAK,OAAC8C,QAAD,IAACA,OAAD,EAACA,EAAS4P,eACxE,cAAC,KAAD,CAAMpM,MAAM,kBAAkBjE,UAAWC,KAAEmQ,KAA3C,SACI,cAAC,KAAD,CAAOE,YAAY,EAAOC,WAAU,OAAE9P,QAAF,IAAEA,OAAF,EAAEA,EAAS+P,gBACxCC,QAvFP,CACZ,CACIC,UAAW,OACXlB,IAAK,QAET,CACIkB,UAAW,QACXlB,IAAK,UAgF4BmB,YAAY,aCzG5CC,GAAyB,WAClC,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOlG,KAAM,IAAKC,QAAS,cAAC,GAAD,MAC3B,cAAC,IAAD,CAAOD,KAAM,QAASC,QAAS,cAAC,GAAD,MAC/B,cAAC,IAAD,CAAOD,KAAM,SAAUC,QAAS,cAAC,GAAD,MAChC,cAAC,IAAD,CAAOD,KAAM,eAAgBC,QAAS,cAAC,GAAD,MACtC,cAAC,IAAD,CAAOD,KAAM,IAAKC,QAAS,cAAC,GAAD,UCH1B8c,GAA2BtpB,YAAH,kSAiBxBupB,GAA2BvpB,YAAH,kSAgBxBwpB,GAA2BxpB,YAAH,yHCtBxBypB,GAAsB,WAAO,IAAD,IACLpc,mBAAS,IADJ,mBAC9BC,EAD8B,aAELD,mBAAS,IAFJ,mBAE9BE,EAF8B,KAEpBmc,EAFoB,OAGKrc,mBAA8B,CAACiB,WAAY,GAAI0B,MAAO,IAH3D,mBAG9B2Z,EAH8B,KAGfC,EAHe,OAIevc,mBAAqB,IAJpC,mBAIVwc,GAJU,WAM/Brc,EAAqB1I,YACvBoI,GACA,CACIhF,UAAW,CAACuF,mBAAoB,CAACE,KAAMJ,EAAUG,KAAMJ,EAAUM,SAAU,KAC3E7I,QAAS,CAAClE,QAASZ,KAVU,EAaW+I,aAAoDwgB,GAChG,CAACzkB,QAAS,CAAClE,QAASZ,KAda,mBAa9B6pB,EAb8B,KAadC,EAbc,OAgBW/gB,aAAoDugB,GAChG,CAACxkB,QAAS,CAAClE,QAASZ,KAjBa,mBAgB9B+pB,EAhB8B,KAgBdC,EAhBc,KAoBrC/gB,qBAAU,WAAO,IAAD,GACZ,UAAIsE,EAAmBtI,YAAvB,aAAI,EAAyBmJ,gBACzBub,EAAiBpc,EAAmBtI,KAAKmJ,iBAC9C,WAACb,EAAmBtI,YAApB,aAAC,EAAyBmJ,gBAE7B,IAAM+Z,EAAe,CACjBlX,SAAU,SAACmX,EAA8BC,GACrC/e,QAAQC,IAAR,2BAAgC6e,GAAmB,iBAAkBC,GACrEuB,EAAsBvB,KAIxBrV,EAAQ,yCAAG,WAAOxP,GAAP,gBAAAgD,EAAA,sEACUqjB,EAAe,CAAC5hB,UAAW,CAACzE,KAAMA,KAD5C,WACP2F,EADO,QAECoB,OAFD,gCAGHgD,EAAmBqD,QAAQ,CAACpD,mBAAoB,CAACE,KAAMJ,EAAUG,KAAMJ,EAAUM,SAAU,MAHxF,6BAKTxE,EAASoB,OAAO7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAL5C,2CAAH,sDAQR8jB,EAAoB,yCAAG,WAAOha,EAAoBia,GAA3B,oBAAA/hB,EAAA,6DACS8H,EAA3B9K,KAA2B8K,EAArBwB,UAAa0Y,EADD,aACSla,EADT,sBAEpBqX,QAAU4C,EAFU,SAGFwB,EAAe,CAClC9hB,UAAW,CACPgiB,oBAAoB,gBACbzB,MANU,QAGnBrf,EAHmB,QAUXoB,OAIVpB,EAASoB,OAAO7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,aAH/CygB,EAAgByE,EAAcrb,WAAWrL,KAAI,SAAAsL,GAAQ,aAAKA,EAASlK,KAAT,UAAe+E,EAASlE,YAAxB,aAAe,EAAe8kB,eAAe3lB,IAAK+E,EAASlE,KAAK8kB,eAAiBzb,KACjJqb,EAAiB,CAACtb,WAAY4W,EAAelV,MAAO2Z,EAAc3Z,SAZ7C,2CAAH,wDAkBpBsC,EAAU,CACZ,CACIxM,MAAO,KACPyM,UAAW,KACXlB,IAAK,KACL2C,OAAQ,SAAC5L,EAAWmG,GAAZ,OAAmC,yCAAIA,EAASlK,QAE5D,CACIyB,MAAO,WACPyM,UAAW,UACXlB,IAAK,UACL2C,OAAQ,SAAC5L,EAAWmG,GAAZ,OACJ,cAAC,KAAD,CAAQvM,KAAM,QAASolB,QAAS7Y,EAASqX,QACjC1U,SAAU,SAACsX,GAAD,OAAUD,EAAqBha,EAAUia,QAGnE,CACI1iB,MAAO,OACPyM,UAAW,OACXlB,IAAK,QAET,CACIvL,MAAO,UACPyM,UAAW,UACXlB,IAAK,UACL2C,OAAQ,SAAC5L,EAAWmG,GAAZ,OACJ,cAAC,GAAD,CAAYqE,QAAO,UAAKrE,EAAS9K,MAAQoP,UAAS,iBAAYtE,EAAS9K,MAC3DwP,SAAU,kBAAMA,EAAS1E,EAAS9K,YAQ1D,OAHI+J,EAAmBvI,OACnBR,IAAQQ,MAAMuI,EAAmBvI,MAAMR,SAEvC+I,EAAmBtL,QACZ,cAAC,EAAD,IAGP,qCACI,qBAAKL,UAAU,gBAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,gDACA,cAAC,KAAD,CAAM2B,GAAI,SAAV,SACI,cAAC,KAAD,4BAIZ,cAAC,KAAD,IACA,8BACI,cAAC,KAAD,CACItB,QAASsL,EAAmBtL,SAAW6nB,EAAsB7nB,SAAW+nB,EAAsB/nB,QAC9FkmB,aAAY,gBAAMA,GAClB9V,QAASA,EACTF,WAAYuX,EAAcrb,WAC1BkE,WAAY,CACRxC,MAAO2Z,EAAc3Z,MACrBkB,SAAS,WAAD,8BAAE,WAAOgM,GAAP,gBAAAzW,EAAA,6DAENijB,EADMnc,GAAY2P,EAAa,GAAK5P,GAD9B,SAGAE,EAAmBqD,QAAQ,CAACpD,mBAAoB,CAACE,KAAMJ,EAAUG,KAAMJ,EAAUM,SAAU,MAH3F,2CAAF,mDAAC,IAMb4G,OAAQ,aCvIf2V,GAAuB,WAAO,IAAD,EACUnhB,aAAoDsgB,GAChG,CAACvkB,QAAS,CAAClE,QAASZ,KAFc,mBAC/BmqB,EAD+B,KACfC,EADe,KAIhCxhB,EAAWC,cAJqB,EAKRuE,oBAAkB,GALV,mBAK/BuY,EAL+B,KAKtBC,EALsB,OAMAxY,mBAAiB,IANjB,mBAM/B6E,EAN+B,KAMlB4T,EANkB,KAQhC5b,EAAQ,yCAAG,WAAO+B,GAAP,UAAAxF,EAAA,sDAGb2jB,EAAe,CACXliB,UAAW,CACPoiB,oBAAoB,6BACbre,GADY,IAEf2Z,UACA1T,YAAaA,OAIpB/I,MAAK,kBAAMN,EAAS,SACpBS,OAAM,SAAArE,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAb3B,2CAAH,sDAgBd,OACI,eAAC,KAAD,CAAMf,KAAK,iBAAiBwG,SAAUA,EAAtC,UACI,cAAC,KAAKY,KAAN,6BACQoX,IADR,IAEIxe,KAAK,UACL8U,MAAM,WAHV,SAKI,cAAC,KAAD,CAAQxW,KAAM,QAASolB,QAASxB,EAAS1U,SAAU2U,OAEvD,cAAC,KAAK/a,KAAN,6BACQoX,IADR,IAEIxe,KAAK,OACL8U,MAAM,OACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,8BAPrB,SAWI,cAAC,KAAD,CAAO2G,YAAY,YAEvB,cAAC,KAAKN,KAAN,6BACQoX,IADR,IAEI1J,MAAO,cAFX,SAII,cAAC,GAAD,CAAepQ,KAAM8J,EAAawS,QAASoB,OAE/C,cAAC,KAAKhb,KAAN,UACI,cAAC,KAAD,CAAQzI,KAAK,UAAUsJ,SAAU,SAAUzJ,QAASmoB,EAAsBnoB,QAA1E,0B,qBChDHib,GAAqB,WAAO,IAAD,MACA9P,mBAAS,IADT,gCAEAA,mBAAS,IAFT,mBAI1B+P,GAJ0B,UAGjBpV,cACavE,MAAQ,IAC9BoF,EAAWC,cALe,EAMAuE,mBAAoB,IANpB,mBAMzB0C,EANyB,KAMfwa,EANe,KAQ1BlN,EAAmBvY,YACrBqI,GAAoB,CAChBjF,UAAW,CAACzE,KAAM2Z,GAClBrY,QAAS,CAAClE,QAASZ,KAXK,EAagB+I,aAAoDwgB,GAChG,CAACzkB,QAAS,CAAClE,QAASZ,KAdQ,mBAazB6pB,EAbyB,KAaTC,EAbS,KAiBhC7gB,qBAAU,WAAO,IAAD,KACZ,UAAImU,EAAiBnY,YAArB,aAAI,EAAuBoY,cACvBiN,EAAW,UAAClN,EAAiBnY,YAAlB,aAAC,EAAuBoY,YAAYvN,YACpD,WAACsN,EAAiBnY,YAAlB,aAAC,EAAuBoY,cAE3B,IAAMhL,EAAU,CACZ,CACIxM,MAAO,KACPyM,UAAW,KACXlB,IAAK,KACL2C,OAAQ,SAAC5L,EAAW9F,GAAZ,OAAiC,yCAAIA,EAAQ+B,QAEzD,CACIyB,MAAO,QACPyM,UAAW,YACXlB,IAAK,YACL2C,OAAQ,SAAC5L,EAAW9F,GAAZ,OACJ,cAAC,KAAD,CAAUT,UAAWC,KAAE6B,SAAvB,SACKrB,EAAQsB,MAAMX,KAAI,SAAAY,GAAI,OACnB,8BACI,cAAC,KAAD,CAAQhC,UAAWC,KAAEiC,MAAOC,MAAO,SAAUhC,KAAM,GAAIiC,IAAKJ,EAAKK,UACzDC,IAAKN,EAAKO,oBAMtC,CACI0B,MAAO,OACPyM,UAAW,OACXlB,IAAK,QAET,CACIvL,MAAO,WACPyM,UAAW,WACXlB,IAAK,YAET,CACIvL,MAAO,QACPyM,UAAW,WACXlB,IAAK,WACL2C,OAAQ,SAAC5L,EAAW9F,GAAZ,OAAiC,qCAAGA,EAAQM,SAAX,YAE7C,CACIkD,MAAO,UACPyM,UAAW,UACXlB,IAAK,UACL2C,OAAQ,SAAC5L,EAAW9F,GAAZ,OACJ,cAAC,GAAD,CAAYsQ,QAAO,yBAAoBtQ,EAAQmB,WAKrDwP,EAAQ,yCAAG,WAAOxP,GAAP,kBAAAgD,EAAA,sEACUqjB,EAAe,CAAC5hB,UAAW,CAACzE,KAAMA,KAD5C,QACP2F,EADO,QAECoB,OAGV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAFtDoE,EAAS,OAHA,2CAAH,sDASd,IAAKuU,GAAgBC,EAAiBpY,MAClC,OAAO,cAAC,GAAD,IAEX,GAAIoY,EAAiBnb,QACjB,OAAO,cAAC,EAAD,IAEX,IAAMqM,EAAQ,UAAG8O,EAAiBnY,YAApB,aAAG,EAAuBoY,YACxC,OACI,qCACI,cAAC,GAAD,CAAYzK,UAAS,oBAAeuK,GAAgBnK,SAAU,kBAAMA,EAASmK,MAC7E,wCAAS7O,QAAT,IAASA,OAAT,EAASA,EAAU7K,OACnB,uBAAO7B,UAAU,YAAjB,SACI,kCACA,+BACI,qCACA,6BACI,6CAAS0M,QAAT,IAASA,OAAT,EAASA,EAAUlK,WAG3B,+BACI,2CACA,8BACa,OAARkK,QAAQ,IAARA,OAAA,EAAAA,EAAUqX,SACL,cAAC,KAAD,CAAK7T,MAAM,QAAX,iBACA,cAAC,KAAD,CAAKA,MAAM,MAAX,qBAId,+BACI,uCACA,6BACI,sCAAOxD,QAAP,IAAOA,OAAP,EAAOA,EAAU9K,iBAK7B,cAAC,KAAD,CACIqC,MAAO,kBAAM,qBAAKjE,UAAWC,KAAE0oB,cAAlB,uBACbtoB,QAAS6nB,EAAsB7nB,QAC/BoQ,QAASA,EACTF,WAAYrC,EAAS9M,KAAI,SAAA8M,GAAQ,qBAAMsB,IAAKtB,EAAS1L,IAAO0L,MAC5DyC,YAAY,IAiBhB,cAAC,KAAD,CAAM1M,MAAM,cAAcjE,UAAWC,KAAEoQ,YAAvC,SAAqD3D,GAAY/O,aAAK,OAAC+O,QAAD,IAACA,OAAD,EAACA,EAAU2D,mBC3IpFuY,GAAuB,WAAO,IAAD,QAEhCrN,EADSpV,cACavE,MAAQ,GAC9B4Z,EAAmBvY,YACrBqI,GACA,CACIjF,UAAW,CAACzE,KAAM2Z,GAClBrY,QAAS,CAAClE,QAASZ,KAPW,EAUS+I,aAAoDugB,GAC/F,CAACxkB,QAAS,CAAClE,QAASZ,KAXc,mBAU/B+pB,EAV+B,KAUfU,EAVe,KAahC7hB,EAAWC,cAbqB,EAcRuE,oBAAkB,GAdV,mBAc/BuY,EAd+B,KActBC,EAdsB,OAeAxY,mBAAiB,IAfjB,mBAe/B6E,EAf+B,KAelB4T,EAfkB,KAiBtC5c,qBAAU,WAAO,IAAD,GACZ,UAAImU,EAAiBnY,YAArB,aAAI,EAAuBoY,eACvBuI,EAAWxI,EAAiBnY,KAAKoY,YAAYsI,SAC7CE,EAAezI,EAAiBnY,KAAKoY,YAAYpL,gBAEtD,WAACmL,EAAiBnY,YAAlB,aAAC,EAAuBoY,cAE3B,IAAMpT,EAAQ,yCAAG,WAAO+B,GAAP,gBAAAxF,EAAA,sDAIP0iB,EAAQrG,SAAS7W,EAAO5H,IAC9B2lB,EAAe,CACX9hB,UAAW,CACPgiB,oBAAoB,6BACbje,GADY,IAEf5H,GAAI8kB,EACJvD,QAASA,EACT1T,YAAaA,OAIpB/I,MAAK,kBAAMN,EAAS,SACpBS,OAAM,SAAArE,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAhB3B,2CAAH,sDAmBd,OAAK2Y,GAAgBC,EAAiBpY,MAC3B,cAAC,GAAD,IAEPoY,EAAiBnb,QACV,cAAC,EAAD,IAGP,eAAC,KAAD,CAAMwB,KAAK,iBAAiBwG,SAAUA,EAChCW,cAAe,CACXxG,GAAE,UAAEgZ,EAAiBnY,YAAnB,aAAE,EAAuBoY,YAAYjZ,GACvCX,KAAI,UAAE2Z,EAAiBnY,YAAnB,aAAE,EAAuBoY,YAAY5Z,KACzCwO,YAAW,UAAEmL,EAAiBnY,YAAnB,aAAE,EAAuBoY,YAAYpL,aAJ1D,UAMI,cAAC,KAAKpH,KAAN,CAAWpH,KAAK,KAAK+F,MAAO,CAACyZ,QAAS,QAAtC,SACI,cAAC,KAAD,CAAO7gB,KAAM,aAEjB,cAAC,KAAKyI,KAAN,6BACQoX,IADR,IAEIxe,KAAK,UACL8U,MAAM,WAHV,SAKI,cAAC,KAAD,CAAQxW,KAAM,QAASolB,QAASxB,EAAS1U,SAAU2U,OAEvD,cAAC,KAAK/a,KAAN,6BACQoX,IADR,IAEIxe,KAAK,OACL8U,MAAM,OACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,8BAPrB,SAWI,cAAC,KAAD,CAAO2G,YAAY,YAEvB,cAAC,KAAKN,KAAN,6BACQoX,IADR,IAEI1J,MAAO,cAFX,SAII,cAAC,GAAD,CAAepQ,KAAM8J,EAAawS,QAASoB,OAE/C,cAAC,KAAKhb,KAAN,UACI,cAAC,KAAD,CAAQzI,KAAK,UAAUsJ,SAAU,SACzBzJ,QAASmb,EAAiBnb,SAAWwoB,EAAqBxoB,QADlE,0BC1FHqb,GAA2B,WACpC,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOhR,KAAM,IAAKC,QAAS,cAAC,GAAD,MAC3B,cAAC,IAAD,CAAOD,KAAM,SAAUC,QAAS,cAAC,GAAD,MAChC,cAAC,IAAD,CAAOD,KAAM,SAAUC,QAAS,cAAC,GAAD,MAChC,cAAC,IAAD,CAAOD,KAAM,eAAgBC,QAAS,cAAC,GAAD,MACtC,cAAC,IAAD,CAAOD,KAAM,IAAKC,QAAS,cAAC,GAAD,UCD1Bme,GAAuB3qB,YAAH,wLAmCpB4qB,IApBuB5qB,YAAH,sVAoBGA,YAAH,wGCrC3B6qB,GAA0C,SAAC,GAA8C,IAA7ChnB,EAA4C,EAA5CA,KAAMinB,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,cAUvE,OACI,qCACI,cAAC,KAAD,CAAOnd,MAAOkd,EAAWD,GAAOG,QAAS/Z,SAXzB,SAACb,GACrB,IAAM6a,EAAgBH,EAAW9nB,KAAI,SAACmB,EAAUkN,GAC5C,OAAIA,IAAMwZ,EACE,CAACK,aAActnB,EAAKH,KAAMunB,QAAS5a,EAAEkD,OAAO1F,OACjDzJ,KAEX4mB,EAAcE,MAM4B,KAArCH,EAAWD,GAAOG,QAAQjT,QAC3B,qBAAKnW,UAAW,eAAhB,4CAaCupB,GAA+B,SAAC,GAA2D,IAA1DlpB,EAAyD,EAAzDA,QAAS0B,EAAgD,EAAhDA,MAAOygB,EAAyC,EAAzCA,SAAU0G,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,cAS1E1Y,EAAU,CACZ,CACIxM,MAAO,QACPyM,UAAW,QACXlB,IAAK,QACL2C,OAAQ,SAAC5L,EAAWvE,GAChB,IAAMwnB,EAAQxnB,EAAKxB,KAAK0M,MAAM,SAC9B,OACI,cAAC,KAAD,CAAQ/K,MAAO,SAAUhC,KAAM,GACvBiC,IAAKonB,GAASA,EAAM9b,OAAS+b,IAAIC,gBAAgB1nB,GAAQ,oEACzDM,IAAKN,EAAKH,SAK9B,CACIoC,MAAO,OACPyM,UAAW,OACXlB,IAAK,OACL2C,OAAQ,SAAC5L,EAAWvE,GAAZ,OAA2B,cAAC,GAAD,CAAgBA,KAAMA,EAAMinB,MAAOlnB,EAAM4nB,QAAQ3nB,GACjCknB,WAAYA,EAAYC,cAAeA,MAE9F,CACIllB,MAAO,OACPyM,UAAW,OACXlB,IAAK,QAET,CACIvL,MAAO,UACPyM,UAAW,UACXlB,IAAK,UACL2C,OAAQ,SAAC5L,EAAWvE,GAAZ,OACJ,cAAC,GAAD,CAAYoP,SAAU,kBAvCP,SAACqR,EAAkBwG,GAC1C,IAAMvG,EAAW3gB,EAAMV,QAAO,SAAAW,GAAI,OAAIA,IAASygB,KAC/CD,EAASE,GACT,IAAM2G,EAAgBH,EAAW7nB,QAAO,SAACkB,EAAUkN,GAAX,OAAiBA,IAAMwZ,KAC/DE,EAAcE,GAmCsB1G,CAAmB3gB,EAAMD,EAAM4nB,QAAQ3nB,UAK/E,OACI,cAAC,KAAD,CAAOyO,QAASA,EAASF,WAAYxO,EAAO4O,YAAY,EAAOtQ,QAASA,K,qBCnFnEupB,GAAW,SACb7nB,EAAemnB,GAClB,IAAIW,EAAW,IAAIC,SAInB,OAHA/nB,EAAMjB,SAAQ,SAACkB,EAAMyN,GACjBoa,EAASE,OAAO,UAAW/nB,EAAMknB,EAAWzZ,GAAG2Z,YAE5CvrB,EAAS+V,KAAmB,eAAgBiW,EAAU,CACzD7rB,QAAS,CAAC,eAAgB,yBAC3BsJ,MAAK,SAAAuM,GAAG,OAAIA,EAAIxQ,SCPvBjD,GAAe,CACfC,SAAS,EACT2pB,cAAe,IAoBNzpB,GACG,SAACF,GAAD,MAAuB,CAC/BG,KAAM,cACNH,YAHKE,GAKS,SAACypB,GAAD,MAAgC,CAC9CxpB,KAAM,qBACNwpB,kBAIKC,GAAS,SAACloB,EAAemnB,GAAhB,gDAAsD,WAAO3nB,GAAP,gBAAAqD,EAAA,6DACxErD,EAAShB,IAAmB,IAD4C,SAEvDqpB,GAAgB7nB,EAAOmnB,GAFgC,QAGpD,KADhB7lB,EAFoE,QAG/D6mB,QACL3oB,EAAShB,GAAyB8C,EAAKtB,QAE3CR,EAAShB,IAAmB,IAN4C,2CAAtD,uDASP4pB,GArCM,WAAkE,IAAjEvpB,EAAgE,uDAAxDR,GAAcS,EAA0C,uCAClF,OAAQA,EAAOL,MACX,IAAK,cACD,OAAO,6BACAI,GADP,IAEIP,QAASQ,EAAOR,UAExB,IAAK,qBACD,OAAO,6BACAO,GADP,IAEIopB,cAAenpB,EAAOmpB,gBAE9B,QACI,OAAOppB,ICpBNwpB,GAAe,SAACxpB,GACzB,OAAOA,EAAMmB,MAAM1B,SAGVgqB,GAAqB,SAACzpB,GAC/B,OAAOA,EAAMmB,MAAMioB,eCOVM,GAAkB,WAAO,IAAD,EACOnjB,aAA4C2hB,GAAsB,CAAC5lB,QAAS,CAAClE,QAASZ,KAD7F,mBAC1BmsB,EAD0B,KACdC,EADc,KAE3BjpB,EAAWC,eACXwF,EAAWC,cAHgB,EAIPuE,mBAAS,IAJF,mBAI1BzJ,EAJ0B,KAInBygB,EAJmB,OAKGhX,mBAAS,IALZ,mBAK1B0d,EAL0B,KAKdC,EALc,KAM3Ba,EAAgBrkB,aAAY0kB,IAC5BI,EAAgB9kB,aAAYykB,IAElC/iB,qBAAU,WACF2iB,EAActc,SACdsc,EAAclpB,QAAd,yCAAsB,WAAOkB,GAAP,kBAAA4C,EAAA,6DAClB8C,QAAQC,IAAI,gBAAiB3F,GADX,SAEKuoB,EAAW,CAC9BlkB,UAAW,CAACqkB,gBAAgB,gBAAK1oB,MAHnB,QAEZuF,EAFY,QAKLoB,SACT,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,aANxC,2CAAtB,uDASArB,EAAShB,GAAyB,KAClCyG,EAAS,SAEd,CAACgjB,IAEJ,IAAM3hB,EAAQ,yCAAG,uBAAAzD,EAAA,sDACT7C,EAAM2L,QACNnM,EAAS0oB,GAAOloB,EAAOmnB,IAFd,2CAAH,qDAcd,OACI,eAAC,KAAD,CAAMrnB,KAAK,aAAawG,SAAUA,EAAlC,UACI,eAAC,KAAKY,KAAN,WACI,uBAAOzI,KAAK,OAAOgC,GAAG,OAAOmoB,UAAQ,EAAC/iB,MAAO,CAACyZ,QAAS,QAAShS,SAXlD,SAACb,GAAsC,IAAD,EAC5D,aAAIA,EAAEkD,OAAO3P,aAAb,aAAI,EAAgB2L,OAAQ,CACxB,IAAMgV,EAAWkI,MAAMC,KAAKrc,EAAEkD,OAAO3P,OACrConB,EAAc,GAAD,oBAAKD,GAAL,aAAoBxG,EAASthB,KAAI,SAAAY,GAAI,MAAK,CAAConB,QAASpnB,EAAKH,KAAMynB,aAActnB,EAAKH,YAC/F2gB,EAAS,GAAD,oBAAKzgB,GAAL,aAAe2gB,SAQnB,uBAAO1iB,UAAWC,KAAE6qB,UAAWC,QAAQ,OAAvC,SACI,cAAC,KAAD,CAAQxZ,KAAM,cAACkB,GAAA,EAAD,WAIrB1Q,EAAM2L,OAAS,GACZ,qCACI,cAAC,KAAKzE,KAAN,UACI,cAAC,GAAD,CAAa5I,QAASmqB,EAAkBnqB,SAAWoqB,EAAe1oB,MAAOA,EAC5DygB,SAAUA,EAAU0G,WAAYA,EAAYC,cAAeA,MAG5E,cAAC,KAAKlgB,KAAN,UACI,cAAC,KAAD,CAAQzI,KAAK,UAAUsJ,SAAU,SAAUzJ,QAASmqB,EAAkBnqB,SAAWoqB,EAAjF,6BCvDXO,GAAiB,WAAO,IAAD,MACAxf,mBAAS,IADT,mBACzBC,EADyB,aAEAD,mBAAS,IAFT,mBAEzBE,EAFyB,KAEfkC,EAFe,KAG1B+V,EAAgB1gB,YAClBmf,GACA,CACI/b,UAAW,CACPwe,cAAe,CACX/Y,KAAMJ,EACNG,KAAMJ,EACNqZ,aAAc,GACdC,aAAc,KAGtB7hB,QAAS,CAAClE,QAASZ,KAdK,EAiBQ+I,aAA4C4hB,GAAsB,CAAC7lB,QAAS,CAAClE,QAASZ,KAjB9F,mBAiBzB6sB,EAjByB,KAiBbC,EAjBa,OAkBU1f,mBAAqB,IAlB/B,mBAkBV2f,GAlBU,WAmB1BC,EAAgBzlB,aAAYykB,IAC5B7oB,EAAWC,eApBe,EAqBYgK,mBAAiB,IArB7B,mBAqBzB6f,EArByB,KAqBTC,EArBS,KAuB1Bla,EAAQ,yCAAG,WAAO5O,GAAP,kBAAAoC,EAAA,sEACUqmB,EAAW,CAAC5kB,UAAW,CAAC7D,GAAIA,KADtC,YACP+E,EADO,QAEAlE,MAASkE,EAASoB,OAFlB,wBAGTpH,EAAShB,IAAmB,IAHnB,SAIHojB,EAAc3U,QAAQ,CACxB6V,cAAe,CACX/Y,KAAMJ,EACNG,KAAMJ,EACNqZ,aAAcuG,EACdtG,aAAc,MATb,OAYTxjB,EAAShB,IAAmB,IAZnB,wBAcT,UAAAgH,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAd7C,4CAAH,sDAkBR2jB,EAAe,CACjBlX,SAAU,SAACmX,EAA8BC,GACrC/e,QAAQC,IAAR,2BAAgC6e,GAAmB,iBAAkBC,GACrE0E,EAAiB1E,KAInBhW,EAAU,CACZ,CACIxM,MAAO,QACPyM,UAAW,QACXlB,IAAK,QACL2C,OAAQ,SAAC5L,EAAWvE,GAAZ,OACJ,cAAC,KAAD,CAAQ7B,KAAM,GAAIgC,MAAO,SAAUC,IAAKJ,EAAKK,cAGrD,CACI4B,MAAO,gBACPyM,UAAW,eACXlB,IAAK,gBAET,CACIvL,MAAO,YACPyM,UAAW,WACXlB,IAAK,YAET,CACIvL,MAAO,WACPyM,UAAW,WACXlB,IAAK,YAET,CACIvL,MAAO,OACPyM,UAAW,OACXlB,IAAK,QAET,CACIvL,MAAO,UACPyM,UAAW,OACXlB,IAAK,OACL2C,OAAQ,SAAC5L,EAAWvE,GAAZ,OACJ,cAAC,GAAD,CAAYoP,SAAU,kBAAMA,EAASpP,EAAKQ,KAAKsO,SAAU9O,EAAKyiB,cAKpE5X,EAAQ,yCAAG,WAAOb,GAAP,UAAApH,EAAA,6DACO,EACpBgJ,EADoB,GAEpB0d,EAAkBtf,GAHL,SAIP2X,EAAc3U,QAAQ,CACxB6V,cAAe,CACX/Y,KALY,EAMZD,KAAMJ,EACNqZ,aAAc9Y,EACd+Y,aAAc,MATT,2CAAH,sDAeRG,EAAkB7O,sBAAYC,MAAS,SAAAC,GAAS,OAAI1J,EAAS0J,KAAY,KAAM,IAOrF,OAJIoN,EAAcvgB,OACdR,IAAQQ,MAAMugB,EAAcvgB,MAAMR,SAIlC,qCACI,sBAAK5C,UAAU,gBAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,2CACA,cAAC,KAAD,CAAM2B,GAAI,SAAV,SACI,cAAC,KAAD,0BAGR,cAACoL,GAAA,EAAD,CAAQxD,YAAY,SAAS8F,SAfpB,SAACb,GAAD,OAAsC0W,EAAgB1W,EAAEkD,OAAO1F,QAenBiL,aAAW,EAACjX,UAAU,SACnEK,QAASsjB,EAActjB,aAEnC,cAAC,KAAD,IACA,8BACI,cAAC,KAAD,CACIA,QAASsjB,EAActjB,SAAW6qB,EAAkB7qB,SAAW+qB,EAC/D7E,aAAY,gBAAMA,GAClB9V,QAASA,EACTF,WAAU,UAAEoT,EAActgB,YAAhB,aAAE,EAAoB2hB,SAASjjB,MACzC4Q,OAAQ,KACRhC,WAAY,CACRxC,MAAK,UAAEwV,EAActgB,YAAhB,aAAE,EAAoB2hB,SAAS7W,MACpCkB,SAAS,WAAD,8BAAE,WAAOgM,GAAP,gBAAAzW,EAAA,6DAENgJ,EADMlC,GAAY2P,EAAa,GAAK5P,GAD9B,SAGAkY,EAAc3U,QAAQ,CACxB6V,cAAe,CACX/Y,KAAMJ,EACNG,KAAMJ,EACNqZ,aAAcuG,EACdtG,aAAc,MARhB,2CAAF,mDAAC,Y,qBCzIpBwG,GAAkB,WAC3B,IAAMxkB,EAASZ,cAOEc,cAEjB,IAAKF,EAAOvE,GACR,OAAO,cAAC,GAAD,IAQX,IAAM6F,EAAQ,yCAAG,WAAO+B,GAAP,UAAAxF,EAAA,sDACb8C,QAAQC,IAAI,4BAA6ByC,GAD5B,2CAAH,sDAUd,OACI,eAAC,KAAD,CAAMvI,KAAK,gBAAgBwG,SAAUA,EAArC,UAGI,cAAC,KAAKY,KAAN,CAAWpH,KAAK,KAAK7B,UAAWC,KAAEurB,QAAlC,SACI,cAAC,KAAD,CAAOhrB,KAAM,SAAUR,UAAWC,KAAEurB,YAExC,cAAC,KAAKviB,KAAN,CACIpH,KAAK,OACL8U,MAAM,OACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,8BANrB,SAUI,cAAC,KAAD,CAAO2G,YAAY,mBAEvB,cAAC,KAAKN,KAAN,UACI,cAAC,KAAD,CAAQzI,KAAK,UAAUsJ,SAAU,SAAjC,0B,qBC/CT2hB,GAAQC,KAARD,KAEME,GAAgB,WAAO,IAAD,YACzB5kB,EAASZ,cAETylB,GADS7kB,EAAOvE,IAAKye,SAASla,EAAOvE,IACtBS,YACjBof,GACA,CACIhc,UAAW,CAAC7D,GAAIuE,EAAOvE,GAAKye,SAASla,EAAOvE,IAAM,GAClDU,QAAS,CAAClE,QAASZ,MAI3B,OAAK2I,EAAOvE,GAGRopB,EAAavrB,QACN,cAAC,EAAD,KAEPurB,EAAaxoB,OACbR,IAAQQ,MAAMwoB,EAAaxoB,OAI3B,qCACI,cAAC,KAAD,CACIpD,UAAWC,KAAEmQ,KACbyb,MACI,cAAC,KAAD,CACI1pB,MAAO,SACPhC,KAAM,IACNiC,IAAG,UAAEwpB,EAAavoB,YAAf,aAAE,EAAmByoB,QAAQrH,WAGxClkB,QAAS,CACL,cAAC,KAAD,CAAMoB,GAAE,8BAAeiqB,EAAavoB,YAA5B,aAAe,EAAmByoB,QAAQtpB,IAAMxC,UAAW,eAAnE,SACI,cAAC,KAAD,CAAQG,KAAM,GAAIoR,KAAM,cAACK,GAAA,EAAD,QAE5B,cAAC,KAAD,CAAMjQ,GAAE,8BAAeiqB,EAAavoB,YAA5B,aAAe,EAAmByoB,QAAQtpB,IAAMxC,UAAW,eAAnE,SACI,cAAC,KAAD,CAAQG,KAAM,GAAIoR,KAAM,cAACU,GAAA,EAAD,SAdpC,SAkBI,cAACwZ,GAAD,CACIxnB,MAAK,UAAE2nB,EAAavoB,YAAf,aAAE,EAAmByoB,QAAQxC,aAClCjZ,YACI,qCACI,mDAAYub,EAAavoB,YAAzB,aAAY,EAAmByoB,QAAQ3rB,QACvC,uDAAgByrB,EAAavoB,YAA7B,aAAgB,EAAmByoB,QAAQC,mBAxB/D,QAVO,cAAC,GAAD,KCjBFC,GAAsB,WAC/B,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOthB,KAAM,IAAKC,QAAS,cAAC,GAAD,MAC3B,cAAC,IAAD,CAAOD,KAAM,MAAOC,QAAS,cAAC,GAAD,MAC7B,cAAC,IAAD,CAAOD,KAAM,SAAUC,QAAS,cAAC,GAAD,MAChC,cAAC,IAAD,CAAOD,KAAM,aAAcC,QAAS,cAAC,GAAD,MACpC,cAAC,IAAD,CAAOD,KAAM,IAAKC,QAAS,cAAC,GAAD,UCb1BshB,GAAW,WACpB,OACI,4CCSKC,GAAuB/tB,YAAH,sRAoBpBguB,GAAuBhuB,YAAH,sRAsBpBiuB,GAAwBjuB,YAAH,8RAkBrBkuB,GAAuBluB,YAAH,gH,8BCjDpBmuB,GAAiB,WAAO,IAAD,EAC1B5mB,EAAgBzC,YAAqCwB,IAD3B,EAEN+G,mBAAiB,IAFX,mBAEzB3F,EAFyB,KAElB0mB,EAFkB,OAGQplB,aAA4CklB,GAAsB,CAACnpB,QAAS,CAAClE,QAASZ,KAH9F,mBAGzBouB,EAHyB,KAGbC,EAHa,OAIQtlB,aAA4CglB,GAAsB,CAACjpB,QAAS,CAAClE,QAASZ,KAJ9F,mBAIzBsuB,EAJyB,KAIbC,EAJa,OAKUxlB,aAA8CilB,GAAuB,CAAClpB,QAAS,CAAClE,QAASZ,KALnG,mBAKzBwuB,EALyB,KAKZC,EALY,OAMUrhB,mBAAiB,IAN3B,mBAMVshB,GANU,WAQhCzlB,qBAAU,WAAO,IAAD,GACZ,UAAI3B,EAAcrC,YAAlB,aAAI,EAAoByC,WACpBymB,EAAS7mB,EAAcrC,KAAKyC,YACjC,WAACJ,EAAcrC,YAAf,aAAC,EAAoByC,WAExB,IAAMsL,EAAQ,yCAAG,WAAOxP,GAAP,kBAAAgD,EAAA,sEACU4nB,EAAW,CAACnmB,UAAW,CAACzE,KAAMA,KADxC,YACP2F,EADO,QAEAlE,KAFA,gCAGHqC,EAAcsJ,UAHX,6BAKT,UAAAzH,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAL7C,2CAAH,sDASR2jB,EAAe,CACjBlX,SAAU,SAACmX,EAA8BC,GACrC/e,QAAQC,IAAR,2BAAgC6e,GAAmB,iBAAkBC,GACrEqG,EAAiBrG,KAInBC,EAAoB,yCAAG,WAAO3gB,EAAY4gB,GAAnB,oBAAA/hB,EAAA,6DACDmB,EAAjBnE,MAASglB,EADS,aACD7gB,EADC,WAEpBge,QAAU4C,EAFU,SAGF+F,EAAW,CAC9BrmB,UAAW,CACP0mB,gBAAgB,gBACTnG,MANU,QAGnBrf,EAHmB,QAUXoB,OAIVpB,EAASoB,OAAO7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,aAH/CoqB,EAAWnnB,EAAMzE,KAAI,SAAA2E,GAAI,aAAKA,EAAKvD,KAAL,UAAW+E,EAASlE,YAApB,aAAW,EAAeqpB,WAAWlqB,IAAK+E,EAASlE,KAAKqpB,WAAa3mB,KACzGwmB,EAASS,IAZY,2CAAH,wDAkBpBC,EAAaC,cAAe,kBAAM,cAACC,GAAA,EAAD,CAAcvlB,MAAO,CAACwlB,OAAQ,OAAQld,MAAO,aAC/EO,EAAU,CACZ,CACIxM,MAAO,OACPyM,UAAW,OACX7I,MAAO,GACP7H,UAAW,eACXmS,OAAQ,kBACJ,qBAAKvK,MAAO,CAACyZ,QAAS,OAAQgM,eAAgB,SAAUC,WAAY,UAApE,SACI,cAACL,EAAD,QAIZ,CACIhpB,MAAO,KACPyM,UAAW,KACXlB,IAAK,KACL2C,OAAQ,SAAC5L,EAAWR,GAAZ,OAA2B,yCAAIA,EAAKvD,QAEhD,CACIyB,MAAO,WACPyM,UAAW,UACXlB,IAAK,UACL2C,OAAQ,SAAC5L,EAAWR,GAAZ,OACJ,cAAC,KAAD,CAAQ5F,KAAM,QAASolB,QAASxf,EAAKge,QAC7B1U,SAAU,SAACsX,GAAD,OAAUD,EAAqB3gB,EAAM4gB,QAG/D,CACI1iB,MAAO,OACPyM,UAAW,OACXlB,IAAK,QAET,CACIvL,MAAO,UACPyM,UAAW,UACXlB,IAAK,UACL2C,OAAQ,SAAC5L,EAAWR,GAAZ,OACJ,cAAC,GAAD,CAAYgL,QAAO,UAAKhL,EAAKnE,MAAQoP,UAAS,iBAAYjL,EAAKnE,MACnDwP,SAAU,kBAAMA,EAASrL,EAAKnE,YAKhD2rB,EAAeC,cAAgB,SAACC,GAAD,OAAgB,mCAAQA,OACvDC,EAA2BC,cAAkB,SAACF,GAAD,OAAgB,sCAAWA,OAGxEG,EAAS,yCAAG,WAAOH,GAAP,sBAAA7oB,EAAA,yDACV6oB,EAAMI,WAAaJ,EAAMK,SADf,uBAEJC,EAAcC,aAAmB,GAAGC,OAAOpoB,GAAe4nB,EAAMI,SAAUJ,EAAMK,UACjFzsB,QAAO,SAAA6sB,GAAE,QAAMA,KACf9sB,KAAI,SAAC2E,EAAY0J,GAAb,oBAAC,gBACC1J,GADF,IAEDooB,QAAS1e,EAAI,OAErB8c,EAASwB,GACHK,EAAyBL,EAAY3sB,KAAI,SAAA2E,GACnBA,EAAjBnE,KACP,OAFmD,aAC3BmE,EAD2B,aAT7C,SAaa6mB,EAAY,CAC/BvmB,UAAW,CACPgoB,iBAAkB,CACdA,iBAAkBD,MAhBpB,QAaJ7mB,EAbI,QAoBIoB,OAIV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,aAHtD8E,QAAQC,IAAI,iBAAkBomB,GAC9BxmB,EAASlE,MAAQkpB,EAAShlB,EAASlE,KAAKupB,cAtBlC,2CAAH,sDA6Cf,OAAIlnB,EAAcrF,QACP,cAAC,EAAD,KAEPqF,EAActC,OACdsE,QAAQC,IAAIjC,EAActC,OAG1B,qCACI,qBAAKpD,UAAU,gBAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,2CACA,cAAC,KAAD,CAAM2B,GAAI,SAAV,SACI,cAAC,KAAD,4BAIZ,cAAC,KAAD,IACA,8BACI,cAAC,KAAD,CACItB,QAASqF,EAAcrF,SAAWosB,EAAkBpsB,SAAWssB,EAAkBtsB,SAAWwsB,EAAmBxsB,QAC/GkmB,aAAY,gBAAMA,GAClB9V,QAASA,EACTF,WAAY1K,EACZ8K,YAAY,EACZgC,OAAO,KACP2b,WAAY,CACRC,KAAM,CACFC,QA3CG,SAACf,GAAD,OACvB,cAACC,EAAD,cACIe,eAAa,EACbC,mBAAiB,EACjBC,YAAY,eACZf,UAAWA,GACPH,KAsCYmB,IAlCC,SAACnB,GACmBA,EAAlCztB,UAAkCytB,EAAvB7lB,MADoB,IACVinB,EADS,aACIpB,EADJ,uBAE/BxE,EAAQpjB,EAAMipB,WAAU,SAAAC,GAAC,OAAIA,EAAEvsB,KAAOqsB,EAAU,mBACtD,OAAO,cAACtB,EAAD,cAActE,MAAOA,GAAW4F,gBCxJlCG,GAAkB,WAAO,IAAD,EACM7nB,aAA4C+kB,GAAsB,CAAChpB,QAAS,CAAClE,QAASZ,KAD5F,mBAC1B6wB,EAD0B,KACdC,EADc,KAE3BloB,EAAWC,cAFgB,EAGHuE,oBAAkB,GAHf,mBAG1BuY,EAH0B,KAGjBC,EAHiB,OAITxY,mBAAiB,IAJR,mBAI1BjF,EAJ0B,KAIpBsc,EAJoB,KAM3Bxa,EAAQ,yCAAG,WAAO+B,GAAP,UAAAxF,EAAA,sDAGbqqB,EAAW,CACP5oB,UAAW,CACP8oB,gBAAgB,6BACT/kB,GADQ,IAEX2Z,QAASA,EACTxd,KAAMA,OAIbe,MAAK,kBAAMN,EAAS,SACpBS,OAAM,SAAArE,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAb3B,2CAAH,sDAgBd,OACI,eAAC,KAAD,2BACIf,KAAK,aACLwG,SAAUA,GACNgY,IAHR,cAKI,cAAC,KAAKpX,KAAN,CACIpH,KAAK,UACL8U,MAAM,WAFV,SAII,cAAC,KAAD,CAAQxW,KAAM,QAASolB,QAASxB,EAAS1U,SAAU2U,MAEvD,cAAC,KAAK/a,KAAN,CACIpH,KAAK,OACL8U,MAAM,OACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,8BANrB,SAUI,cAAC,KAAD,CAAO2G,YAAY,WAEvB,cAAC,KAAKN,KAAN,CAAW0N,MAAO,OAAlB,SACI,cAAC,GAAD,CAAepQ,KAAMA,EAAMsc,QAASA,MAExC,cAAC,KAAK5Z,KAAN,UACI,cAAC,KAAD,CAAQzI,KAAK,UAAUsJ,SAAU,SAAUzJ,QAAS6uB,EAAiB7uB,QAArE,2BC/CH+uB,GAAkB,WAAO,IAAD,QAE3BlpB,EADSC,cACSvE,MAAQ,GAC1BwE,EAAenD,YACjB+C,GACA,CACIK,UAAW,CAACzE,KAAMsE,GAClBhD,QAAS,CAAClE,QAASZ,KAPM,EAUuB+I,aAA4CglB,GAChG,CAACjpB,QAAS,CAAClE,QAASZ,KAXS,mBAU1BixB,EAV0B,KAUNC,EAVM,KAa3BtoB,EAAWC,cAbgB,EAcHuE,oBAAkB,GAdf,mBAc1BuY,EAd0B,KAcjBC,EAdiB,OAeTxY,mBAAiB,IAfR,mBAe1BjF,EAf0B,KAepBsc,EAfoB,KAiBjCxb,qBAAU,WAAO,IAAD,GACZ,UAAIjB,EAAa/C,YAAjB,aAAI,EAAmBiD,WACnB0d,EAAW5d,EAAa/C,KAAKiD,QAAQyd,SACrClB,EAAQzc,EAAa/C,KAAKiD,QAAQC,SAEvC,WAACH,EAAa/C,YAAd,aAAC,EAAmBiD,UAEvB,IAAM+B,EAAQ,yCAAG,WAAO+B,GAAP,kBAAAxF,EAAA,sDAKP0iB,EAAQrG,SAAS7W,EAAO5H,IACxB+sB,EAAatO,SAAS7W,EAAO+jB,SACnCkB,EAAmB,CACfhpB,UAAW,CACP0mB,gBAAgB,6BACT3iB,GADQ,IAEX5H,GAAI8kB,EACJ6G,QAASoB,EACTxL,QAASA,EACTxd,KAAMA,OAIbe,MAAK,kBAAMN,EAAS,SACpBS,OAAM,SAAArE,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAnB3B,2CAAH,sDAsBd,OAAKsD,GAAYE,EAAahD,MACnB,cAAC,GAAD,IAEPgD,EAAa/F,QACN,cAAC,EAAD,IAGP,eAAC,KAAD,2BAAMwB,KAAK,gBACLwG,SAAUA,EACVW,cAAe,CACXxG,GAAE,UAAE4D,EAAa/C,YAAf,aAAE,EAAmBiD,QAAQ9D,GAC/BX,KAAI,UAAEuE,EAAa/C,YAAf,aAAE,EAAmBiD,QAAQzE,KACjCssB,QAAO,UAAE/nB,EAAa/C,YAAf,aAAE,EAAmBiD,QAAQ6nB,UAEpC9N,IAPV,cASI,cAAC,KAAKpX,KAAN,CAAWpH,KAAK,KAAK+F,MAAO,CAACyZ,QAAS,QAAtC,SACI,cAAC,KAAD,CAAO7gB,KAAM,aAEjB,cAAC,KAAKyI,KAAN,CAAWpH,KAAK,UAAU+F,MAAO,CAACyZ,QAAS,QAA3C,SACI,cAAC,KAAD,CAAO7gB,KAAM,aAEjB,cAAC,KAAKyI,KAAN,CACI0N,MAAM,WADV,SAGI,cAAC,KAAD,CAAQxW,KAAM,QAASolB,QAASxB,EAAS1U,SAAU2U,MAEvD,cAAC,KAAK/a,KAAN,CACIpH,KAAK,OACL8U,MAAM,OACNzN,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,2BANrB,SAUI,cAAC,KAAD,CAAO2G,YAAY,WAEvB,cAAC,KAAKN,KAAN,CAAW0N,MAAO,OAAlB,SACI,cAAC,GAAD,CAAepQ,KAAMA,EAAMsc,QAASA,MAExC,cAAC,KAAK5Z,KAAN,UACI,cAAC,KAAD,CAAQzI,KAAK,UAAUsJ,SAAU,SACzBzJ,QAAS+F,EAAa/F,SAAWivB,EAA0BjvB,QADnE,2B,qBCxFH4F,GAAgB,WAAO,IAAD,EAEzBC,EADSC,cACSvE,MAAQ,GAC1BwE,EAAenD,YACjB+C,GACA,CACIK,UAAW,CAACzE,KAAMsE,GAClBhD,QAAS,CAAClE,QAASZ,KAPI,EAUS+I,aAA4CklB,GAAsB,CAACnpB,QAAS,CAAClE,QAASZ,KAV/F,mBAUxBouB,EAVwB,KAWzBxlB,GAXyB,KAWdC,eAEXmK,EAAQ,yCAAG,WAAOxP,GAAP,kBAAAgD,EAAA,sEACU4nB,EAAW,CAACnmB,UAAW,CAACzE,KAAMA,KADxC,QACP2F,EADO,QAEAlE,KACT2D,EAAS,OAET,UAAAO,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAL7C,2CAAH,sDASd,IAAKsD,GAAYE,EAAahD,MAC1B,OAAO,cAAC,GAAD,IAEX,GAAIgD,EAAa/F,QACb,OAAO,cAAC,EAAD,IAEX,IAAM0F,EAAI,UAAGK,EAAa/C,YAAhB,aAAG,EAAmBiD,QAChC,OACI,qCACI,qBAAKtG,UAAWC,KAAE8P,kBAAlB,SAEI,gCACI,cAAC,GAAD,CAAYiB,UAAS,oBAAe9K,GAAYkL,SAAU,kBAAMA,EAASlL,MACzE,wCAASH,QAAT,IAASA,OAAT,EAASA,EAAMlE,OACf,uBAAO7B,UAAWC,KAAEuvB,KAApB,SACI,kCACA,+BACI,qCACA,6BACI,6CAASzpB,QAAT,IAASA,OAAT,EAASA,EAAMvD,WAGvB,+BACI,2CACA,8BACS,OAAJuD,QAAI,IAAJA,OAAA,EAAAA,EAAMge,SACD,cAAC,KAAD,CAAK7T,MAAM,QAAX,iBACA,cAAC,KAAD,CAAKA,MAAM,MAAX,+BAQ1B,cAAC,KAAD,CAAMjM,MAAM,OAAOjE,UAAWC,KAAEmQ,KAAhC,SAAuCrK,GAAQpI,aAAK,OAACoI,QAAD,IAACA,OAAD,EAACA,EAAMQ,YC9D1DkpB,GAAsB,WAC/B,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAO/kB,KAAM,IAAKC,QAAS,cAAC,GAAD,MAC3B,cAAC,IAAD,CAAOD,KAAM,QAASC,QAAS,cAAC,GAAD,MAC/B,cAAC,IAAD,CAAOD,KAAM,SAAUC,QAAS,cAAC,GAAD,MAChC,cAAC,IAAD,CAAOD,KAAM,eAAgBC,QAAS,cAAC,GAAD,MACtC,cAAC,IAAD,CAAOD,KAAM,IAAKC,QAAS,cAAC,GAAD,UCU1B0J,GAAwBlW,YAAH,0rDAuErBuxB,GAAwBvxB,YAAH,0rDAoErBwxB,GAAwBxxB,YAAH,4G,qBCrJrByxB,GAAkB,WAAO,IAAD,MACDpkB,mBAAS,IADR,mBAC1BC,EAD0B,aAEDD,mBAAS,IAFR,mBAE1BE,EAF0B,KAEhBkC,EAFgB,OAGGpC,mBAAS,IAHZ,mBAG1B6T,EAH0B,KAGdC,EAHc,OAIK9T,mBAAmCtG,IAJxC,mBAI1ByS,EAJ0B,KAIbkY,EAJa,KAK3BpR,EAAiBxb,YACnBmb,GACA,CACI/X,UAAW,CACPoR,eAAgB,CACZ3L,KAAMJ,EACNG,KAAMJ,EACNiM,KAAM2H,EACN1H,YAAaA,IAAgBzS,GAAM,KAAOyS,IAGlDzU,QAAS,CAAClE,QAASZ,KAhBM,EAmBS+I,aAA8CwoB,GACpF,CAACzsB,QAAS,CAAClE,QAASZ,KApBS,mBAmB1B0xB,EAnB0B,KAmBbC,EAnBa,OAsBavkB,mBAAkB,IAtB/B,mBAsBRwkB,GAtBQ,WAwB3B5e,EAAQ,yCAAG,WAAOmI,GAAP,kBAAA3U,EAAA,sEACUkrB,EAAY,CAACzpB,UAAW,CAAC7D,GAAI+W,KADvC,YACPhS,EADO,QAEAlE,KAFA,gCAGHob,EAAezP,QAAQ,CACzByI,eAAgB,CACZ3L,KAAMJ,EACNG,KAAMJ,EACNiM,KAAM2H,EACN1H,YAAaA,IAAgBzS,GAAM,KAAOyS,KARzC,6BAYT,UAAApQ,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAZ7C,2CAAH,sDAgBR2jB,EAAe,CACjBlX,SAAU,SAACmX,EAA8BC,GACrC/e,QAAQC,IAAR,2BAAgC6e,GAAmB,iBAAkBC,GACrEuJ,EAAkBvJ,KAIpBhW,EAA8B,CAChC,CACIxM,MAAO,KACPyM,UAAW,KACXlB,IAAK,KACL2C,OAAQ,SAAC5L,EAAWwS,GAAZ,OAA6B,yCAAIA,EAAMvW,QAEnD,CACIyB,MAAO,QACPyM,UAAW,QACXlB,IAAK,SAET,CACIvL,MAAO,YACPyM,UAAW,YACXlB,IAAK,aAET,CACIvL,MAAO,WACPyM,UAAW,WACXlB,IAAK,YAET,CACIvL,MAAO,eACPyM,UAAW,cACXlB,IAAK,eAET,CACIvL,MAAO,eACPyM,UAAW,cACXlB,IAAK,cACL2C,OAAQ,SAAC5L,EAAWwS,GAAZ,OAA6B,+BAAO/L,GAAuB+L,EAAMpB,iBAE7E,CACI1T,MAAO,cACPyM,UAAW,aACXlB,IAAK,aACL2C,OAAQ,SAAC5L,EAAWwS,GAAZ,OAA6B,iCAAOA,EAAMzY,WAAb,YAEzC,CACI2D,MAAO,aACPyM,UAAW,YACXlB,IAAK,YACL2C,OAAQ,SAAC5L,EAAWwS,GAAZ,OAA6B,+BAAOvL,GAAkBuL,EAAMC,eAExE,CACI/U,MAAO,UACPyM,UAAW,UACXlB,IAAK,UACL2C,OAAQ,SAAC5L,EAAWwS,GAAZ,OACJ,cAAC,GAAD,CAAYhI,QAAO,UAAKgI,EAAMvW,IAAMwO,UAAS,iBAAY+H,EAAMvW,IACnD4O,SAAU,kBAAMA,EAAS2H,EAAMvW,UAKjDytB,EAAqB,yCAAG,WAAOzhB,GAAP,oBAAA5J,EAAA,6DACN,EACdib,EAAgBrR,EAAEkD,OAAO1F,MAC/B4B,EAFoB,GAGpB0R,EAAcO,GAJY,SAKHpB,EAAezP,QAAQ,CAC1CyI,eAAgB,CACZ3L,KANY,EAOZD,KAAMJ,EACNiM,KAAMmI,EACNlI,YAAaA,IAAgBzS,GAAM,KAAOyS,KAVxB,QAKpBpQ,EALoB,QAaboB,SACT,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,aAdhC,2CAAH,sDAiBrBstB,EAA+B7Z,sBAAYC,MAAS,SAAAC,GAAS,OAAI0Z,EAAsB1Z,KAAY,KAAM,IAGzG4Z,EAAwB,yCAAG,WAAOnkB,GAAP,UAAApH,EAAA,6DACT,EACpBgJ,EADoB,GAEpBiiB,EAAe7jB,GAHc,SAIvByS,EAAezP,QAAQ,CACzByI,eAAgB,CACZ3L,KALY,EAMZD,KAAMJ,EACNiM,KAAM2H,EACN1H,YAAa3L,IAAU9G,GAAM,KAAO8G,KATf,2CAAH,sDAiB9B,OAHIyS,EAAerb,OACfR,IAAQQ,MAAMqb,EAAerb,MAAMR,SAGnC,qCACI,sBAAK5C,UAAU,gBAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,4CACA,cAAC,KAAD,CAAM2B,GAAI,SAAV,SACI,cAAC,KAAD,0BAGR,sBAAK3B,UAAWC,KAAEmwB,QAAlB,UACI,eAAC,KAAD,CAAQhhB,aAAcuI,EAAatI,SAAU8gB,EAA7C,UACI,cAAC,KAAOzgB,OAAR,CAAe1D,MAAO9G,GAAtB,iBACEoK,OAAOC,KAAKtS,GAAiDmE,KAAI,SAACoO,EAAKC,GAAN,OAC/D,cAAC,KAAOC,OAAR,CAAe1D,MAAOwD,EAAtB,SAAoCxC,GAAuBwC,IAA3BC,SAGxC,cAAC1C,GAAA,EAAD,CAAQxD,YAAY,gBAAgBvJ,UAAW,SACvCqP,SApCI,SAACb,GAAD,OAAsC0hB,EAA6B1hB,IAoCxCyI,aAAW,EAC1C5W,QAASoe,EAAepe,gBAGxC,cAAC,KAAD,IACA,8BACI,cAAC,KAAD,CACIA,QAASoe,EAAepe,SAAW0vB,EAAmB1vB,QACtDkmB,aAAY,gBAAMA,GAClB9V,QAASA,EACTF,WAAU,UAAEkO,EAAepb,YAAjB,aAAE,EAAqB0b,UAAUtF,OAC3C9I,WAAY,CACRxC,MAAK,UAAEsQ,EAAepb,YAAjB,aAAE,EAAqB0b,UAAU5Q,MACtCkB,SAAS,WAAD,8BAAE,WAAOgM,GAAP,gBAAAzW,EAAA,6DAENgJ,EADMlC,GAAY2P,EAAa,GAAK5P,GAD9B,SAGAgT,EAAezP,QAAQ,CACzByI,eAAgB,CACZ3L,KAAMJ,EACNG,KAAMJ,EACNiM,KAAM2H,EACN1H,YAAaA,IAAgBzS,GAAM,KAAOyS,KAR5C,2CAAF,mDAAC,IAabhF,OAAQ,a,qBCxLf0d,GAAiB,WAAO,IAAD,EAC1BtpB,EAASZ,cACToT,EAAUxS,EAAOvE,GAAKye,SAASla,EAAOvE,IAAM,EAC5C8tB,EAAgBrtB,YAClBob,GACA,CACIhY,UAAW,CAAC7D,GAAI+W,GAChBrW,QAAS,CAAClE,QAASZ,KAPK,EAUU+I,aAA8CwoB,GACpF,CAACzsB,QAAS,CAAClE,QAASZ,KAXQ,mBAUzB0xB,EAVyB,KAa1B9oB,GAb0B,KAafC,eAEXmK,EAAQ,yCAAG,WAAOmI,GAAP,kBAAA3U,EAAA,sEACUkrB,EAAY,CAACzpB,UAAW,CAAC7D,GAAI+W,KADvC,QACPhS,EADO,QAEAlE,KACT2D,EAAS,OAET,UAAAO,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAL7C,2CAAH,sDASR6N,EAAU,CACZ,CACIxM,MAAO,KACPyM,UAAW,KACXlB,IAAK,KACL2C,OAAQ,SAAC5L,EAAW8S,GAAZ,OAA+C,qCAAQA,EAAe5Y,QAAQ+B,QAE1F,CACIyB,MAAO,QACPyM,UAAW,YACXlB,IAAK,YACL2C,OAAQ,SAAC5L,EAAW8S,GAAZ,OACJ,cAAC,KAAD,CAAUrZ,UAAWC,KAAE6B,SAAvB,SACKuX,EAAe5Y,QAAQsB,MAAMX,KAAI,SAAAY,GAAI,OAClC,cAAC,KAAD,CAAsBhC,UAAWC,KAAEiC,MAAOC,MAAO,SAAUhC,KAAM,GAAIiC,IAAKJ,EAAKK,UACvEC,IAAKN,EAAKO,UADLP,EAAKQ,WAMlC,CACIyB,MAAO,OACPyM,UAAW,OACXlB,IAAK,OACL2C,OAAQ,SAAC5L,EAAW8S,GAAZ,OAA+C,+BAAOA,EAAe5Y,QAAQoB,SAEzF,CACIoC,MAAO,QACPyM,UAAW,QACXlB,IAAK,QACL2C,OAAQ,SAAC5L,EAAW8S,GAAZ,OAA+C,+BAAOA,EAAe5Y,QAAQM,aAEzF,CACIkD,MAAO,WACPyM,UAAW,WACXlB,IAAK,WACL2C,OAAQ,SAAC5L,EAAW8S,GAAZ,OAA+C,+BAAOA,EAAerY,oBAEjF,CACIiD,MAAO,UACPyM,UAAW,UACXlB,IAAK,UACL2C,OAAQ,SAAC5L,EAAW8S,GAAZ,OACJ,cAAC,GAAD,CAAYtI,QAAO,yBAAoBsI,EAAe5Y,QAAQmB,WAK1E,IAAK2X,GAAW+W,EAAcltB,MAC1B,OAAO,cAAC,GAAD,IAEX,GAAIktB,EAAcjwB,QACd,OAAO,cAAC,EAAD,IAEX,IAAM0Y,EAAK,UAAGuX,EAAcjtB,YAAjB,aAAG,EAAoBktB,SAClC,OACI,mCACI,qBAAKvwB,UAAWC,KAAE8P,kBAAlB,SACI,gCACI,cAAC,GAAD,CAAYiB,UAAS,oBAAeuI,GAAWnI,SAAU,kBAAMA,EAASmI,MACxE,8CAAUR,QAAV,IAAUA,OAAV,EAAUA,EAAOvW,MACjB,uBAAOxC,UAAU,YAAjB,SACI,kCACA,+BACI,wCACA,6BACI,sCAAO+Y,QAAP,IAAOA,OAAP,EAAOA,EAAOzQ,aAGtB,+BACI,4CACA,6BACI,sCAAOyQ,QAAP,IAAOA,OAAP,EAAOA,EAAOvC,iBAGtB,+BACI,2CACA,6BACI,sCAAOuC,QAAP,IAAOA,OAAP,EAAOA,EAAOtC,gBAGtB,+BACI,+CACA,6BACI,sCAAOsC,QAAP,IAAOA,OAAP,EAAOA,EAAO5N,mBAGtB,+BACI,0CACA,6BACI,sCAAO4N,QAAP,IAAOA,OAAP,EAAOA,EAAOtD,eAGtB,+BACI,kDACA,6BACI,sCAAOsD,QAAP,IAAOA,OAAP,EAAOA,EAAO9D,sBAGtB,+BACI,+CACA,6BACI,gCAAY,OAAL8D,QAAK,IAALA,OAAA,EAAAA,EAAOpB,cAAe3K,GAAuB+L,EAAMpB,oBAGlE,+BACI,uCACA,6BACI,eAAC,KAAD,CACIhW,GAAE,6BAAiBoX,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAO3T,KAAKkD,OADnC,iBAC6CyQ,QAD7C,IAC6CA,OAD7C,EAC6CA,EAAO3T,KAAKoR,UADzD,WACqEuC,QADrE,IACqEA,OADrE,EACqEA,EAAO3T,KAAKqR,iBAGzF,+BACI,8CACA,6BACI,wCAAOsC,QAAP,IAAOA,OAAP,EAAOA,EAAOzY,WAAd,oBAKVyY,IAAc,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOK,gBAAgB1L,QAAS,GACvC,cAAC,KAAD,CAAO+C,QAASA,EAASF,WAAYwI,EAAMK,gBAAiBzI,YAAY,EACjEgC,OAAQ,eChI1B6d,GAAe,WAAO,IAAD,EACftoB,KAAKC,UAAbC,EADuB,oBAExB7G,EAAWC,eAFa,EAGcgK,mBAAyBxO,EAAegY,WAHtD,mBAGvBC,EAHuB,KAGPC,EAHO,KAIxB/B,EAASxN,aAAYuN,IACrBG,EAAa1N,aAAYyN,IACzBL,EAAgBpN,aAAYkN,IAC5BsC,EAAoBxP,aAAYqN,IAPR,EAQUxH,mBAA2D,MARrE,mBAQvB4J,EARuB,KAQTC,EARS,OAS2BlO,aAA8CkN,GACnG,CAACnR,QAAS,CAAClE,QAASZ,KAVM,mBASvBkX,EATuB,KASFC,EATE,KAYxBhC,EAAc5N,aAAY2N,IAE1BhW,EAAmBqI,aAAYmF,IAdP,EAeAU,mBAA8B,IAf9B,mBAevBoB,EAfuB,KAedkX,EAfc,KAgBxB2M,EAAmBxtB,YAAqDgjB,GAC1E,CAAC/iB,QAAS,CAAClE,QAASZ,KAElB4P,EAAmB/K,YAA2CtD,GAChE,CAACuD,QAAS,CAAClE,QAASZ,KAElB4I,EAAWC,cAEjBI,qBAAU,WAWN,OAVIkM,IACAnL,EAAKM,UAAU,CACX,CACI7G,KAAM,OACN8G,OAAQ,CAAC4K,MAGjBhS,EAAShB,GAAuB,QAG7B,WACHgB,EAAShB,MACTgB,EAASmvB,SAEd,CAACnd,IAEJ,IAAMlL,EAAQ,yCAAG,WAAO+B,GAAP,wBAAAxF,EAAA,6DAKqCwF,EAA3CoL,KAAMR,EAAqC5K,EAArC4K,UAAqC5K,EAA1BqL,QAAYC,EALvB,aAKqCtL,EALrC,gCAMb1C,QAAQC,IAAI,4BAA6ByC,GACrCuL,EAAavL,EAAOqL,QACD,cAAnBR,IACAU,EAAavL,EAAOoL,KAAO,IAAMpL,EAAO4K,WAT/B,SAUUM,EAAoB,CACvCjP,UAAW,CACPuP,iBAAiB,6BACVF,GADS,IAEZD,QAASE,EACTG,iBAAgB,OAAEV,QAAF,IAAEA,OAAF,EAAEA,EAAcpJ,MAChC6J,iBAAgB,OAAET,QAAF,IAAEA,OAAF,EAAEA,EAActB,aAChCiC,kBAAmBf,EACnBgB,qBAAsB1Y,EAAiB8D,KAAI,SAAAV,GAAe,MAAK,CAC3DuV,UAAWvV,EAAgBD,QAAQ+B,GACnCxB,gBAAiBN,EAAgBM,yBApBpC,QAUPuG,EAVO,QAyBCoB,OAIV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,aAHtDA,IAAQC,QAAQ,8BAChBmE,EAAS,QA3BA,2CAAH,sDAiCRkP,EAAmB,yCAAG,WAAOlK,GAAP,UAAApH,EAAA,sDACxBrD,EAAShB,GAAsB,KAC/BgB,EAAShB,GAAkB,KAC3B8U,EAAgB,MAChBjN,EAAKM,UAAU,CAAC,CACZ7G,KAAM,aACNmK,MAAO,MAEM,KAAjBA,EAAMmK,QAAiB5U,EAASwS,GAAW/H,IARnB,2CAAH,sDAWnBoK,EAA6BC,sBAAYC,MAAS,SAAAC,GAAS,OAAIL,EAAoBK,KAAY,KAAM,IAQrGoa,EAAsB,yCAAG,WAAO3kB,GAAP,kBAAApH,EAAA,yDACN,KAAjBoH,EAAMmK,OADiB,uBAEvB2N,EAAW,IAFY,0CAKJ9V,EAAiBgB,QAAQ,CAC5Cf,iBAAkB,CACdnC,KAAM,EACND,KAAM,EACNE,SAAUC,EACV8B,QAAS7I,GAAQ4I,UAVE,QAKrBtG,EALqB,QAaboB,OAMV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,aALtDkhB,EAAWvc,EAASlE,KAAKiL,YAAYJ,SAAS9M,KAAI,SAAAX,GAAO,MAAK,CAACuL,MAAOvL,EAAQoB,UACzE0F,EAASlE,KAAKiL,YAAYH,OAC3BvL,IAAQqiB,QAAQ,wCAhBG,2CAAH,sDAuBtB+B,EAAgC3Q,sBAAYC,MAAS,SAAAC,GAAS,OAAIoa,EAAuBpa,KAAY,KAAM,IAG3Gqa,EAAoB,yCAAG,WAAO5kB,EAAeY,GAAtB,kBAAAhI,EAAA,0DACrBtH,EAAiB6D,MAAK,SAAAT,GAAe,OAAIA,EAAgBD,QAAQoB,OAASmK,KADrD,uBAErBpJ,IAAQqiB,QAAQ,kCAFK,iCAKzBvd,QAAQC,IAAI,aAAeqE,GALF,SAMFykB,EAAiBzhB,QAAQ,CAC5CnN,KAAMmK,IAPe,QAMnBzE,EANmB,QASXoB,OAGV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAFtDrB,EAASmvB,GAAiCnpB,EAASlE,KAAKotB,mBAVnC,2CAAH,wDAgB1B,OACI,8BACI,eAAC,KAAD,6BACQpQ,IADR,IAEIjY,KAAMA,EACNvG,KAAK,cACLwG,SAAUA,EACVW,cAAe,CACXiM,eAAgBA,GAEpByB,oBAAkB,EARtB,UAUI,cAAC,KAAKzN,KAAN,CACIpH,KAAK,QACL8U,MAAM,SACNzN,MAAO,CACH,CACI1I,KAAM,QACNoC,QAAS,kCAEb,CACIuG,UAAU,EACVvG,QAAS,4BACTgU,YAAY,IAXxB,SAeI,cAAC,KAAD,CAAOrN,YAAa,SAAU/I,KAAM,YAExC,cAAC,KAAKyI,KAAN,CACIpH,KAAK,cACL8U,MAAM,cACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,iCAAkCgU,YAAY,IAHpF,SAKI,cAAC,KAAD,CAAOrN,YAAa,0BAExB,cAAC,KAAKN,KAAN,CACIpH,KAAK,YACL8U,MAAM,YACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,+BAAgCgU,YAAY,IAHlF,SAKI,cAAC,KAAD,CAAOrN,YAAa,gBAExB,cAAC,KAAKN,KAAN,CACIpH,KAAK,WACL8U,MAAM,WACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,8BAA+BgU,YAAY,IAHjF,SAKI,cAAC,KAAD,CAAOrN,YAAa,eAExB,cAAC,KAAKN,KAAN,CACI0N,MAAM,kBACN9U,KAAK,iBAFT,SAII,eAAC,KAAMgV,MAAP,CAAaxH,SAAU,SAACb,GAAD,OAAO0G,EAAkB1G,EAAEkD,OAAO1F,QAAzD,UACI,cAAC,KAAD,CAAOA,MAAM,YAAb,uDACA,cAAC,KAAD,CAAOA,MAAM,UAAb,gEAGY,cAAnBiJ,EAEO,qCACI,cAAC,KAAKhM,KAAN,CACIpH,KAAK,OACL8U,MAAM,OACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,6BAHtC,SAKI,cAAC,KAAD,CACIgK,QAASuG,EAAO/R,KAAI,SAAAoU,GAAI,MAAK,CACzBxJ,MAAOwJ,EAAKsB,QACZhD,aAAc0B,EAAKuB,iBAEvBlK,SAzHN,SAACb,GAAD,OAAmBoK,EAA2BpK,IA0HxCc,SAxHN,SAACd,EAAegL,GACtC3B,EAAgB2B,GAChBzV,EAAS2S,GAAe8C,EAAOlD,gBAgHP,SAQI,cAAC/G,GAAA,EAAD,CAAQxD,YAAY,cAAc0N,aAAW,EAAC5W,QAAS0S,QAG9DqC,GACG,cAAC,KAAKnM,KAAN,CACIpH,KAAK,YACL8U,MAAM,YACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,kCAHtC,SAKI,cAAC,KAAD,CAAQvC,QAAS8U,EAAjB,SACK9B,EAAWjS,KAAI,SAAA4T,GAAS,OACrB,cAAC,KAAOtF,OAAR,CACI1D,MAAOgJ,EAAUkC,YADrB,SACmClC,EAAUkC,wBAQjE,cAAC,KAAKjO,KAAN,CACIpH,KAAK,UACL8U,MAAM,UACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,gCAHtC,SAKI,cAAC,KAAD,CAAO2G,YAAa,cAIhC,cAAC,KAAKN,KAAN,CAAW0N,MAAM,WAAjB,SACI,cAAC,KAAD,CACI/J,QAASA,EACTC,SA7HS,SAACb,GAAD,OAAmBgb,EAA8Bhb,IA8H1Dc,SAAU8jB,EAHd,SAKI,cAAC7jB,GAAA,EAAD,CAAQxD,YAAY,kBAAkB0N,aAAW,EACzC5W,QAAS2N,EAAiB3N,SAAWowB,EAAiBpwB,cAGrE/C,EAAiBoQ,OAAS,GACvB,cAAC,KAAKzE,KAAN,UACI,cAAC,GAAD,CAAuB5I,QAAS2N,EAAiB3N,SAAWowB,EAAiBpwB,YAGrF,cAAC,KAAK4I,KAAN,UACI,cAAC,KAAD,CAAQzI,KAAK,UAAUsJ,SAAS,SAASzJ,QAASkV,EAA0BlV,QAA5E,6BC3PPwwB,GAAe,WAAO,IAAD,IACxB9pB,EAASZ,cACToT,EAAUxS,EAAOvE,GAAKye,SAASla,EAAOvE,IAAM,EAC5C8tB,EAAgBrtB,YAClBob,GACA,CACIhY,UAAW,CAAC7D,GAAI+W,GAChBrW,QAAS,CAAClE,QAASZ,KAPG,EAUf8J,KAAKC,UAAbC,EAVuB,oBAWxB7G,EAAWC,eAXa,EAYcgK,mBAAyBxO,EAAegY,WAZtD,mBAYvBC,EAZuB,KAYPC,EAZO,KAaxB/B,EAASxN,aAAYuN,IACrBG,EAAa1N,aAAYyN,IACzBL,EAAgBpN,aAAYkN,IAC5BsC,EAAoBxP,aAAYqN,IAhBR,EAiBUxH,mBAA2D,MAjBrE,mBAiBvB4J,EAjBuB,KAiBTC,EAjBS,OAkBoB7J,mBAAiB,IAlBrC,mBAkBvBslB,EAlBuB,KAkBJC,EAlBI,OAmBW5pB,aAA8CuoB,GACnF,CAACxsB,QAAS,CAAClE,QAASZ,KApBM,mBAmBvB4yB,EAnBuB,KAmBVC,EAnBU,KAsBxB1d,EAAc5N,aAAY2N,IAE1BhW,EAAmBqI,aAAYmF,IAxBP,EAyBAU,mBAA8B,IAzB9B,mBAyBvBoB,EAzBuB,KAyBdkX,EAzBc,KA0BxB2M,EAAmBxtB,YAAqDgjB,GAC1E,CAAC/iB,QAAS,CAAClE,QAASZ,KAElB4P,EAAmB/K,YAA2CtD,GAChE,CAACuD,QAAS,CAAClE,QAASZ,KAElB4I,EAAWC,cAEjBI,qBAAU,WAAO,IAAD,EACN0R,EAAK,UAAGuX,EAAcjtB,YAAjB,aAAG,EAAoBktB,SAC9BxX,IACA7D,EAAkB6D,EAAM9D,gBACxBI,EAAgB,CAACrJ,MAAO+M,EAAMjD,iBAAkBhC,aAAciF,EAAMlD,mBACpEkb,EAAqBhY,EAAMhD,mBAC3BxU,EAASmvB,GAAkC3X,EAAMK,kBACjD7X,EAAS2S,GAAe6E,EAAMlD,sBAEnC,WAACya,EAAcjtB,YAAf,aAAC,EAAoBktB,WAExBlpB,qBAAU,WAWN,OAVIkM,IACAnL,EAAKM,UAAU,CACX,CACI7G,KAAM,OACN8G,OAAQ,CAAC4K,MAGjBhS,EAAShB,GAAuB,QAG7B,WACHgB,EAAShB,MACTgB,EAASmvB,SAEd,CAACnd,IAEJ,IAAMlL,EAAQ,yCAAG,WAAO+B,GAAP,gCAAAxF,EAAA,6DAMyCwF,EAA/CoL,KAA+CpL,EAAzC4K,UAAyC5K,EAA9BqL,QAASjT,EAAqB4H,EAArB5H,GAAOkT,EAN3B,aAMyCtL,EANzC,qCAOP8mB,EAAWjQ,SAASze,GACtBmT,EAAavL,EAAOqL,QACpBI,EAAmB,KACnBC,EAAmB,KACnBC,EAAoB,KACD,cAAnBd,IACAU,EAAavL,EAAOoL,KAAO,IAAMpL,EAAO4K,UACxCa,EAAgB,OAAGT,QAAH,IAAGA,OAAH,EAAGA,EAActB,aACjCgC,EAAgB,OAAGV,QAAH,IAAGA,OAAH,EAAGA,EAAcpJ,MACjC+J,EAAoB+a,GAhBX,SAkBUE,EAAY,CAC/B3qB,UAAW,CACP8qB,iBAAiB,6BACVzb,GADS,IAEZlT,GAAI0uB,EACJzb,QAASE,EACTE,iBAAkBA,EAClBC,iBAAkBA,EAClBC,kBAAmBA,EACnBC,qBAAsB1Y,EAAiB8D,KAAI,SAAAV,GAAe,MAAK,CAC3DuV,UAAWvV,EAAgBD,QAAQ+B,GACnCxB,gBAAiBN,EAAgBM,yBA7BpC,QAkBPuG,EAlBO,QAkCCoB,OAIV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,aAHtDA,IAAQC,QAAQ,8BAChBmE,EAAS,QApCA,4CAAH,sDA0CRkP,EAAmB,yCAAG,WAAOlK,GAAP,UAAApH,EAAA,sDACxBrD,EAAShB,GAAsB,KAC/BgB,EAAShB,GAAkB,KAC3B8U,EAAgB,MAChBjN,EAAKM,UAAU,CAAC,CACZ7G,KAAM,aACNmK,MAAO,MAEM,KAAjBA,EAAMmK,QAAiB5U,EAASwS,GAAW/H,IARnB,2CAAH,sDAWnBoK,EAA6BC,sBAAYC,MAAS,SAAAC,GAAS,OAAIL,EAAoBK,KAAY,KAAM,IAQrGoa,EAAsB,yCAAG,WAAO3kB,GAAP,kBAAApH,EAAA,yDACN,KAAjBoH,EAAMmK,OADiB,uBAEvB2N,EAAW,IAFY,0CAKJ9V,EAAiBgB,QAAQ,CAC5Cf,iBAAkB,CACdnC,KAAM,EACND,KAAM,EACNE,SAAUC,EACV8B,QAAS7I,GAAQ4I,UAVE,QAKrBtG,EALqB,QAaboB,OAMV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,aALtDkhB,EAAWvc,EAASlE,KAAKiL,YAAYJ,SAAS9M,KAAI,SAAAX,GAAO,MAAK,CAACuL,MAAOvL,EAAQoB,UACzE0F,EAASlE,KAAKiL,YAAYH,OAC3BvL,IAAQqiB,QAAQ,wCAhBG,2CAAH,sDAuBtB+B,EAAgC3Q,sBAAYC,MAAS,SAAAC,GAAS,OAAIoa,EAAuBpa,KAAY,KAAM,IAG3Gqa,EAAoB,yCAAG,WAAO5kB,EAAeY,GAAtB,kBAAAhI,EAAA,0DACrBtH,EAAiB6D,MAAK,SAAAT,GAAe,OAAIA,EAAgBD,QAAQoB,OAASmK,KADrD,uBAErBpJ,IAAQqiB,QAAQ,kCAFK,iCAKzBvd,QAAQC,IAAI,aAAeqE,GALF,SAMFykB,EAAiBzhB,QAAQ,CAC5CnN,KAAMmK,IAPe,QAMnBzE,EANmB,QASXoB,OAGV,UAAApB,EAASoB,cAAT,SAAiB7H,SAAQ,SAAAsC,GAAK,OAAIR,IAAQQ,MAAMA,EAAMR,YAFtDrB,EAASmvB,GAAiCnpB,EAASlE,KAAKotB,mBAVnC,2CAAH,wDAgB1B,IAAKlX,GAAW+W,EAAcltB,MAC1B,OAAO,cAAC,GAAD,IAEX,GAAIktB,EAAcjwB,QACd,OAAO,cAAC,EAAD,IAEX,IAAM0Y,EAAK,UAAGuX,EAAcjtB,YAAjB,aAAG,EAAoBktB,SAElC,OADA7oB,QAAQC,IAAImpB,GAER,8BACI,eAAC,KAAD,6BACQzQ,IADR,IAEIjY,KAAMA,EACNvG,KAAK,cACLwG,SAAUA,EACVW,cAAe,CACXxG,GAAE,OAAEuW,QAAF,IAAEA,OAAF,EAAEA,EAAOvW,GACX8F,MAAK,OAAEyQ,QAAF,IAAEA,OAAF,EAAEA,EAAOzQ,MACdkO,UAAS,OAAEuC,QAAF,IAAEA,OAAF,EAAEA,EAAOvC,UAClBC,SAAQ,OAAEsC,QAAF,IAAEA,OAAF,EAAEA,EAAOtC,SACjBtL,YAAW,OAAE4N,QAAF,IAAEA,OAAF,EAAEA,EAAO5N,YACpBsK,QAAO,OAAEsD,QAAF,IAAEA,OAAF,EAAEA,EAAOtD,QAChBD,KAAI,OAAEuD,QAAF,IAAEA,OAAF,EAAEA,EAAOjD,iBACbd,UAAS,OAAE+D,QAAF,IAAEA,OAAF,EAAEA,EAAOhD,kBAClBd,eAAc,OAAE8D,QAAF,IAAEA,OAAF,EAAEA,EAAO9D,eACvB0C,YAAW,OAAEoB,QAAF,IAAEA,OAAF,EAAEA,EAAOpB,aAExBjB,oBAAkB,EAjBtB,UAmBI,cAAC,KAAKzN,KAAN,CAAWpH,KAAK,KAAK+F,MAAO,CAACyZ,QAAS,QAAtC,SACI,cAAC,KAAD,CAAO7gB,KAAM,aAEjB,cAAC,KAAKyI,KAAN,CACIpH,KAAK,QACL8U,MAAM,SACNzN,MAAO,CACH,CACI1I,KAAM,QACNoC,QAAS,kCAEb,CACIuG,UAAU,EACVvG,QAAS,4BACTgU,YAAY,IAXxB,SAeI,cAAC,KAAD,CAAOrN,YAAa,SAAU/I,KAAM,YAExC,cAAC,KAAKyI,KAAN,CACIpH,KAAK,cACL8U,MAAM,cACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,iCAAkCgU,YAAY,IAHpF,SAKI,cAAC,KAAD,CAAOrN,YAAa,0BAExB,cAAC,KAAKN,KAAN,CACIpH,KAAK,YACL8U,MAAM,YACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,+BAAgCgU,YAAY,IAHlF,SAKI,cAAC,KAAD,CAAOrN,YAAa,gBAExB,cAAC,KAAKN,KAAN,CACIpH,KAAK,WACL8U,MAAM,WACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,8BAA+BgU,YAAY,IAHjF,SAKI,cAAC,KAAD,CAAOrN,YAAa,eAExB,cAAC,KAAKN,KAAN,CACI0N,MAAM,kBACN9U,KAAK,iBAFT,SAII,eAAC,KAAMgV,MAAP,CAAaxH,SAAU,SAACb,GAAD,OAAO0G,EAAkB1G,EAAEkD,OAAO1F,QAAzD,UACI,cAAC,KAAD,CAAOA,MAAM,YAAb,uDACA,cAAC,KAAD,CAAOA,MAAM,UAAb,gEAGY,cAAnBiJ,EAEO,qCACI,cAAC,KAAKhM,KAAN,CACIpH,KAAK,OACL8U,MAAM,OACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,6BAHtC,SAKI,cAAC,KAAD,CACIgK,QAASuG,EAAO/R,KAAI,SAAAoU,GAAI,MAAK,CACzBxJ,MAAOwJ,EAAKsB,QACZhD,aAAc0B,EAAKuB,iBAEvBlK,SA7IN,SAACb,GAAD,OAAmBoK,EAA2BpK,IA8IxCc,SA5IN,SAACd,EAAegL,GACtC3B,EAAgB2B,GAChBzV,EAAS2S,GAAe8C,EAAOlD,gBAoIP,SAQI,cAAC/G,GAAA,EAAD,CAAQxD,YAAY,cAAc0N,aAAW,EAAC5W,QAAS0S,QAG9DqC,GACG,cAAC,KAAKnM,KAAN,CACIpH,KAAK,YACL8U,MAAM,YACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,kCAHtC,SAKI,cAAC,KAAD,CAAQvC,QAAS8U,EACT9F,SAAU,SAAArD,GAAK,OAAI+kB,EAAqB/kB,IACxCA,MAAO8kB,EAFf,SAIKzd,EAAWjS,KAAI,SAAA4T,GAAS,OACrB,cAAC,KAAOtF,OAAR,CAEI1D,MAAOgJ,EAAUkC,YAFrB,SAIKlC,EAAUkC,aAHNlC,EAAUkC,uBAYvC,cAAC,KAAKjO,KAAN,CACIpH,KAAK,UACL8U,MAAM,UACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,gCAHtC,SAKI,cAAC,KAAD,CAAO2G,YAAa,cAIhC,cAAC,KAAKN,KAAN,CAAW0N,MAAM,WAAjB,SACI,cAAC,KAAD,CACI/J,QAASA,EACTC,SAxJS,SAACb,GAAD,OAAmBgb,EAA8Bhb,IAyJ1Dc,SAAU8jB,EAHd,SAKI,cAAC7jB,GAAA,EAAD,CAAQxD,YAAY,kBAAkB0N,aAAW,EACzC5W,QAAS2N,EAAiB3N,SAAWowB,EAAiBpwB,cAGrE/C,EAAiBoQ,OAAS,GACvB,cAAC,KAAKzE,KAAN,UACI,cAAC,GAAD,CAAuB5I,QAAS2N,EAAiB3N,SAAWowB,EAAiBpwB,YAGrF,cAAC,KAAK4I,KAAN,CACIpH,KAAK,cACL8U,MAAM,eACNzN,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,qCAHtC,SAKI,cAAC,KAAD,UACM0M,OAAOC,KAAKtS,GAAiDmE,KAAI,SAACoO,EAAKC,GAAN,OAC/D,cAAC,KAAOC,OAAR,CAAe1D,MAAOwD,EAAtB,SAAoCxC,GAAuBwC,IAA3BC,UAI5C,cAAC,KAAKxG,KAAN,UACI,cAAC,KAAD,CAAQzI,KAAK,UAAUsJ,SAAS,SAASzJ,QAAS4wB,EAAkB5wB,QAApE,6BC/VP+wB,GAAuB,WAChC,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAO1mB,KAAM,IAAKC,QAAS,cAAC,GAAD,MAC3B,cAAC,IAAD,CAAOD,KAAM,MAAOC,QAAS,cAAC,GAAD,MAC7B,cAAC,IAAD,CAAOD,KAAM,SAAUC,QAAS,cAAC,GAAD,MAChC,cAAC,IAAD,CAAOD,KAAM,aAAcC,QAAS,cAAC,GAAD,MACpC,cAAC,IAAD,CAAOD,KAAM,IAAKC,QAAS,cAAC,GAAD,UCIhC0mB,GAAWpV,KAAXoV,QAEMC,GAAkB,WAC3B,IAAM9sB,EAASmB,aAAYpB,IACrBgtB,EAAW5rB,aAAYvB,IAE7B,OAAKI,GAGO,OAAR+sB,QAAQ,IAARA,OAAA,EAAAA,EAAUnsB,QAASD,GAAkB,OAACosB,QAAD,IAACA,OAAD,EAACA,EAAUnsB,OAChDxC,IAAQqiB,QAAQ,oBACT,cAAC,IAAD,CAAUtjB,GAAI,OAIrB,eAAC,KAAD,CAAQ3B,UAAWC,KAAEuxB,OAArB,UACI,cAAC,GAAD,IACA,cAAC,KAAD,CAAQxxB,UAAU,cAAlB,SACI,eAACqxB,GAAD,CAASrxB,UAAWC,KAAE6b,QAAtB,UACI,cAAC,GAAD,IACA,qBAAK9b,UAAWC,KAAEwxB,qBAAlB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAO/mB,KAAM,IAAKC,QAAS,cAAC,GAAD,MAC3B,cAAC,IAAD,CAAOD,KAAM,WAAYC,QAAS,cAAC,GAAD,MAClC,cAAC,IAAD,CAAOD,KAAM,aAAcC,QAAS,cAAC,GAAD,MACpC,cAAC,IAAD,CAAOD,KAAM,eAAgBC,QAAS,cAAC,GAAD,MACtC,cAAC,IAAD,CAAOD,KAAM,UAAWC,QAAS,cAAC,GAAD,MACjC,cAAC,IAAD,CAAOD,KAAM,UAAWC,QAAS,cAAC,GAAD,MACjC,cAAC,IAAD,CAAOD,KAAM,UAAWC,QAAS,cAAC,GAAD,MACjC,cAAC,IAAD,CAAOD,KAAM,aAAcC,QAAS,cAAC,GAAD,MACpC,cAAC,IAAD,CAAOD,KAAM,IAAKC,QAAS,cAAC,GAAD,mBAvBxC,cAAC,IAAD,CAAUhJ,GAAI,uB,qBCPhBoG,GAAgB,WACzB,IAAMxG,EAAWC,eACXgD,EAASmB,aAAYpB,IAFI,EAGe4C,aAAkCX,IAHjD,mBAGxBwB,EAHwB,KAGTC,EAHS,OAIhBC,KAAKC,UAAbC,EAJwB,oBAMzBC,EAAQ,yCAAG,gCAAAzD,EAAA,sDAAQ0D,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAAf,EAAyBC,SACtCR,EAAc,CAAC3B,UAAW,CAACoC,WAAY,CAACH,QAAOC,aAAYrF,QAAS,CAAClE,QAASZ,KACzEkJ,MAAK,SAAAC,GACEA,EAASlE,MACT9B,EAASoD,GAAM4C,EAASlE,KAAKsB,WAGpC8C,OAAM,SAAArE,GACHgF,EAAKM,UAAU,CACX,CACI7G,KAAM,wBACN8G,OAAQ,CAACvF,EAAMR,eAXlB,2CAAH,sDAiBRgG,EAAc,WAChBR,EAAKS,YAAY,CAAC,2BAGtB,OAAIrE,EACO,cAAC,IAAD,CAAU7C,GAAI,WAGrB,qBAAK3B,UAAWC,KAAE8I,UAAlB,SACI,eAAC,KAAD,CACIlH,KAAK,YACLmH,cAAe,CAACR,UAAU,GAC1BH,SAAUA,EACVD,KAAMA,EAJV,UAMI,qBAAIpI,UAAWC,KAAEgE,MAAjB,UACI,0DACA,qBAAKjE,UAAU,QAAf,sBAEJ,cAAC,KAAKiJ,KAAN,CACIpH,KAAK,QACLqH,MAAO,CACH,CACIC,UAAU,EACVvG,QAAS,4BAEb,CACIpC,KAAM,QACNoC,QAAS,mCATrB,SAaI,cAAC,KAAD,CAAOwG,QAASR,EAAaS,OAAQ,cAACC,GAAA,EAAD,CAActJ,UAAU,wBACtDuJ,YAAY,QAAQ/I,KAAM,YAErC,cAAC,KAAKyI,KAAN,CACIpH,KAAK,WACLqH,MAAO,CAAC,CAACC,UAAU,EAAMvG,QAAS,gCAFtC,SAII,cAAC,KAAD,CACIwG,QAASR,EACTS,OAAQ,cAACG,GAAA,EAAD,CAAcxJ,UAAU,wBAChCQ,KAAK,WACL+I,YAAY,eAGpB,eAAC,KAAKN,KAAN,CAAWpH,KAAK,wBAAhB,UACI,cAAC,KAAKoH,KAAN,CAAWpH,KAAK,WAAW4H,cAAc,UAAUC,SAAO,EAAC1J,UAAWC,KAAE0J,WAAxE,SACI,cAAC,KAAD,CAAUhH,QAASiG,EAAnB,SACI,sBAAM5I,UAAWC,KAAE2J,MAAnB,6BAIR,cAAC,KAAD,CAAM5J,UAAWC,KAAE4J,WAAYlI,GAAI,GAAnC,gCAKJ,cAAC,KAAKsH,KAAN,UACI,cAAC,KAAD,CAAQ5I,QAAS4H,EAAqB5H,QAASG,KAAK,UAAUsJ,SAAS,SAC/D9J,UAAW,CAAC,oBAAqBC,KAAE8J,QAAQC,KAAK,KADxD,4BCrFP0nB,I,cAAU,WACf,IAAMnwB,EAAWC,eACXmwB,EAAU1uB,YAAyB8Y,GAAU,CAAC7Y,QAAS,CAAClE,QAASZ,KAFlD,EAGqBoN,oBAAS,GAH9B,mBAGdomB,EAHc,KAGCC,EAHD,KAiBrB,OAZAxqB,qBAAU,WACFsqB,EAAQtuB,OAASsuB,EAAQvuB,QACzB7B,EAASoD,GAAMgtB,EAAQtuB,KAAKyuB,KAC5BvwB,EAAShB,GAA4B7C,MACrCm0B,GAAiB,IAEjBF,EAAQvuB,QACR7B,EAAShB,GAA4B7C,MACrCm0B,GAAiB,MAEtB,CAACF,EAAQtuB,KAAMsuB,EAAQvuB,QAEtBuuB,EAAQtxB,UAAYuxB,EACb,cAAC,EAAD,IAGP,eAAC,IAAD,WACI,cAAC,IAAD,CAAOlnB,KAAK,UAAUC,QAAS,cAAC,GAAD,MAC/B,cAAC,IAAD,CAAOD,KAAK,KAAKC,QAAS,cAAC,GAAD,MAC1B,cAAC,IAAD,CAAOD,KAAM,mBAAoBC,QAAS,cAAC,GAAD,W,oBCjCtDonB,GAAcC,aAAgB,CAC9B3tB,KAAMW,GACNjD,MAAOooB,GACPtf,OAAQlK,GACRmS,WAAYsB,KAYV6d,GAAmBC,OAAOC,sCAAwCC,KAClEC,GAAQC,aAAYP,GAAaE,GAAiBM,aAAgBC,QAExEN,OAAOO,UAAYJ,GAEJA,U,UCOfK,IAASvgB,OACL,cAAC,IAAMwgB,WAAP,UACI,cAAC,KAAD,CAAUN,MAAOA,GAAjB,SACI,cAAC,KAAD,UACI,cAACO,GAAA,EAAD,CAAgBn0B,OAAQA,EAAxB,SACI,cAAC,GAAD,YAKhBo0B,SAASC,eAAe,U,mBC5C5Bj2B,EAAOC,QAAU,CAAC,QAAU,yBAAyB,SAAW,0BAA0B,YAAc,6BAA6B,SAAW,0BAA0B,gBAAkB,iCAAiC,kBAAoB,mCAAmC,mBAAqB,oCAAoC,OAAS,wBAAwB,MAAQ,uBAAuB,YAAc,6BAA6B,YAAc,6BAA6B,WAAa,+B","file":"js/main.8e2b072f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperMenu\":\"MyMenu_wrapperMenu__3emXh\",\"menu\":\"MyMenu_menu__2JXoy\",\"menuItem\":\"MyMenu_menuItem__1VRAl\",\"dropdown\":\"MyMenu_dropdown__18JRg\",\"dropdownButton\":\"MyMenu_dropdownButton__FqPr0\",\"dropdownContent\":\"MyMenu_dropdownContent__1jAnj\",\"searchWrapper\":\"MyMenu_searchWrapper__1FMtM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"documentWrapper\":\"ClientLayout_documentWrapper__3PbGc\",\"container\":\"ClientLayout_container__1mmmf\",\"content\":\"ClientLayout_content__LUgSO\",\"wrapperPages\":\"ClientLayout_wrapperPages__1n8o6\",\"wrapperMenu\":\"ClientLayout_wrapperMenu__3PrPO\",\"breadcrumb\":\"ClientLayout_breadcrumb__1x5SN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"productCard\":\"ProductCard_productCard__1a4yI\",\"nameAndPhotos\":\"ProductCard_nameAndPhotos__1L8PY\",\"name\":\"ProductCard_name__xef5L\",\"carousel\":\"ProductCard_carousel__2aYJF\",\"priceAndAddToBasket\":\"ProductCard_priceAndAddToBasket__331Iu\",\"price\":\"ProductCard_price__1S7TE\",\"addToBasket\":\"ProductCard_addToBasket__8P_wc\",\"wrapperImage\":\"ProductCard_wrapperImage__1iT7W\",\"image\":\"ProductCard_image__3Ovvs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperLoginForm\":\"AuthLogin_wrapperLoginForm__2yOdQ\",\"loginForm\":\"AuthLogin_loginForm__29xj8\",\"title\":\"AuthLogin_title__38-2z\",\"white\":\"AuthLogin_white__2eTCh\",\"rememberMe\":\"AuthLogin_rememberMe__1YqNA\",\"forgotPass\":\"AuthLogin_forgotPass__I1KD8\",\"submit\":\"AuthLogin_submit__2dCqk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photosAndMainInfo\":\"ProductsView_photosAndMainInfo__VWy4l\",\"carousel\":\"ProductsView_carousel__1W7Am\",\"image\":\"ProductsView_image__JbjbR\",\"cards\":\"ProductsView_cards__GZlPy\",\"card\":\"ProductsView_card__mkaBS\",\"priceAndAddToBasket\":\"ProductsView_priceAndAddToBasket__ygnXI\",\"price\":\"ProductsView_price__3Kz87\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsVUR\":\"ButtonsVUR_buttonsVUR__2UPi3\",\"buttonView\":\"ButtonsVUR_buttonView__1PmNj\",\"buttonUpdate\":\"ButtonsVUR_buttonUpdate__32f1L\",\"buttonRemove\":\"ButtonsVUR_buttonRemove__1IRhH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"carousel\":\"PinnedProductsInOrder_carousel__dYUyS\",\"image\":\"PinnedProductsInOrder_image__31sYk\",\"quantity\":\"PinnedProductsInOrder_quantity__2zZ1f\",\"quantityNumber\":\"PinnedProductsInOrder_quantityNumber__puKUH\",\"buttonPlusMinus\":\"PinnedProductsInOrder_buttonPlusMinus__iRo8E\",\"totalPrice\":\"PinnedProductsInOrder_totalPrice__3Ns8U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperMenu\":\"MyMenu_wrapperMenu__1Jhve\",\"logo\":\"MyMenu_logo__2AlS_\",\"userInfo\":\"MyMenu_userInfo__3k0Cr\",\"userFirstLastName\":\"MyMenu_userFirstLastName__1oOnc\",\"name\":\"MyMenu_name__1tMJ_\",\"roles\":\"MyMenu_roles__1Shl-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperPages\":\"Pages_wrapperPages__MHYuU\",\"pages\":\"Pages_pages__1O7hY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1X-oJ\",\"logo\":\"Header_logo__1i39-\",\"grozer\":\"Header_grozer__17PdI\",\"phoneNumber\":\"Header_phoneNumber__7-Orn\",\"basket\":\"Header_basket__1nw_Y\",\"basketPrice\":\"Header_basketPrice__2zFq9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photosAndMainInfo\":\"ProductsView_photosAndMainInfo__QGQI7\",\"carousel\":\"ProductsView_carousel__2YElR\",\"image\":\"ProductsView_image__2VJQa\",\"cards\":\"ProductsView_cards__1P2nB\",\"card\":\"ProductsView_card__1Di6F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"AuthLogin_loginForm__W2ir5\",\"title\":\"AuthLogin_title__HVqUl\",\"white\":\"AuthLogin_white__3oW9m\",\"rememberMe\":\"AuthLogin_rememberMe__3iPwx\",\"forgotPass\":\"AuthLogin_forgotPass__2PG4t\",\"submit\":\"AuthLogin_submit__3P3-Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperRegisterForm\":\"AuthRegister_wrapperRegisterForm__etz0M\",\"registerForm\":\"AuthRegister_registerForm__KqUVM\",\"title\":\"AuthRegister_title__1205J\",\"white\":\"AuthRegister_white__2SPCu\",\"rememberMe\":\"AuthRegister_rememberMe__1pzgx\",\"forgotPass\":\"AuthRegister_forgotPass__60N6y\",\"submit\":\"AuthRegister_submit__IqVEF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"strongWrapper\":\"Home_strongWrapper__zXwD3\",\"strongTitle\":\"Home_strongTitle__jvdpw\",\"hitOfSalesProductItem\":\"Home_hitOfSalesProductItem__3I28u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"carousel\":\"ProductsIndex_carousel__2dl3_\",\"image\":\"ProductsIndex_image__3nCUs\",\"categories\":\"ProductsIndex_categories__3MwAE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"carousel\":\"CategoriesView_carousel__HDZ_U\",\"image\":\"CategoriesView_image__2NTjm\",\"description\":\"CategoriesView_description__YZZT8\",\"productsTitle\":\"CategoriesView_productsTitle__1jbO6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chartWrapper\":\"StatisticsChart_chartWrapper__3oMV5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperProducts\":\"ProductsIndex_wrapperProducts__3zcWL\",\"products\":\"ProductsIndex_products__IG0Q9\",\"orderBy\":\"ProductsIndex_orderBy__1GfxW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"products\":\"CategoriesView_products__2Zy1b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperCharts\":\"Home_wrapperCharts__2_I8W\",\"wrapperChart\":\"Home_wrapperChart__27P6n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"roles\":\"UsersView_roles__tJUow\",\"ordersTitle\":\"UsersView_ordersTitle__1SJ_2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"AdminLayout_layout__3Urpo\",\"content\":\"AdminLayout_content__3Vxtf\",\"siteLayoutBackground\":\"AdminLayout_siteLayoutBackground__3DuLp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"PagesView_card__1vnjF\",\"info\":\"PagesView_info__2F3IO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"carousel\":\"OrdersView_carousel__30UeB\",\"image\":\"OrdersView_image__ypDyQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputId\":\"FilesUpdate_inputId__9hESm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper_svg\":\"Loading_wrapper_svg__3GGUn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"roles\":\"UsersIndex_roles__3L3M2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"labelFile\":\"FilesCreate_labelFile__1e3Ee\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"FilesView_card__3qLK6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filters\":\"OrdersIndex_filters__fbEX7\"};","export enum RoleName {\r\n    admin = 'admin',\r\n    moderator = 'moderator',\r\n    customer = 'customer',\r\n}\r\n\r\nexport type Role = {\r\n    id: number,\r\n    name: RoleName,\r\n    color: string,\r\n}\r\n\r\nexport type User = {\r\n    id: number,\r\n    email: string,\r\n    firstName: string,\r\n    lastName: string,\r\n    roles: Role[],\r\n    orders: Order[],\r\n}\r\n\r\nexport type Auth = {\r\n    user: User,\r\n    accessToken: string,\r\n}\r\n\r\nexport type Product = {\r\n    id: number,\r\n    name: string,\r\n    slug: string,\r\n    isShown: boolean,\r\n    quantity: number,\r\n    priceUAH: number,\r\n    description: string,\r\n    characteristics: Characteristic[],\r\n    user: User,\r\n    files: FileType[],\r\n    categories: Category[],\r\n    productsInOrder: ProductInOrder[];\r\n}\r\n\r\nexport type FileType = {\r\n    id: number,\r\n    filePath: string,\r\n    fileImage: string,\r\n    originalName: string,\r\n    mimetype: string,\r\n    destination: string,\r\n    fileName: string,\r\n    size: number,\r\n}\r\n\r\nexport type Characteristic = {\r\n    name: string,\r\n    value: string,\r\n}\r\n\r\nexport type Category = {\r\n    id: number,\r\n    isShown: boolean,\r\n    name: string,\r\n    slug: string,\r\n    description: string,\r\n    products: Product[],\r\n}\r\n\r\nexport type Page = {\r\n    id: number,\r\n    isShown: boolean,\r\n    name: string,\r\n    slug: string,\r\n    text: string,\r\n    sorting: number,\r\n}\r\n\r\nexport type FileName = {\r\n    originalName: string,\r\n    newName: string,\r\n}\r\n\r\nexport type ProductInBasket = {\r\n    product: Product,\r\n    productQuantity: number,\r\n}\r\n\r\nexport enum ShippingMethod {\r\n    warehouse = 'warehouse',\r\n    courier = 'courier',\r\n}\r\n\r\nexport enum OrderStatus {\r\n    new = 'new',\r\n    picking = 'picking',\r\n    delivering = 'delivering',\r\n    waitingForTheCustomerAtThePickUpPoint = 'waitingForTheCustomerAtThePickUpPoint',\r\n    completed = 'completed',\r\n    canceled = 'canceled',\r\n}\r\n\r\nexport type Order = {\r\n    id: number,\r\n    email: string,\r\n    firstName: string,\r\n    lastName: string,\r\n    phoneNumber: string,\r\n    address: string,\r\n    deliveryCityCode: string,\r\n    deliveryCityName: string,\r\n    deliveryWarehouse: string,\r\n    totalPrice: number,\r\n    shippingMethod: ShippingMethod,\r\n    orderStatus: OrderStatus;\r\n    user: User;\r\n    userId: number;\r\n    productsInOrder: ProductInOrder[];\r\n    createdAt: string,\r\n    updatedAt: string,\r\n}\r\n\r\nexport type ProductInOrder = {\r\n    id: number;\r\n    product: Product;\r\n    productId: number;\r\n    productQuantity: number;\r\n    order: Order;\r\n    orderId: number;\r\n}\r\n\r\nexport const all = 'all'\r\n\r\n// Nova Poshta types //\r\nexport type City = {\r\n    Present: string,\r\n    Warehouses: number,\r\n    MainDescription: string,\r\n    Area: string,\r\n    Region: string,\r\n    SettlementTypeCode: string,\r\n    DeliveryCity: string,\r\n}\r\n\r\nexport type Warehouse = {\r\n    Description: string,\r\n    ShortAddress: string,\r\n    Number: string,\r\n    CityDescription: string,\r\n}\r\n\r\n\r\n// Statistics //\r\nexport type OrderStatistics = {\r\n    date: string;\r\n    ordersCount: number;\r\n}\r\n\r\nexport type ProfitStatistics = {\r\n    date: string;\r\n    totalPrice: number;\r\n}\r\n\r\n\r\nexport enum OrderBy {\r\n    newest ='newest',\r\n    rating ='rating',\r\n    priceIncrease ='priceIncrease',\r\n    priceDecrease ='priceDecrease',\r\n}\r\n\r\n","import {ProductInBasket} from '../types/types';\r\n\r\nexport const getAuthorizationHeader = (): string => {\r\n    return localStorage.getItem('token') ? `Bearer ${localStorage.getItem('token')}` : '';\r\n};\r\n\r\nexport const setBasketToLocalStorage = (productsInBasket: ProductInBasket[]) => {\r\n    localStorage.setItem('productsInBasket', JSON.stringify(productsInBasket));\r\n};\r\n\r\nexport const getBasketFromLocalStorage = (): ProductInBasket[] => {\r\n    const productsInBasket = localStorage.getItem('productsInBasket');\r\n    if (productsInBasket) {\r\n        const productsInBasketParsed: ProductInBasket[] = JSON.parse(productsInBasket);\r\n        return productsInBasketParsed;\r\n    } else {\r\n        return [];\r\n    }\r\n};\r\n","import axios from 'axios';\r\nimport {getAuthorizationHeader} from '../../utils/localStorageActions';\r\n\r\nexport const baseURL = 'http://localhost:3001';\r\n// export const baseURL = window.location.protocol + '//' + window.location.host\r\n\r\nexport const instance = axios.create({\r\n    baseURL: baseURL + '/api/',\r\n    headers: {\r\n        authorization: getAuthorizationHeader(),\r\n    },\r\n});\r\n","import {gql} from '@apollo/client';\r\n\r\nexport const schema = gql`\r\n    # ------------------------------------------------------\r\n    # THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)\r\n    # ------------------------------------------------------\r\n\r\n    type Role {\r\n        id: Int!\r\n        name: RoleName!\r\n        color: String!\r\n        users: [User!]!\r\n    }\r\n\r\n    enum RoleName {\r\n        admin\r\n        moderator\r\n        customer\r\n    }\r\n\r\n    type File {\r\n        id: Int!\r\n        originalName: String!\r\n        mimetype: String!\r\n        destination: String!\r\n        fileName: String!\r\n        filePath: String!\r\n        fileImage: String!\r\n        size: Int!\r\n        products: [Product!]!\r\n    }\r\n\r\n    type Category {\r\n        id: Int!\r\n        isShown: Boolean!\r\n        name: String!\r\n        slug: String!\r\n        description: String!\r\n        products: [Product!]\r\n    }\r\n\r\n    type Characteristic {\r\n        name: String\r\n        value: String\r\n    }\r\n\r\n    type Order {\r\n        id: Int!\r\n        email: String!\r\n        firstName: String!\r\n        lastName: String!\r\n        phoneNumber: String!\r\n        address: String!\r\n        deliveryCityCode: String\r\n        deliveryCityName: String\r\n        deliveryWarehouse: String\r\n        totalPrice: Float!\r\n        shippingMethod: ShippingMethod!\r\n        orderStatus: OrderStatus!\r\n        user: User!\r\n        userId: Int!\r\n        productsInOrder: [ProductInOrder!]!\r\n        createdAt: DateTime!\r\n        updatedAt: DateTime!\r\n    }\r\n\r\n    enum ShippingMethod {\r\n        warehouse\r\n        courier\r\n    }\r\n\r\n    enum OrderStatus {\r\n        new\r\n        picking\r\n        delivering\r\n        waitingForTheCustomerAtThePickUpPoint\r\n        completed\r\n        canceled\r\n    }\r\n\r\n    \"\"\"\r\n    A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.\r\n    \"\"\"\r\n    scalar DateTime\r\n\r\n    type ProductInOrder {\r\n        id: Int!\r\n        product: Product!\r\n        productId: Int!\r\n        productQuantity: Int!\r\n        order: Order!\r\n        orderId: Int!\r\n    }\r\n\r\n    type Product {\r\n        id: Int!\r\n        isShown: Boolean!\r\n        name: String!\r\n        slug: String!\r\n        quantity: Float!\r\n        priceUAH: Float!\r\n        description: String!\r\n        characteristics: [Characteristic!]\r\n        files: [File!]!\r\n        categories: [Category!]\r\n    }\r\n\r\n    type User {\r\n        id: Int!\r\n        confirmedEmail: Boolean!\r\n        email: String!\r\n        firstName: String!\r\n        lastName: String!\r\n        roles: [Role!]!\r\n        orders: [Order!]!\r\n    }\r\n\r\n    type GetUsersResponse {\r\n        users: [User!]!\r\n        total: Int!\r\n    }\r\n\r\n    type AuthResponse {\r\n        user: User!\r\n        accessToken: String!\r\n    }\r\n\r\n    type GetProductsResponse {\r\n        products: [Product!]!\r\n        total: Int!\r\n    }\r\n\r\n    type GetFilesResponse {\r\n        files: [File!]!\r\n        total: Int!\r\n    }\r\n\r\n    type GetCategoriesResponse {\r\n        categories: [Category!]!\r\n        total: Int!\r\n    }\r\n\r\n    type Page {\r\n        id: Int!\r\n        isShown: Boolean!\r\n        name: String!\r\n        slug: String!\r\n        text: String!\r\n        sorting: Int!\r\n    }\r\n\r\n    type GetOrdersResponse {\r\n        orders: [Order!]!\r\n        total: Int!\r\n    }\r\n\r\n    type OrderStatistics {\r\n        date: String\r\n        ordersCount: Int\r\n    }\r\n\r\n    type ProfitStatistics {\r\n        date: String\r\n        totalPrice: Float\r\n    }\r\n\r\n    type Query {\r\n        me: AuthResponse!\r\n        getUsers(getUsersInput: GetUsersInput!): GetUsersResponse!\r\n        getUser(email: String!): User!\r\n        getRoles: [Role!]!\r\n        getRole(id: Int!): Role!\r\n        getPages: [Page!]!\r\n        getPage(slug: String!): Page!\r\n        getProducts(getProductsInput: GetProductsInput!): GetProductsResponse!\r\n        getProduct(slug: String!): Product!\r\n        getProductByName(name: String!): Product!\r\n        getOrders(getOrdersInput: GetOrdersInput!): GetOrdersResponse!\r\n        getOrder(id: Int!): Order!\r\n        getCategories(getCategoriesInput: GetCategoriesInput!): GetCategoriesResponse!\r\n        getCategory(slug: String!): Category!\r\n        getCategoryByName(name: String!): Category!\r\n        getFiles(getFilesInput: GetFilesInput!): GetFilesResponse!\r\n        getFile(id: Int!): File!\r\n        getFileByName(fileName: String!): File!\r\n        getOrdersStatistics: [OrderStatistics!]!\r\n        getProfitStatistics: [ProfitStatistics!]!\r\n    }\r\n\r\n    input GetUsersInput {\r\n        take: Int!\r\n        skip: Int!\r\n        like: String!\r\n    }\r\n\r\n    input GetProductsInput {\r\n        take: Int!\r\n        skip: Int!\r\n        likeName: String!\r\n        orderBy: String!\r\n    }\r\n\r\n    input GetOrdersInput {\r\n        take: Int!\r\n        skip: Int!\r\n        like: String!\r\n        orderStatus: OrderStatus\r\n    }\r\n\r\n    input GetCategoriesInput {\r\n        take: Int!\r\n        skip: Int!\r\n        likeName: String!\r\n    }\r\n\r\n    input GetFilesInput {\r\n        take: Int!\r\n        skip: Int!\r\n        likeFileName: String!\r\n        likeMimetype: String!\r\n    }\r\n\r\n    type Mutation {\r\n        login(loginInput: LoginInput!): AuthResponse!\r\n        register(registerInput: RegisterInput!): String!\r\n        updateMe(updateMeInput: UpdateMeInput!): AuthResponse!\r\n        updateEmail(updateEmailInput: UpdateEmailInput!): String!\r\n        updatePassword(updatePasswordInput: UpdatePasswordInput!): AuthResponse!\r\n        confirmationEmail(token: String!): AuthResponse!\r\n        updateUser(updateUserInput: UpdateUserInput!): User!\r\n        removeUser(email: String!): Boolean!\r\n        createPage(createPageInput: CreatePageInput!): Page!\r\n        updatePage(updatePageInput: UpdatePageInput!): Page!\r\n        updatePages(updatePagesInput: UpdatePagesInput!): [Page!]!\r\n        removePage(slug: String!): Boolean!\r\n        createProduct(createProductInput: CreateProductInput!): Product!\r\n        updateProduct(updateProductInput: UpdateProductInput!): Product!\r\n        removeProduct(slug: String!): Boolean!\r\n        createOrder(createOrderInput: CreateOrderInput!): Order!\r\n        updateOrder(updateOrderInput: UpdateOrderInput!): Order!\r\n        removeOrder(id: Int!): Boolean!\r\n        createCategory(createCategoryInput: CreateCategoryInput!): Category!\r\n        updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!\r\n        removeCategory(slug: String!): Boolean!\r\n        createFile(createFileInput: CreateFileInput!): File!\r\n        updateFile(updateFileInput: UpdateFileInput!): File!\r\n        removeFile(id: Int!): Boolean!\r\n    }\r\n\r\n    input LoginInput {\r\n        email: String!\r\n        password: String!\r\n    }\r\n\r\n    input RegisterInput {\r\n        email: String!\r\n        password: String!\r\n        firstName: String!\r\n        lastName: String!\r\n    }\r\n\r\n    input UpdateMeInput {\r\n        firstName: String!\r\n        lastName: String!\r\n    }\r\n\r\n    input UpdateEmailInput {\r\n        email: String!\r\n    }\r\n\r\n    input UpdatePasswordInput {\r\n        oldPassword: String!\r\n        newPassword: String!\r\n    }\r\n\r\n    input UpdateUserInput {\r\n        id: Float!\r\n        email: String!\r\n        firstName: String!\r\n        lastName: String!\r\n        roles: [UpdateRoleInput!]!\r\n    }\r\n\r\n    input UpdateRoleInput {\r\n        id: Float!\r\n        name: RoleName!\r\n    }\r\n\r\n    input CreatePageInput {\r\n        isShown: Boolean!\r\n        name: String!\r\n        text: String!\r\n    }\r\n\r\n    input UpdatePageInput {\r\n        isShown: Boolean\r\n        name: String\r\n        text: String\r\n        id: Int!\r\n        sorting: Int!\r\n    }\r\n\r\n    input UpdatePagesInput {\r\n        updatePagesInput: [UpdatePageInput!]!\r\n    }\r\n\r\n    input CreateProductInput {\r\n        isShown: Boolean!\r\n        name: String!\r\n        quantity: Float!\r\n        priceUAH: Float!\r\n        description: String!\r\n        characteristics: [CharacteristicInputType!]\r\n        files: [UpdateFileInput!]!\r\n        categories: [UpdateCategoryInput!]!\r\n    }\r\n\r\n    input CharacteristicInputType {\r\n        name: String\r\n        value: String\r\n    }\r\n\r\n    input UpdateFileInput {\r\n        originalName: String\r\n        mimetype: String\r\n        destination: String\r\n        fileName: String\r\n        size: Int\r\n        id: Int!\r\n    }\r\n\r\n    input UpdateCategoryInput {\r\n        isShown: Boolean\r\n        name: String\r\n        description: String\r\n        id: Int!\r\n    }\r\n\r\n    input UpdateProductInput {\r\n        isShown: Boolean\r\n        name: String\r\n        quantity: Float\r\n        priceUAH: Float\r\n        description: String\r\n        characteristics: [CharacteristicInputType!]\r\n        files: [UpdateFileInput!]\r\n        categories: [UpdateCategoryInput!]\r\n        id: Int!\r\n    }\r\n\r\n    input CreateOrderInput {\r\n        email: String!\r\n        firstName: String!\r\n        lastName: String!\r\n        phoneNumber: String!\r\n        address: String!\r\n        deliveryCityCode: String\r\n        deliveryCityName: String\r\n        deliveryWarehouse: String\r\n        shippingMethod: ShippingMethod!\r\n        createProductInOrder: [CreateProductInOrderInput!]!\r\n    }\r\n\r\n    input CreateProductInOrderInput {\r\n        productId: Int!\r\n        productQuantity: Int!\r\n    }\r\n\r\n    input UpdateOrderInput {\r\n        email: String\r\n        firstName: String\r\n        lastName: String\r\n        phoneNumber: String\r\n        address: String\r\n        deliveryCityCode: String\r\n        deliveryCityName: String\r\n        deliveryWarehouse: String\r\n        shippingMethod: ShippingMethod\r\n        createProductInOrder: [CreateProductInOrderInput!]\r\n        id: Int!\r\n        orderStatus: OrderStatus!\r\n    }\r\n\r\n    input CreateCategoryInput {\r\n        isShown: Boolean!\r\n        name: String!\r\n        description: String!\r\n    }\r\n\r\n    input CreateFileInput {\r\n        originalName: String!\r\n        mimetype: String!\r\n        destination: String!\r\n        fileName: String!\r\n        size: Int!\r\n    }\r\n\r\n    # ------------------------------------------------------\r\n    # THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)\r\n    # ------------------------------------------------------\r\n\r\n    type Role {\r\n        id: Int!\r\n        name: RoleName!\r\n        color: String!\r\n        users: [User!]!\r\n    }\r\n\r\n    enum RoleName {\r\n        admin\r\n        moderator\r\n        customer\r\n    }\r\n\r\n    type User {\r\n        id: Int!\r\n        confirmedEmail: Boolean!\r\n        email: String!\r\n        firstName: String!\r\n        lastName: String!\r\n        roles: [Role!]!\r\n        orders: [Order!]!\r\n    }\r\n\r\n    type Order {\r\n        id: Int!\r\n        email: String!\r\n        firstName: String!\r\n        lastName: String!\r\n        phoneNumber: String!\r\n        address: String!\r\n        deliveryCityCode: String\r\n        deliveryCityName: String\r\n        deliveryWarehouse: String\r\n        totalPrice: Float!\r\n        shippingMethod: ShippingMethod!\r\n        orderStatus: OrderStatus!\r\n        user: User!\r\n        userId: Int!\r\n        productsInOrder: [ProductInOrder!]!\r\n        createdAt: DateTime!\r\n        updatedAt: DateTime!\r\n    }\r\n\r\n    enum ShippingMethod {\r\n        warehouse\r\n        courier\r\n    }\r\n\r\n    enum OrderStatus {\r\n        new\r\n        picking\r\n        delivering\r\n        waitingForTheCustomerAtThePickUpPoint\r\n        completed\r\n        canceled\r\n    }\r\n\r\n    type ProductInOrder {\r\n        id: Int!\r\n        product: Product!\r\n        productId: Int!\r\n        productQuantity: Int!\r\n        order: Order!\r\n        orderId: Int!\r\n    }\r\n\r\n    type Product {\r\n        id: Int!\r\n        isShown: Boolean!\r\n        name: String!\r\n        slug: String!\r\n        quantity: Float!\r\n        priceUAH: Float!\r\n        description: String!\r\n        characteristics: [Characteristic!]\r\n        files: [File!]!\r\n        categories: [Category!]\r\n    }\r\n\r\n    type Characteristic {\r\n        name: String\r\n        value: String\r\n    }\r\n\r\n    type File {\r\n        id: Int!\r\n        originalName: String!\r\n        mimetype: String!\r\n        destination: String!\r\n        fileName: String!\r\n        filePath: String!\r\n        fileImage: String!\r\n        size: Int!\r\n        products: [Product!]!\r\n    }\r\n\r\n    type Category {\r\n        id: Int!\r\n        isShown: Boolean!\r\n        name: String!\r\n        slug: String!\r\n        description: String!\r\n        products: [Product!]\r\n    }\r\n\r\n    \"\"\"\r\n    A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.\r\n    \"\"\"\r\n    scalar DateTime\r\n\r\n    type GetUsersResponse {\r\n        users: [User!]!\r\n        total: Int!\r\n    }\r\n\r\n    type AuthResponse {\r\n        user: User!\r\n        accessToken: String!\r\n    }\r\n\r\n    type GetProductsResponse {\r\n        products: [Product!]!\r\n        total: Int!\r\n    }\r\n\r\n    type GetFilesResponse {\r\n        files: [File!]!\r\n        total: Int!\r\n    }\r\n\r\n    type GetCategoriesResponse {\r\n        categories: [Category!]!\r\n        total: Int!\r\n    }\r\n\r\n    type Page {\r\n        id: Int!\r\n        isShown: Boolean!\r\n        name: String!\r\n        slug: String!\r\n        text: String!\r\n        sorting: Int!\r\n    }\r\n\r\n    type GetOrdersResponse {\r\n        orders: [Order!]!\r\n        total: Int!\r\n    }\r\n\r\n    type OrderStatistics {\r\n        date: String\r\n        ordersCount: Int\r\n    }\r\n\r\n    type ProfitStatistics {\r\n        date: String\r\n        totalPrice: Float\r\n    }\r\n\r\n    type Query {\r\n        me: AuthResponse!\r\n        getPage(slug: String!): Page!\r\n        getPages: [Page!]!\r\n        getProducts(getProductsInput: GetProductsInput!): GetProductsResponse!\r\n        getProduct(slug: String!): Product!\r\n        getProductByName(name: String!): Product!\r\n        getProductsHitOfSales: [Product!]!\r\n        getProductsNewest: [Product!]!\r\n        getMyOrderById(id: Int!): Order!\r\n        getMyOrders(getOrdersInput: GetOrdersInput!): GetOrdersResponse!\r\n        getCategories(getCategoriesInput: GetCategoriesInput!): GetCategoriesResponse!\r\n        getCategory(slug: String!): Category!\r\n    }\r\n\r\n    input GetProductsInput {\r\n        take: Int!\r\n        skip: Int!\r\n        likeName: String!\r\n        orderBy: String!\r\n    }\r\n\r\n    input GetOrdersInput {\r\n        take: Int!\r\n        skip: Int!\r\n        like: String!\r\n        orderStatus: OrderStatus\r\n    }\r\n\r\n    input GetCategoriesInput {\r\n        take: Int!\r\n        skip: Int!\r\n        likeName: String!\r\n    }\r\n\r\n    type Mutation {\r\n        login(loginInput: LoginInput!): AuthResponse!\r\n        register(registerInput: RegisterInput!): String!\r\n        updateMe(updateMeInput: UpdateMeInput!): AuthResponse!\r\n        updateEmail(updateEmailInput: UpdateEmailInput!): String!\r\n        updatePassword(updatePasswordInput: UpdatePasswordInput!): AuthResponse!\r\n        confirmationEmail(token: String!): AuthResponse!\r\n        createOrder(createOrderInput: CreateOrderInput!): Order!\r\n        cancelOrder(id: Int!): Order!\r\n    }\r\n\r\n    input LoginInput {\r\n        email: String!\r\n        password: String!\r\n    }\r\n\r\n    input RegisterInput {\r\n        email: String!\r\n        password: String!\r\n        firstName: String!\r\n        lastName: String!\r\n    }\r\n\r\n    input UpdateMeInput {\r\n        firstName: String!\r\n        lastName: String!\r\n    }\r\n\r\n    input UpdateEmailInput {\r\n        email: String!\r\n    }\r\n\r\n    input UpdatePasswordInput {\r\n        oldPassword: String!\r\n        newPassword: String!\r\n    }\r\n\r\n    input CreateOrderInput {\r\n        email: String!\r\n        firstName: String!\r\n        lastName: String!\r\n        phoneNumber: String!\r\n        address: String!\r\n        deliveryCityCode: String\r\n        deliveryCityName: String\r\n        deliveryWarehouse: String\r\n        shippingMethod: ShippingMethod!\r\n        createProductInOrder: [CreateProductInOrderInput!]!\r\n    }\r\n\r\n    input CreateProductInOrderInput {\r\n        productId: Int!\r\n        productQuantity: Int!\r\n    }\r\n\r\n`\r\n\r\n","import {ApolloClient, ApolloLink, HttpLink, InMemoryCache} from '@apollo/client';\r\nimport {baseURL} from '../../admin-area/api/api';\r\nimport {schema} from '../../schema';\r\nimport {getAuthorizationHeader} from '../../utils/localStorageActions';\r\n\r\nexport const gqlLinks = {\r\n    customer: 'graphqlCustomer',\r\n    admin: 'graphqlAdmin',\r\n};\r\n\r\nconst graphqlAdmin = new HttpLink({\r\n    uri: baseURL + '/graphql-admin',\r\n    headers: {\r\n        authorization: getAuthorizationHeader(),\r\n    },\r\n});\r\nconst graphqlCustomer = new HttpLink({\r\n    uri: baseURL + '/graphql-customer',\r\n    headers: {\r\n        authorization: getAuthorizationHeader(),\r\n    },\r\n});\r\n\r\nexport const client = new ApolloClient({\r\n    link: ApolloLink.split(\r\n        operation => operation.getContext().gqlLink === gqlLinks.customer,\r\n        graphqlCustomer, //if above\r\n        graphqlAdmin,\r\n    ),\r\n    cache: new InMemoryCache({addTypename: false}),\r\n    defaultOptions: {\r\n        watchQuery: {\r\n            fetchPolicy: 'network-only',\r\n            errorPolicy: 'all',\r\n            notifyOnNetworkStatusChange: true,\r\n        },\r\n        query: {\r\n            fetchPolicy: 'network-only',\r\n            errorPolicy: 'all',\r\n            notifyOnNetworkStatusChange: true,\r\n        },\r\n    },\r\n    typeDefs: schema,\r\n});\r\n","import {gql} from '@apollo/client';\r\nimport {OrderBy, Product} from '../../types/types';\r\n\r\nexport type GetProductsData = { getProducts: getProductsObject }\r\nexport type getProductsObject = { products: Product[], total: number }\r\n\r\nexport type GetProductsVars = { getProductsInput: getProductsInput }\r\nexport type getProductsInput = {\r\n    take: number,\r\n    skip: number,\r\n    likeName: string,\r\n    orderBy: OrderBy,\r\n}\r\n\r\nexport const GET_PRODUCTS_QUERY = gql`\r\n    query GetProducts($getProductsInput: GetProductsInput!) {\r\n        getProducts(getProductsInput: $getProductsInput) {\r\n            products {\r\n                id\r\n                name\r\n                slug\r\n                isShown\r\n                quantity\r\n                priceUAH\r\n                description\r\n                characteristics {\r\n                    name\r\n                    value\r\n                }\r\n                files {\r\n                    id\r\n                    fileImage\r\n                    filePath\r\n                    mimetype\r\n                    destination\r\n                    fileName\r\n                    size\r\n                    originalName\r\n                }\r\n                categories {\r\n                    id\r\n                    isShown\r\n                    name\r\n                    description\r\n                    slug\r\n                }\r\n            }\r\n            total\r\n        }\r\n    }\r\n`;\r\n\r\nexport type GetProductData = { getProduct: Product }\r\nexport type GetProductVars = { slug: string }\r\n\r\n\r\nexport const GET_PRODUCT_QUERY = gql`\r\n    query GetProduct($slug: String!){\r\n        getProduct(slug: $slug){\r\n            id\r\n            name\r\n            slug\r\n            isShown\r\n            quantity\r\n            priceUAH\r\n            description\r\n            characteristics {\r\n                name\r\n                value\r\n            }\r\n            files {\r\n                id\r\n                fileImage\r\n                filePath\r\n                mimetype\r\n                destination\r\n                fileName\r\n                size\r\n                originalName\r\n            }\r\n            categories {\r\n                id\r\n                isShown\r\n                name\r\n                description\r\n                slug\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type GetProductByNameData = { getProductByName: Product }\r\nexport type GetProductByNameVars = { name: string }\r\n\r\nexport const GET_PRODUCT_BY_NAME_QUERY = gql`\r\n    query GetProductByName($name: String!) {\r\n        getProductByName(name: $name) {\r\n            id\r\n            isShown\r\n            name\r\n            slug\r\n            quantity\r\n            priceUAH\r\n            description\r\n            characteristics {\r\n                name\r\n                value\r\n            }\r\n            files {\r\n                id\r\n                originalName\r\n                mimetype\r\n                destination\r\n                fileName\r\n                filePath\r\n                fileImage\r\n                size\r\n            }\r\n            categories {\r\n                id\r\n                isShown\r\n                name\r\n                description\r\n                slug\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type GetProductsHitOfSalesData = { getProductsHitOfSales: Product[] }\r\nexport type GetProductsHitOfSalesVars = {}\r\n\r\nexport const GET_PRODUCTS_HIT_OF_SALES_QUERY = gql`\r\n    query GetProductsHitOfSales {\r\n        getProductsHitOfSales {\r\n            id\r\n            isShown\r\n            name\r\n            slug\r\n            quantity\r\n            priceUAH\r\n            description\r\n            characteristics {\r\n                name\r\n                value\r\n            }\r\n            files {\r\n                id\r\n                originalName\r\n                mimetype\r\n                destination\r\n                fileName\r\n                filePath\r\n                fileImage\r\n                size\r\n            }\r\n            categories {\r\n                id\r\n                isShown\r\n                name\r\n                description\r\n                slug\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type GetProductsNewestData = { getProductsNewest: Product[] }\r\nexport type GetProductsNewestVars = {}\r\n\r\nexport const GET_PRODUCTS_NEWEST_QUERY = gql`\r\n    query GetProductsNewest {\r\n        getProductsNewest {\r\n            id\r\n            isShown\r\n            name\r\n            slug\r\n            quantity\r\n            priceUAH\r\n            description\r\n            characteristics {\r\n                name\r\n                value\r\n            }\r\n            files {\r\n                id\r\n                originalName\r\n                mimetype\r\n                destination\r\n                fileName\r\n                filePath\r\n                fileImage\r\n                size\r\n            }\r\n            categories {\r\n                id\r\n                isShown\r\n                name\r\n                description\r\n                slug\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport s from './Loading.module.css';\r\nimport {Spin} from \"antd\";\r\n\r\nexport const Loading: React.FC = () => {\r\n    return (\r\n        <div className={s.wrapper_svg}>\r\n            <Spin size={'large'}/>\r\n        </div>\r\n    );\r\n}","import {BaseThunkType, InferActionsTypes} from './redux-store';\r\nimport {Product, ProductInBasket} from '../types/types';\r\nimport {setBasketToLocalStorage} from '../utils/localStorageActions';\r\n\r\nlet initialState = {\r\n    loading: false,\r\n    productsInBasket: [] as ProductInBasket[],\r\n    totalPrice: 0,\r\n};\r\n\r\nconst basketReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_LOADING':\r\n            return {\r\n                ...state,\r\n                loading: action.loading,\r\n            };\r\n        case 'SET_PRODUCTS_TO_BASKET': {\r\n            let totalPrice = 0;\r\n            action.productsInBasket.forEach(productInBasket => totalPrice += productInBasket.product.priceUAH * productInBasket.productQuantity);\r\n            const returnState = {\r\n                ...state,\r\n                productsInBasket: action.productsInBasket,\r\n                totalPrice: totalPrice,\r\n            };\r\n            setBasketToLocalStorage(returnState.productsInBasket);\r\n            return returnState;\r\n        }\r\n        case 'ADD_PRODUCT_TO_BASKET': {\r\n            const newTotalPrice = state.totalPrice + action.product.priceUAH;\r\n            if (state.productsInBasket.some(productInBasket => productInBasket.product === action.product)) {\r\n                var returnState = {\r\n                    ...state,\r\n                    productsInBasket: state.productsInBasket.map(productInBasket =>\r\n                        productInBasket.product === action.product\r\n                            ? {\r\n                                ...productInBasket,\r\n                                productQuantity: productInBasket.productQuantity + 1,\r\n                            }\r\n                            : productInBasket),\r\n                    totalPrice: newTotalPrice,\r\n                };\r\n            } else {\r\n                returnState = {\r\n                    ...state,\r\n                    productsInBasket: [...state.productsInBasket, {product: action.product, productQuantity: 1}],\r\n                    totalPrice: newTotalPrice,\r\n                };\r\n            }\r\n            setBasketToLocalStorage(returnState.productsInBasket);\r\n            return returnState;\r\n        }\r\n        case 'INCREMENT_PRODUCT_IN_BASKET': {\r\n            const newTotalPrice = state.totalPrice + action.productInBasket.product.priceUAH;\r\n            const returnState = {\r\n                ...state,\r\n                productsInBasket: state.productsInBasket.map(productInBasket =>\r\n                    productInBasket === action.productInBasket\r\n                        ? {\r\n                            ...productInBasket,\r\n                            productQuantity: productInBasket.productQuantity + 1,\r\n                        }\r\n                        : productInBasket),\r\n                totalPrice: newTotalPrice,\r\n            };\r\n            setBasketToLocalStorage(returnState.productsInBasket);\r\n            return returnState;\r\n        }\r\n        case 'DECREMENT_PRODUCT_IN_BASKET': {\r\n            if (action.productInBasket.productQuantity === 1)\r\n                var returnState = state;\r\n\r\n            const newTotalPrice = state.totalPrice - action.productInBasket.product.priceUAH;\r\n            returnState = {\r\n                ...state,\r\n                productsInBasket: state.productsInBasket.map(productInBasket =>\r\n                    productInBasket === action.productInBasket\r\n                        ? {\r\n                            ...productInBasket,\r\n                            productQuantity: productInBasket.productQuantity - 1,\r\n                        }\r\n                        : productInBasket),\r\n                totalPrice: newTotalPrice,\r\n            };\r\n            setBasketToLocalStorage(returnState.productsInBasket);\r\n            return returnState;\r\n        }\r\n        case 'REMOVE_PRODUCT_FROM_BASKET': {\r\n            const newTotalPrice = state.totalPrice - (action.productInBasket.product.priceUAH * action.productInBasket.productQuantity);\r\n            const returnState = {\r\n                ...state,\r\n                productsInBasket: state.productsInBasket.filter(productInBasket => productInBasket !== action.productInBasket),\r\n                totalPrice: newTotalPrice,\r\n            };\r\n            setBasketToLocalStorage(returnState.productsInBasket);\r\n            return returnState;\r\n        }\r\n        case 'CLEAR_STATE': {\r\n            const returnState = {\r\n                ...state,\r\n                loading: false,\r\n                productsInBasket: [] as ProductInBasket[],\r\n                totalPrice: 0,\r\n            };\r\n            setBasketToLocalStorage(returnState.productsInBasket);\r\n            return returnState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setLoading: (loading: boolean) => ({\r\n        type: 'SET_LOADING',\r\n        loading,\r\n    } as const),\r\n    setProductsToBasket: (productsInBasket: ProductInBasket[]) => ({\r\n        type: 'SET_PRODUCTS_TO_BASKET',\r\n        productsInBasket,\r\n    } as const),\r\n    addProductToBasket: (product: Product) => ({\r\n        type: 'ADD_PRODUCT_TO_BASKET',\r\n        product,\r\n    } as const),\r\n    incrementProductInBasket: (productInBasket: ProductInBasket) => ({\r\n        type: 'INCREMENT_PRODUCT_IN_BASKET',\r\n        productInBasket,\r\n    } as const),\r\n    decrementProductInBasket: (productInBasket: ProductInBasket) => ({\r\n        type: 'DECREMENT_PRODUCT_IN_BASKET',\r\n        productInBasket,\r\n    } as const),\r\n    removeProductFromBasket: (productInBasket: ProductInBasket) => ({\r\n        type: 'REMOVE_PRODUCT_FROM_BASKET',\r\n        productInBasket,\r\n    } as const),\r\n    clearState: () => ({\r\n        type: 'CLEAR_STATE',\r\n    } as const),\r\n};\r\n\r\nexport const upload = (): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.setLoading(true));\r\n        dispatch(actions.setLoading(false));\r\n    };\r\n\r\nexport default basketReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType>;\r\n","import React, {FC} from 'react';\r\nimport {Product} from '../../../types/types';\r\nimport s from './ProductCard.module.css';\r\nimport {Avatar, Carousel, message} from 'antd';\r\nimport {Link} from 'react-router-dom';\r\nimport {useDispatch} from 'react-redux';\r\nimport {actions} from '../../../redux/basket-reducer';\r\nimport {ShoppingCartOutlined} from '@ant-design/icons';\r\n\r\ntype Props = {\r\n    product: Product\r\n};\r\n\r\nexport const ProductCard: FC<Props> = ({product}) => {\r\n    const dispatch = useDispatch();\r\n    const addToBasketHandler = () => {\r\n        dispatch(actions.addProductToBasket(product));\r\n        message.success(`Product ${product.name} was added to basket`);\r\n    };\r\n\r\n    return (\r\n        <div className={s.productCard}>\r\n            <div className={s.nameAndPhotos}>\r\n                <Link to={`/products/${product.slug}`} className={s.name}>{product.name}</Link>\r\n                <Carousel className={s.carousel}>\r\n                    {product.files?.map(file => (\r\n                        <div className={s.wrapperImage} key={file.id}>\r\n                            <Avatar className={s.image} shape={'square'} size={128} src={file.fileImage}\r\n                                    alt={file.fileName}/>\r\n                        </div>\r\n                    ))}\r\n                </Carousel>\r\n            </div>\r\n            <div className={s.priceAndAddToBasket}>\r\n                <div className={s.price}>{product.priceUAH} UAH</div>\r\n                <button onClick={addToBasketHandler} className=\"buttonSubmit\">\r\n                    <ShoppingCartOutlined/>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport s from './Home.module.css';\r\nimport {useQuery} from '@apollo/client';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {\r\n    GET_PRODUCTS_HIT_OF_SALES_QUERY,\r\n    GET_PRODUCTS_NEWEST_QUERY,\r\n    GetProductsHitOfSalesData,\r\n    GetProductsHitOfSalesVars,\r\n    GetProductsNewestData,\r\n    GetProductsNewestVars,\r\n} from '../../gql/products-query';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {message} from 'antd';\r\nimport {ProductCard} from '../Products/ProductCard';\r\nimport {Carousel} from '@trendyol-js/react-carousel';\r\n\r\nexport const Home: FC = () => {\r\n    const getProductsHitOfSalesQuery = useQuery<GetProductsHitOfSalesData, GetProductsHitOfSalesVars>(GET_PRODUCTS_HIT_OF_SALES_QUERY,\r\n        {\r\n            context: {gqlLink: gqlLinks.customer},\r\n        },\r\n    );\r\n\r\n    const getProductsNewestQuery = useQuery<GetProductsNewestData, GetProductsNewestVars>(GET_PRODUCTS_NEWEST_QUERY,\r\n        {\r\n            context: {gqlLink: gqlLinks.customer},\r\n        },\r\n    );\r\n\r\n    if (getProductsHitOfSalesQuery.error) {\r\n        message.error(getProductsHitOfSalesQuery.error.message);\r\n    }\r\n\r\n    if (getProductsNewestQuery.error) {\r\n        message.error(getProductsNewestQuery.error.message);\r\n    }\r\n\r\n    if (getProductsHitOfSalesQuery.loading || getProductsNewestQuery.loading)\r\n        return <Loading/>;\r\n\r\n    if (getProductsHitOfSalesQuery.data && getProductsNewestQuery.data)\r\n        return (\r\n            <div>\r\n                <div className={s.strongWrapper}>\r\n                    <div className={s.strongTitle}>\r\n                        <h2 className={'bold'}>Hit of sales</h2>\r\n                    </div>\r\n                    <Carousel show={3.5} slide={3} swiping={true}>\r\n                        {getProductsHitOfSalesQuery.data.getProductsHitOfSales.map(productHitOfSalesQuery => (\r\n                            <ProductCard product={productHitOfSalesQuery}/>\r\n                        ))}\r\n                    </Carousel>\r\n                </div>\r\n                <div className={s.strongWrapper}>\r\n                    <div className={s.strongTitle}>\r\n                        <h2 className={'bold'}>Newest</h2>\r\n                    </div>\r\n                    <Carousel show={3.5} slide={3} swiping={true}>\r\n                        {getProductsNewestQuery.data.getProductsNewest.map(productNewest => (\r\n                            <ProductCard product={productNewest}/>\r\n                        ))}\r\n                    </Carousel>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    return null;\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Button, Result} from 'antd';\r\n\r\nexport const Error: FC = () => {\r\n    return (\r\n        <>\r\n            <Result\r\n                status=\"404\"\r\n                title=\"404\"\r\n                subTitle=\"Sorry, the page you visited does not exist.\"\r\n                extra={\r\n                    <Link to={'/'}>\r\n                        <Button type=\"primary\">Back Home</Button>\r\n                    </Link>\r\n                }\r\n            />\r\n        </>\r\n    );\r\n};\r\n","import { AppStateType } from './redux-store';\r\n\r\nexport const s_getAuthData = (state: AppStateType) => {\r\n    return state.auth.authData;\r\n}\r\n\r\nexport const s_getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth;\r\n}\r\n","import {gql} from '@apollo/client';\r\nimport {Page} from '../../types/types';\r\n\r\nexport type GetPagesData = { getPages: Page[] }\r\nexport type GetPagesVars = {}\r\n\r\nexport const GET_PAGES_QUERY = gql`\r\n    query GetPages {\r\n        getPages {\r\n            id\r\n            isShown\r\n            name\r\n            slug\r\n            text\r\n            sorting\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type GetPageData = { getPage: Page }\r\nexport type GetPageVars = { slug: string }\r\n\r\nexport const GET_PAGE_QUERY = gql`\r\n    query GetPage($slug: String!) {\r\n        getPage(slug: $slug) {\r\n            id\r\n            isShown\r\n            name\r\n            slug\r\n            text\r\n            sorting\r\n        }\r\n    }\r\n`;\r\n","import {BaseThunkType, InferActionsTypes} from './redux-store';\r\nimport {Auth} from '../types/types';\r\n\r\nlet initialState = {\r\n    authData: null as null | Auth,\r\n    isAuth: false,\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_AUTH_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setAuthData: (authData: Auth | null, isAuth: boolean) => ({\r\n        type: 'SET_AUTH_DATA',\r\n        payload: {authData, isAuth},\r\n    } as const),\r\n};\r\n\r\nexport const login = (login: Auth): ThunkType => async (dispatch) => {\r\n    localStorage.setItem('token', login.accessToken);\r\n    dispatch(actions.setAuthData(login, true));\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    localStorage.removeItem('token');\r\n    dispatch(actions.setAuthData(null, false));\r\n};\r\n\r\nexport default authReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType>;\r\n","import {RoleName, User} from '../types/types';\r\n\r\nexport const isModeratorOrAdmin = (user: User): boolean => {\r\n    return user.roles.some(role => role.name === RoleName.moderator || role.name === RoleName.admin);\r\n};\r\n\r\n\r\nexport const isAdmin = (user: User): boolean => {\r\n    return user.roles.some(role => role.name === RoleName.admin);\r\n};\r\n","import React, {FC} from 'react';\r\nimport {useQuery} from '@apollo/client';\r\nimport {Link} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {s_getAuthData, s_getIsAuth} from '../../../redux/auth-selectors';\r\nimport s from './Pages.module.css';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {GET_PAGES_QUERY, GetPagesData, GetPagesVars} from '../../gql/pages-query';\r\nimport {logout} from '../../../redux/auth-reducer';\r\nimport {isModeratorOrAdmin} from '../../../utils/authorization';\r\n\r\nexport const Pages: FC = () => {\r\n    const getPagesQuery = useQuery<GetPagesData, GetPagesVars>(GET_PAGES_QUERY,\r\n        {context: {gqlLink: gqlLinks.customer}},\r\n    );\r\n    const authData = useSelector(s_getAuthData);\r\n    const isAuth = useSelector(s_getIsAuth);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className={s.wrapperPages}>\r\n            <div className={s.pages}>\r\n                {getPagesQuery.data?.getPages.map(page => (\r\n                    <Link key={page.id} to={`/pages/${page.slug}`} className={s.page}>{page.name}</Link>\r\n                ))}\r\n                {authData && isModeratorOrAdmin(authData.user)\r\n                && <Link to={`/admin`} className={s.page}>Admin Panel</Link>\r\n                }\r\n            </div>\r\n            {isAuth\r\n                ? (\r\n                    <div className={s.pages}>\r\n                        <Link to={'/account'}>Account</Link>\r\n                        <Link to={'#'} onClick={() => dispatch(logout())}>Logout</Link>\r\n                    </div>\r\n                )\r\n                : (\r\n                    <div className={s.pages}>\r\n                        <Link to={'/auth/login'}>Login</Link>\r\n                        <Link to={'/auth/register'}>Register</Link>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import {gql} from '@apollo/client';\r\nimport {Page} from '../../types/types';\r\n\r\nexport type GetPagesData = { getPages: Page[] }\r\nexport type GetPagesVars = {}\r\n\r\nexport const GET_PAGES_QUERY = gql`\r\n    query GetPages {\r\n        getPages {\r\n            id\r\n            isShown\r\n            name\r\n            slug\r\n            text\r\n            sorting\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type GetPageData = { getPage: Page }\r\nexport type GetPageVars = { slug: string }\r\n\r\nexport const GET_PAGE_QUERY = gql`\r\n    query GetPage($slug: String!) {\r\n        getPage(slug: $slug) {\r\n            id\r\n            isShown\r\n            name\r\n            slug\r\n            text\r\n            sorting\r\n        }\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport {useQuery} from '@apollo/client';\r\nimport {GET_PAGE_QUERY, GetPageData, GetPageVars} from '../../../admin-area/gql/pages-query';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {message} from 'antd';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport parse from 'html-react-parser';\r\nimport {Error} from '../Error/Error';\r\n\r\nexport const PagesView = () => {\r\n    const params = useParams();\r\n    const pageSlug = params.slug || '';\r\n    const getPageQuery = useQuery<GetPageData, GetPageVars>(\r\n        GET_PAGE_QUERY,\r\n        {\r\n            variables: {slug: pageSlug},\r\n            context: {gqlLink: gqlLinks.customer},\r\n        },\r\n    );\r\n\r\n    if (!pageSlug || getPageQuery.error) {\r\n        return <Error/>;\r\n    }\r\n\r\n    if (getPageQuery.loading) {\r\n        return <Loading/>;\r\n    }\r\n\r\n    if (getPageQuery.error) {\r\n        message.error(getPageQuery.error);\r\n    }\r\n\r\n    const page = getPageQuery.data?.getPage;\r\n\r\n    return (\r\n        <div>\r\n            {page && parse(page?.text)}\r\n        </div>\r\n    );\r\n};\r\n","import {gql} from '@apollo/client';\r\nimport {Auth} from '../../types/types';\r\n\r\nexport type LoginData = { login: Auth }\r\nexport type LoginVars = { loginInput: loginInput }\r\n\r\ntype loginInput = { email: string, password: string }\r\n\r\nexport const LOGIN_MUTATION = gql`\r\n    mutation Login($loginInput: LoginInput!){\r\n        login(loginInput: $loginInput){\r\n            accessToken\r\n            user {\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                roles {\r\n                    id\r\n                    name\r\n                    color\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport type ConfirmationEmailData = { confirmationEmail: Auth }\r\nexport type ConfirmationEmailVars = { token: string }\r\n\r\nexport const CONFIRMATION_EMAIL_MUTATION = gql`\r\n    mutation ConfirmationEmail($token: String!) {\r\n        confirmationEmail(token: $token) {\r\n            accessToken\r\n            user {\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                roles {\r\n                    id\r\n                    name\r\n                    color\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport type RegisterData = { register: string }\r\nexport type RegisterVars = { registerInput: registerInput }\r\nexport type registerInput = {\r\n    email: string,\r\n    password: string,\r\n    firstName: string,\r\n    lastName: string,\r\n}\r\n\r\nexport const REGISTER_MUTATION = gql`\r\n    mutation Register($registerInput: RegisterInput!) {\r\n        register(registerInput: $registerInput)\r\n    }\r\n`;\r\n\r\nexport type UpdateMeData = { updateMe: Auth }\r\n\r\nexport type UpdateMeVars = { updateMeInput: updateMeInput }\r\nexport type updateMeInput = { firstName: string, lastName: string }\r\n\r\nexport const UPDATE_ME_MUTATION = gql`\r\n    mutation UpdateMe($updateMeInput: UpdateMeInput!) {\r\n        updateMe(updateMeInput: $updateMeInput) {\r\n            accessToken\r\n            user {\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                roles {\r\n                    id\r\n                    name\r\n                    color\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type UpdateEmailData = { updateEmail: string }\r\nexport type UpdateEmailVars = { updateEmailInput: { email: string } }\r\n\r\nexport const UPDATE_EMAIL_MUTATION = gql`\r\n    mutation UpdateMe($updateEmailInput: UpdateEmailInput!) {\r\n        updateEmail(updateEmailInput: $updateEmailInput)\r\n    }\r\n`;\r\n\r\n\r\nexport type UpdatePasswordData = { updatePassword: Auth }\r\nexport type UpdatePasswordVars = { updatePasswordInput: updatePasswordInput }\r\nexport type updatePasswordInput = {\r\n    oldPassword: string,\r\n    newPassword: string\r\n}\r\n\r\nexport const UPDATE_PASSWORD_MUTATION = gql`\r\n    mutation UpdatePassword($updatePasswordInput: UpdatePasswordInput!) {\r\n        updatePassword(updatePasswordInput: $updatePasswordInput) {\r\n            accessToken\r\n            user {\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                roles {\r\n                    id\r\n                    name\r\n                    color\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\n","import React, {useEffect} from 'react';\r\nimport {useNavigate, useParams} from 'react-router-dom';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {useMutation} from '@apollo/client';\r\nimport {\r\n    CONFIRMATION_EMAIL_MUTATION,\r\n    ConfirmationEmailData,\r\n    ConfirmationEmailVars,\r\n} from '../../../common-area/gql/auth-mutation';\r\nimport {useDispatch} from 'react-redux';\r\nimport {login} from '../../../redux/auth-reducer';\r\nimport {message} from 'antd';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\n\r\nexport const ConfirmationEmail = () => {\r\n    const params = useParams();\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const token = params.token || '';\r\n    const [confirmationEmailMutation] = useMutation<ConfirmationEmailData, ConfirmationEmailVars>(CONFIRMATION_EMAIL_MUTATION,\r\n        {context: {gqlLink: gqlLinks.customer}},\r\n    );\r\n    useEffect(() => {\r\n        confirmationEmailMutation({\r\n            variables: {token: token},\r\n        })\r\n            .then(response => {\r\n                if (response.data) {\r\n                    dispatch(login(response.data.confirmationEmail));\r\n                    message.success('You account successfully has been confirmed');\r\n                    navigate('/');\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                message.error(error.message);\r\n                navigate('/');\r\n            });\r\n    }, []);\r\n    return (\r\n        <div style={{width: '100%', height: '100%'}}>\r\n            <Loading/>\r\n        </div>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Button, Checkbox, Form, Input} from 'antd';\r\nimport {LockOutlined, UserOutlined} from '@ant-design/icons';\r\nimport {Link, Navigate} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {useMutation} from '@apollo/client';\r\nimport s from './AuthLogin.module.css';\r\nimport {s_getIsAuth} from '../../../redux/auth-selectors';\r\nimport {LOGIN_MUTATION, LoginData, LoginVars} from '../../../common-area/gql/auth-mutation';\r\nimport {login} from '../../../redux/auth-reducer';\r\n\r\ntype FormValues = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean,\r\n    rememberAndForgotPass: any\r\n}\r\n\r\nexport const AuthLogin: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector(s_getIsAuth);\r\n    const [loginMutation, loginMutationOptions] = useMutation<LoginData, LoginVars>(LOGIN_MUTATION);\r\n    const [form] = Form.useForm();\r\n\r\n    const onFinish = async ({email, password, remember}: FormValues) => {\r\n        loginMutation({variables: {loginInput: {email, password}}})\r\n            .then(response => {\r\n                if (response.data) {\r\n                    dispatch(login(response.data.login));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                form.setFields([\r\n                    {\r\n                        name: 'rememberAndForgotPass',\r\n                        errors: [error.message],\r\n                    },\r\n                ]);\r\n            });\r\n    };\r\n\r\n    const resetErrors = () => {\r\n        form.resetFields(['rememberAndForgotPass']);\r\n    };\r\n\r\n    if (isAuth)\r\n        return <Navigate to={'/'}/>;\r\n\r\n    return (\r\n        <div className={s.wrapperLoginForm}>\r\n            <div className={s.loginForm}>\r\n                <Form\r\n                    name=\"loginForm\"\r\n                    initialValues={{remember: true}}\r\n                    onFinish={onFinish}\r\n                    form={form}\r\n                >\r\n                    <h2 className={s.title}>\r\n                        <div>Grozer Sports Nutrition</div>\r\n                        <div className=\"badge\">Login</div>\r\n                    </h2>\r\n                    <Form.Item\r\n                        name=\"email\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your Email!'\r\n                            },\r\n                            {\r\n                                type: 'email',\r\n                                message: 'The input is not valid E-mail!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input onInput={resetErrors} prefix={<UserOutlined className=\"site-form-item-icon\"/>}\r\n                               placeholder=\"Email\" type={'email'}/>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"password\"\r\n                        rules={[{required: true, message: 'Please input your Password!'}]}\r\n                    >\r\n                        <Input\r\n                            onInput={resetErrors}\r\n                            prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"rememberAndForgotPass\">\r\n                        <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle className={s.rememberMe}>\r\n                            <Checkbox onClick={resetErrors}>\r\n                                <span className={s.white}>Remember me</span>\r\n                            </Checkbox>\r\n                        </Form.Item>\r\n\r\n                        <Link className={s.forgotPass} to={''}>\r\n                            Forgot password\r\n                        </Link>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button loading={loginMutationOptions.loading} type=\"primary\" htmlType=\"submit\"\r\n                                className={['login-form-button', s.submit].join(' ')}>\r\n                            Log in\r\n                        </Button>\r\n                        <span className={s.white}>Or </span>\r\n                        <Link to={'../register'}>register now!</Link>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Button, Form, Input, message} from 'antd';\r\nimport {LockOutlined, UserOutlined} from '@ant-design/icons';\r\nimport {Link, Navigate, useNavigate} from 'react-router-dom';\r\nimport {useSelector} from 'react-redux';\r\nimport {useMutation} from '@apollo/client';\r\nimport s from './AuthRegister.module.css';\r\nimport {s_getIsAuth} from '../../../redux/auth-selectors';\r\nimport {REGISTER_MUTATION, RegisterData, RegisterVars} from '../../../common-area/gql/auth-mutation';\r\n\r\ntype FormValues = {\r\n    email: string,\r\n    password: string,\r\n    firstName: string,\r\n    lastName: string,\r\n}\r\n\r\nexport const AuthRegister: FC = () => {\r\n    const isAuth = useSelector(s_getIsAuth);\r\n    const navigate = useNavigate();\r\n    const [registerMutation, registerMutationOptions] = useMutation<RegisterData, RegisterVars>(REGISTER_MUTATION);\r\n    const [form] = Form.useForm();\r\n\r\n    const onFinish = async (values: FormValues) => {\r\n        registerMutation({variables: {registerInput: {...values}}})\r\n            .then(response => {\r\n                if (response.data) {\r\n                    message.success(response.data.register);\r\n                    navigate('/');\r\n                }\r\n            })\r\n            .catch(error => {\r\n                form.setFields([\r\n                    {\r\n                        name: 'email',\r\n                        errors: [error.message],\r\n                    },\r\n                ]);\r\n            });\r\n    };\r\n\r\n    if (isAuth)\r\n        return <Navigate to={'/'}/>;\r\n\r\n    return (\r\n        <div className={s.wrapperRegisterForm}>\r\n            <div className={s.registerForm}>\r\n                <Form\r\n                    name=\"registerForm\"\r\n                    initialValues={{remember: true}}\r\n                    onFinish={onFinish}\r\n                    form={form}\r\n                >\r\n                    <h2 className={s.title}>\r\n                        <div>Grozer Sports Nutrition</div>\r\n                        <div className=\"badge\">Register</div>\r\n                    </h2>\r\n                    <Form.Item\r\n                        name=\"email\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your Email!',\r\n                            },\r\n                            {\r\n                                type: 'email',\r\n                                message: 'The input is not valid E-mail!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input prefix={<UserOutlined className=\"site-form-item-icon\"/>}\r\n                               placeholder=\"Email\" type={'email'}/>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"password\"\r\n                        rules={[{required: true, message: 'Please input your Password!'}]}\r\n                    >\r\n                        <Input\r\n                            prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"firstName\"\r\n                        rules={[{required: true, message: 'Please input your FirstName!'}]}\r\n                    >\r\n                        <Input\r\n                            prefix={<UserOutlined className=\"site-form-item-icon\"/>}\r\n                            placeholder=\"FirstName\"\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"lastName\"\r\n                        rules={[{required: true, message: 'Please input your LastName!'}]}\r\n                    >\r\n                        <Input\r\n                            prefix={<UserOutlined className=\"site-form-item-icon\"/>}\r\n                            placeholder=\"LastName\"\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button loading={registerMutationOptions.loading} type=\"primary\" htmlType=\"submit\"\r\n                                className={s.submit}>\r\n                            Register\r\n                        </Button>\r\n                        <span className={s.white}>Or </span>\r\n                        <Link to={'../login'}>login now!</Link>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {Error} from '../Error/Error';\r\nimport {AuthLogin} from './AuthLogin';\r\nimport {AuthRegister} from './AuthRegister';\r\n\r\nexport const AuthController: FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'login'} element={<AuthLogin/>}/>\r\n            <Route path={'register'} element={<AuthRegister/>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n};\r\n","import {AppStateType} from './redux-store';\r\n\r\nexport const s_getLoading = (state: AppStateType) => {\r\n    return state.basket.loading;\r\n};\r\n\r\nexport const s_getTotalPrice = (state: AppStateType) => {\r\n    return state.basket.totalPrice;\r\n};\r\n\r\n\r\nexport const s_getProductsInBasket = (state: AppStateType) => {\r\n    return state.basket.productsInBasket;\r\n};\r\n\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {Link} from 'react-router-dom';\r\nimport {useSelector} from 'react-redux';\r\nimport {s_getTotalPrice} from '../../../redux/basket.selectors';\r\n\r\nexport const Header = () => {\r\n    const totalPrice = useSelector(s_getTotalPrice);\r\n\r\n    return (\r\n        <div className={s.header}>\r\n            <Link to={'/'}>\r\n                <h1 className={s.logo}>\r\n                    <div className={s.grozer}>Grozer</div>\r\n                    <div>Sports Nutrition</div>\r\n                </h1>\r\n            </Link>\r\n            <div className={s.phoneNumber}>\r\n                <h3>(099) 999-99-99</h3>\r\n                <div>Free in Ukraine</div>\r\n            </div>\r\n            <Link to={'/basket'} className={s.basket}>\r\n                <div className={s.basketPrice}>{totalPrice} UAH</div>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n","import {gql} from '@apollo/client';\r\nimport {Category} from '../../types/types';\r\n\r\nexport type GetCategoriesData = { getCategories: getCategoriesObject }\r\nexport type getCategoriesObject = { categories: Category[], total: number }\r\n\r\nexport type GetCategoriesVars = { getCategoriesInput: getCategoriesInput }\r\nexport type getCategoriesInput = {\r\n    take: number,\r\n    skip: number,\r\n    likeName: string,\r\n}\r\n\r\nexport const GET_CATEGORIES_QUERY = gql`\r\n    query GetCategories($getCategoriesInput: GetCategoriesInput!) {\r\n        getCategories(getCategoriesInput: $getCategoriesInput) {\r\n            categories {\r\n                id\r\n                isShown\r\n                name\r\n                slug\r\n                description\r\n                products {\r\n                    id\r\n                    isShown\r\n                    name\r\n                    slug\r\n                    quantity\r\n                    priceUAH\r\n                    description\r\n                    characteristics {\r\n                        name\r\n                        value\r\n                    }\r\n                    files {\r\n                        id\r\n                        originalName\r\n                        mimetype\r\n                        destination\r\n                        fileName\r\n                        filePath\r\n                        fileImage\r\n                        size\r\n                    }\r\n                }\r\n            }\r\n            total\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type GetCategoryData = { getCategory: Category }\r\nexport type GetCategoryVars = { slug: string }\r\n\r\nexport const GET_CATEGORY_QUERY = gql`\r\n    query GetCategory($slug: String!) {\r\n        getCategory(slug: $slug) {\r\n            id\r\n            isShown\r\n            name\r\n            slug\r\n            description\r\n            products {\r\n                id\r\n                isShown\r\n                name\r\n                slug\r\n                quantity\r\n                priceUAH\r\n                description\r\n                characteristics {\r\n                    name\r\n                    value\r\n                }\r\n                files {\r\n                    id\r\n                    originalName\r\n                    mimetype\r\n                    destination\r\n                    fileName\r\n                    filePath\r\n                    fileImage\r\n                    size\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React, {useState} from 'react';\r\nimport s from './MyMenu.module.css';\r\nimport {Link} from 'react-router-dom';\r\nimport {useQuery} from '@apollo/client';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {GET_CATEGORIES_QUERY, GetCategoriesData, GetCategoriesVars} from '../../gql/categories-query';\r\nimport Search from 'antd/es/input/Search';\r\nimport {AutoComplete} from 'antd';\r\n\r\nexport const MyMenu = () => {\r\n    const [pageTake, setPageTake] = useState(10);\r\n    const [pageSkip, setPageSkip] = useState(0);\r\n    const getCategoriesQuery = useQuery<GetCategoriesData, GetCategoriesVars>(GET_CATEGORIES_QUERY,\r\n        {\r\n            variables: {\r\n                getCategoriesInput: {\r\n                    take: pageTake,\r\n                    skip: pageSkip,\r\n                    likeName: '',\r\n                },\r\n            },\r\n            context: {gqlLink: gqlLinks.customer},\r\n        },\r\n    );\r\n\r\n    const [searchedOptions, setSearchedOptions] = useState<{ value: string }[]>([{value: '11'}]);\r\n\r\n    const searchHandler = (value: string) => {\r\n        console.log(value);\r\n    };\r\n\r\n    const selectHandler = (value: string, options: any) => {\r\n        console.log(value);\r\n    };\r\n\r\n    return (\r\n        <div className={s.wrapperMenu}>\r\n            <div className={s.menu}>\r\n                <Link to={'/'} className={s.menuItem}>Home</Link>\r\n                <Link to={'/products'} className={s.menuItem}>Products</Link>\r\n                <div className={s.dropdown}>\r\n                    <button className={[s.menuItem, s.dropdownButton].join(' ')}>Categories</button>\r\n                    <div className={s.dropdownContent}>\r\n                        {getCategoriesQuery.data?.getCategories.categories.map(category => (\r\n                            <Link to={`/categories/${category.slug}`}>{category.name}</Link>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.searchWrapper}>\r\n                <AutoComplete\r\n                    options={searchedOptions}\r\n                    onSearch={searchHandler}\r\n                    onSelect={selectHandler}\r\n                    style={{width: '100%'}}\r\n                >\r\n                    <Search placeholder=\"Search\"/>\r\n                </AutoComplete>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Button, Result} from 'antd';\r\n\r\nexport const Error: FC = () => {\r\n    return (\r\n        <>\r\n            <Result\r\n                status=\"404\"\r\n                title=\"404\"\r\n                subTitle=\"Sorry, the page you visited does not exist.\"\r\n                extra={\r\n                    <Link to={'/admin'}>\r\n                        <Button type=\"primary\">Back Home</Button>\r\n                    </Link>\r\n                }\r\n            />\r\n        </>\r\n    );\r\n};\r\n","export const getStringFromCamelCase = (inputString: string): string => {\r\n    const words = inputString.match(/[A-Za-z][a-z]*/g) || [];\r\n    return words.map(localeLowerCase).join(' ');\r\n};\r\n\r\nconst localeLowerCase = (word: string): string => {\r\n    return word.charAt(0).toLocaleLowerCase() + word.substring(1);\r\n};\r\n\r\n\r\nexport const getStringFromDate = (inputString: string): string => {\r\n    const dateAndTime = inputString.split('T');\r\n    return `${dateAndTime[0]} ${dateAndTime[1].substring(0, dateAndTime[1].length - 5)}`;\r\n};\r\n\r\nexport const getStringDateFromDate = (inputString: string): string => {\r\n    const dateAndTime = inputString.split('T');\r\n    return `${dateAndTime[0]}`;\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useQuery} from '@apollo/client';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {GET_PRODUCTS_QUERY, GetProductsData, getProductsObject, GetProductsVars} from '../../gql/products-query';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {ProductCard} from './ProductCard';\r\nimport s from './ProductsIndex.module.css';\r\nimport {OrderBy} from '../../../types/types';\r\nimport {Select} from 'antd';\r\nimport {getStringFromCamelCase} from '../../../utils/stringActions';\r\n\r\nexport const ProductsIndex = () => {\r\n    const [pageTake, setPageTake] = useState(12);\r\n    const [pageSkip, setPageSkip] = useState(0);\r\n    const [orderBy, setOrderBy] = useState<OrderBy>(OrderBy.newest);\r\n    const getProductsQuery = useQuery<GetProductsData, GetProductsVars>(GET_PRODUCTS_QUERY,\r\n        {\r\n            variables: {\r\n                getProductsInput: {\r\n                    take: pageTake,\r\n                    skip: pageSkip,\r\n                    likeName: '',\r\n                    orderBy: orderBy,\r\n                },\r\n            },\r\n            context: {gqlLink: gqlLinks.customer},\r\n        },\r\n    );\r\n    const [productsObj, setProductsObj] = useState<getProductsObject>({products: [], total: 0});\r\n\r\n    useEffect(() => {\r\n        if (getProductsQuery.data?.getProducts) {\r\n            setProductsObj({\r\n                products: [...productsObj.products, ...getProductsQuery.data.getProducts.products],\r\n                total: getProductsQuery.data.getProducts.total,\r\n            });\r\n        }\r\n    }, [getProductsQuery.data?.getProducts]);\r\n\r\n    const productsScrollHandler = async (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        let scrollPosition = Math.abs(element.scrollHeight - element.scrollTop) - element.clientHeight;\r\n        if (scrollPosition < 50 && !getProductsQuery.loading && (pageTake + pageSkip) < productsObj.total) {\r\n            const newPageSkip = pageSkip + pageTake;\r\n            setPageSkip(newPageSkip);\r\n            await getProductsQuery.refetch({\r\n                getProductsInput: {\r\n                    skip: newPageSkip,\r\n                    take: pageTake,\r\n                    likeName: '',\r\n                    orderBy: orderBy,\r\n                },\r\n            });\r\n        }\r\n    };\r\n\r\n    const orderByChangeHandler = async (value: OrderBy) => {\r\n        const newPageSkip = 0;\r\n        setPageSkip(newPageSkip);\r\n        setOrderBy(value);\r\n        setProductsObj({products: [], total: 0});\r\n        await getProductsQuery.refetch({\r\n            getProductsInput: {\r\n                skip: newPageSkip,\r\n                take: pageSkip,\r\n                likeName: '',\r\n                orderBy: value,\r\n            },\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={s.wrapperProducts} onScroll={productsScrollHandler}>\r\n            <Select defaultValue={orderBy} className={s.orderBy} onChange={orderByChangeHandler}>\r\n                {(Object.keys(OrderBy) as Array<keyof typeof OrderBy>).map((key, i) => (\r\n                    <Select.Option value={key} key={i}>{getStringFromCamelCase(key)}</Select.Option>\r\n                ))}\r\n            </Select>\r\n            <div className={s.products}>\r\n                {productsObj.products.map(product => (\r\n                    <ProductCard product={product} key={product.id}/>\r\n                ))}\r\n            </div>\r\n            {getProductsQuery.loading && <Loading/>}\r\n        </div>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Link, useParams} from 'react-router-dom';\r\nimport {useQuery} from '@apollo/client';\r\nimport {GET_PRODUCT_QUERY, GetProductData, GetProductVars} from '../../gql/products-query';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {Avatar, Card, Carousel, message, Table, Tag} from 'antd';\r\nimport s from './ProductsView.module.css';\r\nimport parse from 'html-react-parser';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {Error} from '../Error/Error';\r\nimport {ShoppingCartOutlined} from '@ant-design/icons';\r\nimport {actions} from '../../../redux/basket-reducer';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nexport const ProductsView: FC = () => {\r\n    const params = useParams();\r\n    const productSlug = params.slug || '';\r\n    const getProductQuery = useQuery<GetProductData, GetProductVars>(\r\n        GET_PRODUCT_QUERY,\r\n        {\r\n            variables: {slug: productSlug},\r\n            context: {gqlLink: gqlLinks.customer},\r\n        },\r\n    );\r\n    const dispatch = useDispatch();\r\n\r\n    const columns = [\r\n        {\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            dataIndex: 'value',\r\n            key: 'value',\r\n        },\r\n    ];\r\n\r\n    const addToBasketHandler = () => {\r\n        if (getProductQuery.data?.getProduct) {\r\n            dispatch(actions.addProductToBasket(getProductQuery.data.getProduct));\r\n            message.success(`Product ${getProductQuery.data.getProduct.name} was added to basket`);\r\n        }\r\n\r\n    };\r\n\r\n    if (!productSlug || getProductQuery.error)\r\n        return <Error/>;\r\n\r\n    if (getProductQuery.loading)\r\n        return <Loading/>;\r\n\r\n    const product = getProductQuery.data?.getProduct;\r\n    return (\r\n        <>\r\n            <div className={s.photosAndMainInfo}>\r\n                <Carousel autoplay className={s.carousel}>\r\n                    {product?.files.map(file => (\r\n                        <Avatar key={file.id} className={s.image} shape={'square'} src={file.fileImage} size={256}/>\r\n                    ))}\r\n                </Carousel>\r\n                <div>\r\n                    <header>{product?.name}</header>\r\n                    <table className=\"infoTable\">\r\n                        <tbody>\r\n                        <tr>\r\n                            <td>Id:</td>\r\n                            <td>\r\n                                <span># {product?.id}</span>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Quantity:</td>\r\n                            <td>\r\n                                <span>{product?.quantity}</span>\r\n                            </td>\r\n                        </tr>\r\n                        {(product && product?.categories.length > 0) && (\r\n                            <tr>\r\n                                <td>Categories:</td>\r\n                                <td>{product?.categories.map(category => (\r\n                                    <Tag color={'cyan'}>\r\n                                        <Link key={category.id}\r\n                                              to={'../../categories/' + category.slug}>{category.name}</Link>\r\n                                    </Tag>\r\n                                ))}\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n                        </tbody>\r\n                    </table>\r\n                    <div className={s.priceAndAddToBasket}>\r\n                        <div className={s.price}>{product?.priceUAH} UAH</div>\r\n                        <button onClick={addToBasketHandler} className=\"buttonSubmit\">\r\n                            <ShoppingCartOutlined/>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.cards}>\r\n                <Card title=\"Description\" className={s.card}>{product && parse(product?.description)}</Card>\r\n                <Card title=\"Characteristics\" className={s.card}>\r\n                    <Table showHeader={false} dataSource={product?.characteristics}\r\n                           columns={columns} pagination={false}/>\r\n                </Card>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {Error} from '../../../admin-area/components/Error/Error';\r\nimport {ProductsIndex} from './ProductsIndex';\r\nimport {ProductsView} from './ProductsView';\r\n\r\nexport const ProductsController = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<ProductsIndex/>}/>\r\n            <Route path={'/:slug'} element={<ProductsView/>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Avatar, Popconfirm} from 'antd';\r\nimport {DeleteOutlined, EyeOutlined, FormOutlined} from '@ant-design/icons';\r\nimport s from './ButtonsVUR.module.css';\r\n\r\ntype Props = {\r\n    viewUrlA?: string,\r\n    viewUrl?: string,\r\n    onView?: () => void,\r\n    updateUrl?: string,\r\n    onUpdate?: () => void,\r\n    removeUrl?: string,\r\n    onRemove?: () => void,\r\n}\r\n\r\nexport const ButtonsVUR: FC<Props> = ({viewUrlA, viewUrl, updateUrl, removeUrl, onView, onUpdate, onRemove}) => {\r\n    return (\r\n        <>\r\n            <div className={s.buttonsVUR}>\r\n                {onView ?\r\n                    <div className={s.buttonView} onClick={onView}>\r\n                        <Avatar size={28} icon={<EyeOutlined/>}/>\r\n                    </div>\r\n                    : viewUrlA\r\n                        ? <a href={viewUrlA} target={'blank'} className={s.buttonView}>\r\n                            <Avatar size={28} icon={<EyeOutlined/>}/>\r\n                        </a>\r\n                        : viewUrl && <Link to={viewUrl} className={s.buttonView}>\r\n                        <Avatar size={28} icon={<EyeOutlined/>}/>\r\n                    </Link>\r\n                }\r\n                {onUpdate ?\r\n                    <div className={s.buttonUpdate} onClick={onUpdate}>\r\n                        <Avatar size={28} icon={<FormOutlined/>}/>\r\n                    </div>\r\n                    : updateUrl &&\r\n                    <Link to={updateUrl} className={s.buttonUpdate}>\r\n                        <Avatar size={28} icon={<FormOutlined/>}/>\r\n                    </Link>\r\n                }\r\n                {onRemove ?\r\n                    <Popconfirm\r\n                        title=\"Are you sure that you want to delete?\"\r\n                        onConfirm={onRemove}\r\n                        okText=\"Yes\"\r\n                        cancelText=\"No\"\r\n                    >\r\n                        <div className={s.buttonRemove}>\r\n                            <Avatar size={28} icon={<DeleteOutlined/>}/>\r\n                        </div>\r\n                    </Popconfirm>\r\n\r\n                    : removeUrl &&\r\n                    <Link to={removeUrl} className={s.buttonRemove}>\r\n                        <Avatar size={28} icon={<DeleteOutlined/>}/>\r\n                    </Link>\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {Avatar, Carousel, Table} from 'antd';\r\nimport {ButtonsVUR} from '../../../admin-area/components/ButtonsVUD/ButtonsVUR';\r\nimport {ProductInBasket} from '../../../types/types';\r\nimport s from './PinnedProductsInOrder.module.css';\r\nimport {MinusOutlined, PlusOutlined} from '@ant-design/icons';\r\nimport {actions} from '../../../redux/basket-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {s_getProductsInBasket, s_getTotalPrice} from '../../../redux/basket.selectors';\r\n\r\ntype Props = {\r\n    loading: boolean,\r\n}\r\n\r\nexport const PinnedProductsInOrder: React.FC<Props> = ({loading}) => {\r\n    const productsInBasket = useSelector(s_getProductsInBasket);\r\n    const totalPrice = useSelector(s_getTotalPrice);\r\n    const dispatch = useDispatch();\r\n\r\n    const decrementProductInBasketHandler = (productInBasket: ProductInBasket) => {\r\n        dispatch(actions.decrementProductInBasket(productInBasket));\r\n    };\r\n\r\n    const incrementProductInBasketHandler = (productInBasket: ProductInBasket) => {\r\n        dispatch(actions.incrementProductInBasket(productInBasket));\r\n    };\r\n\r\n    const removeProductsFromBasketHandler = (productInBasket: ProductInBasket) => {\r\n        dispatch(actions.removeProductFromBasket(productInBasket));\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Id',\r\n            dataIndex: 'id',\r\n            render: (text: any, productInBasket: ProductInBasket) => <>#{productInBasket.product.id}</>,\r\n        },\r\n        {\r\n            title: 'Image',\r\n            dataIndex: 'fileImage',\r\n            render: (text: any, productInBasket: ProductInBasket) => (\r\n                <Carousel className={s.carousel}>\r\n                    {productInBasket?.product?.files?.map(file => (\r\n                        <Avatar key={file.id} className={s.image} shape={'square'} size={64} src={file.fileImage}\r\n                                alt={file.fileName}/>\r\n                    ))}\r\n                </Carousel>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: (text: any, productInBasket: ProductInBasket) => <span>{productInBasket.product.name}</span>,\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'priceUAH',\r\n            key: 'priceUAH',\r\n            render: (text: any, productInBasket: ProductInBasket) => <span>{productInBasket.product.priceUAH} UAH</span>,\r\n        },\r\n        {\r\n            title: 'Quantity',\r\n            dataIndex: 'quantity',\r\n            key: 'quantity',\r\n            render: (text: any, productInBasket: ProductInBasket) => (\r\n                <div className={s.quantity}>\r\n                    <button type={'button'}\r\n                            className={s.buttonPlusMinus}\r\n                            onClick={() => decrementProductInBasketHandler(productInBasket)}>\r\n                        <MinusOutlined/>\r\n                    </button>\r\n                    <div className={s.quantityNumber}>{productInBasket.productQuantity}</div>\r\n                    <button type={'button'}\r\n                            className={s.buttonPlusMinus}\r\n                            onClick={() => incrementProductInBasketHandler(productInBasket)}>\r\n                        <PlusOutlined/>\r\n                    </button>\r\n                </div>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Total price',\r\n            dataIndex: 'totalPrice',\r\n            key: 'totalPrice',\r\n            render: (text: any, productInBasket: ProductInBasket) => <span>{productInBasket.product.priceUAH * productInBasket.productQuantity} UAH</span>,\r\n        },\r\n        {\r\n            title: 'Actions',\r\n            dataIndex: 'actions',\r\n            key: 'actions',\r\n            render: (text: any, productInBasket: ProductInBasket) => (\r\n                <ButtonsVUR onRemove={() => removeProductsFromBasketHandler(productInBasket)}/>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Table columns={columns} dataSource={productsInBasket} pagination={false} loading={loading} rowKey={'id'}/>\r\n            <h2 className={s.totalPrice}>Total price: {totalPrice} UAH</h2>\r\n        </>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport {s_getProductsInBasket} from '../../../redux/basket.selectors';\r\nimport {useSelector} from 'react-redux';\r\nimport {Link} from 'react-router-dom';\r\nimport {PinnedProductsInOrder} from '../../../common-area/components/PinnedProductsInOrder/PinnedProductsInOrder';\r\n\r\nexport const BasketIndex = () => {\r\n    const productsInBasket = useSelector(s_getProductsInBasket);\r\n\r\n    return (\r\n        <div>\r\n            <PinnedProductsInOrder loading={false}/>\r\n            {productsInBasket.length > 0 && <Link to={'./place-an-order'}>\r\n                <button className=\"buttonSubmit\">Place an order</button>\r\n            </Link>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import {AppStateType} from './redux-store';\r\n\r\nexport const s_getCitiesLoading = (state: AppStateType) => {\r\n    return state.novaPoshta.citiesLoading;\r\n};\r\n\r\nexport const s_getWarehousesLoading = (state: AppStateType) => {\r\n    return state.novaPoshta.wareHousesLoading;\r\n};\r\n\r\nexport const s_getCities = (state: AppStateType) => {\r\n    return state.novaPoshta.cities;\r\n};\r\n\r\n\r\nexport const s_getWarehouses = (state: AppStateType) => {\r\n    return state.novaPoshta.warehouses;\r\n};\r\n\r\nexport const s_getCitiesError = (state: AppStateType) => {\r\n    return state.novaPoshta.citiesError\r\n};\r\n","import axios from 'axios';\r\n\r\nexport const novaPoshtaInstance = axios.create({\r\n    baseURL: 'https://api.novaposhta.ua/v2.0/json/',\r\n});\r\n","import {novaPoshtaInstance} from './api';\r\nimport {City, Warehouse} from '../../types/types';\r\n\r\nconst novaPoshtaApiKey = '8436b00089360cc4affd93ea6a7c5827';\r\n\r\nexport const novaPoshtaAPI = {\r\n    getCities(likeCityName: string) {\r\n        return novaPoshtaInstance.post<GetCitiesResponse>('', JSON.stringify({\r\n            'apiKey': novaPoshtaApiKey,\r\n            'modelName': 'Address',\r\n            'calledMethod': 'searchSettlements',\r\n            'methodProperties': {\r\n                'CityName': likeCityName,\r\n                'Limit': 15,\r\n            },\r\n        })).then(res => res.data);\r\n    },\r\n    getWarehouses(deliveryCity: string) {\r\n        return novaPoshtaInstance.post<getWarehouseResponse>('', JSON.stringify({\r\n            'apiKey': novaPoshtaApiKey,\r\n            'modelName': 'Address',\r\n            'calledMethod': 'getWarehouses',\r\n            'methodProperties': {\r\n                'CityRef': deliveryCity,\r\n            },\r\n        })).then(res => res.data);\r\n    },\r\n};\r\n\r\nexport type GetCitiesResponse = {\r\n    success: boolean,\r\n    data: [\r\n        {\r\n            TotalCount: number,\r\n            Addresses: City[],\r\n        }\r\n    ]\r\n    errors: string[],\r\n}\r\n\r\nexport type getWarehouseResponse = {\r\n    success: boolean,\r\n    data: Warehouse[],\r\n    errors: string[],\r\n}\r\n","import {BaseThunkType, InferActionsTypes} from './redux-store';\r\nimport {novaPoshtaAPI} from '../common-area/api/nova-poshta';\r\nimport {City, Warehouse} from '../types/types';\r\n\r\nlet initialState = {\r\n    citiesLoading: false,\r\n    wareHousesLoading: false,\r\n    cities: [] as City[],\r\n    warehouses: [] as Warehouse[],\r\n    citiesError: null as null | string,\r\n};\r\n\r\nconst novaPoshtaReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_CITIES_LOADING':\r\n            return {\r\n                ...state,\r\n                citiesLoading: action.loading,\r\n            };\r\n        case 'SET_WAREHOUSES_LOADING':\r\n            return {\r\n                ...state,\r\n                wareHousesLoading: action.loading,\r\n            };\r\n        case 'SET_CITIES':\r\n            return {\r\n                ...state,\r\n                cities: action.cities,\r\n            };\r\n        case 'SET_WAREHOUSES':\r\n            return {\r\n                ...state,\r\n                warehouses: action.warehouses,\r\n            };\r\n        case 'CLEAR_STATE':\r\n            return {\r\n                ...state,\r\n                citiesLoading: false,\r\n                wareHousesLoading: false,\r\n                cities: [],\r\n                warehouses: [],\r\n            };\r\n        case 'SET_CITIES_ERROR':\r\n            return {\r\n                ...state,\r\n                citiesError: action.error,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setCitiesLoading: (loading: boolean) => ({\r\n        type: 'SET_CITIES_LOADING',\r\n        loading,\r\n    } as const),\r\n    setWarehousesLoading: (loading: boolean) => ({\r\n        type: 'SET_WAREHOUSES_LOADING',\r\n        loading,\r\n    } as const),\r\n    setCities: (cities: City[]) => ({\r\n        type: 'SET_CITIES',\r\n        cities,\r\n    } as const),\r\n    setWarehouses: (warehouses: Warehouse[]) => ({\r\n        type: 'SET_WAREHOUSES',\r\n        warehouses,\r\n    } as const),\r\n    clearState: () => ({\r\n        type: 'CLEAR_STATE',\r\n    } as const),\r\n    setCitiesError: (error: string | null) => ({\r\n        type: 'SET_CITIES_ERROR',\r\n        error,\r\n    } as const),\r\n};\r\n\r\nexport const loadCities = (likeCityName: string): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.setCitiesLoading(true));\r\n        const getCitiesResponse = await novaPoshtaAPI.getCities(likeCityName);\r\n        if (getCitiesResponse.data[0] && getCitiesResponse.data[0].Addresses.length > 0)\r\n            dispatch(actions.setCities(getCitiesResponse.data[0].Addresses));\r\n        else\r\n            dispatch(actions.setCitiesError('City is not found'));\r\n        dispatch(actions.setCitiesLoading(false));\r\n    };\r\n\r\nexport const loadWarehouses = (deliveryCity: string): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.setWarehousesLoading(true));\r\n        const getWarehousesResponse = await novaPoshtaAPI.getWarehouses(deliveryCity);\r\n        dispatch(actions.setWarehouses(getWarehousesResponse.data));\r\n        dispatch(actions.setWarehousesLoading(false));\r\n    };\r\n\r\nexport default novaPoshtaReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType>;\r\n","import {Order, ShippingMethod} from '../../types/types';\r\nimport {gql} from '@apollo/client';\r\n\r\nexport type CreateOrderData = { createOrder: Order }\r\n\r\nexport type CreateOrderVars = { createOrderInput: createOrderInput }\r\nexport type createOrderInput = {\r\n    email: string,\r\n    firstName: string,\r\n    lastName: string,\r\n    phoneNumber: string,\r\n    address: string,\r\n    deliveryCityName: string,\r\n    deliveryCityCode: string,\r\n    deliveryWarehouse: string,\r\n    shippingMethod: ShippingMethod,\r\n    createProductInOrder: CreateProductInOrderInput[]\r\n}\r\n\r\nexport type CreateProductInOrderInput = {\r\n    productId: number,\r\n    productQuantity: number\r\n}\r\n\r\nexport const CREATE_ORDER_MUTATION = gql`\r\n    mutation CreateOrder($createOrderInput: CreateOrderInput!) {\r\n        createOrder(createOrderInput: $createOrderInput) {\r\n            id\r\n            email\r\n            firstName\r\n            lastName\r\n            phoneNumber\r\n            address\r\n            deliveryCityName\r\n            deliveryCityCode\r\n            deliveryWarehouse\r\n            shippingMethod\r\n            orderStatus\r\n            user {\r\n                id\r\n                confirmedEmail\r\n                email\r\n                firstName\r\n                lastName\r\n            }\r\n            productsInOrder {\r\n                productQuantity\r\n                product {\r\n                    id\r\n                    name\r\n                    slug\r\n                    isShown\r\n                    quantity\r\n                    priceUAH\r\n                    description\r\n                    characteristics {\r\n                        name\r\n                        value\r\n                    }\r\n                    files {\r\n                        id\r\n                        fileImage\r\n                        filePath\r\n                        mimetype\r\n                        destination\r\n                        fileName\r\n                        size\r\n                        originalName\r\n                    }\r\n                    categories {\r\n                        id\r\n                        isShown\r\n                        name\r\n                        description\r\n                        slug\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type CancelOrderData = { cancelOrder: Order }\r\nexport type CancelOrderVars = { id: number }\r\n\r\nexport const CANCEL_ORDER_MUTATION = gql`\r\n    mutation CancelOrder($id: Int!) {\r\n        cancelOrder(id: $id) {\r\n            id\r\n            email\r\n            firstName\r\n            lastName\r\n            phoneNumber\r\n            address\r\n            deliveryCityName\r\n            deliveryCityCode\r\n            deliveryWarehouse\r\n            shippingMethod\r\n            orderStatus\r\n            user {\r\n                id\r\n                confirmedEmail\r\n                email\r\n                firstName\r\n                lastName\r\n            }\r\n            productsInOrder {\r\n                productQuantity\r\n                product {\r\n                    id\r\n                    name\r\n                    slug\r\n                    isShown\r\n                    quantity\r\n                    priceUAH\r\n                    description\r\n                    characteristics {\r\n                        name\r\n                        value\r\n                    }\r\n                    files {\r\n                        id\r\n                        fileImage\r\n                        filePath\r\n                        mimetype\r\n                        destination\r\n                        fileName\r\n                        size\r\n                        originalName\r\n                    }\r\n                    categories {\r\n                        id\r\n                        isShown\r\n                        name\r\n                        description\r\n                        slug\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {AutoComplete, Button, Form, Input, Radio, Select} from 'antd';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {s_getAuthData} from '../../../redux/auth-selectors';\r\nimport {ShippingMethod} from '../../../types/types';\r\nimport Search from 'antd/es/input/Search';\r\nimport {\r\n    s_getCities,\r\n    s_getCitiesError,\r\n    s_getCitiesLoading,\r\n    s_getWarehouses,\r\n    s_getWarehousesLoading,\r\n} from '../../../redux/nova-poshta.selectors';\r\nimport debounce from 'lodash.debounce';\r\nimport {actions, loadCities, loadWarehouses} from '../../../redux/nova-poshta-reducer';\r\nimport {message} from 'antd/es';\r\nimport {useMutation} from '@apollo/client';\r\nimport {CREATE_ORDER_MUTATION, CreateOrderData, CreateOrderVars} from '../../gql/orders-mutation';\r\nimport {s_getProductsInBasket} from '../../../redux/basket.selectors';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {Navigate, useNavigate} from 'react-router-dom';\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: {span: 24},\r\n        sm: {span: 4},\r\n    },\r\n    wrapperCol: {\r\n        xs: {span: 24},\r\n        sm: {span: 16},\r\n    },\r\n};\r\nconst tailFormItemLayout = {\r\n    wrapperCol: {\r\n        xs: {span: 24, offset: 0},\r\n        sm: {span: 16, offset: 4},\r\n    },\r\n};\r\n\r\nexport const BasketPlaceAnOrder = () => {\r\n    const [form] = Form.useForm();\r\n    const authData = useSelector(s_getAuthData);\r\n    const dispatch = useDispatch();\r\n    const [shippingMethod, setShippingMethod] = useState<ShippingMethod>(ShippingMethod.warehouse);\r\n    const cities = useSelector(s_getCities);\r\n    const warehouses = useSelector(s_getWarehouses);\r\n    const citiesLoading = useSelector(s_getCitiesLoading);\r\n    const warehousesLoading = useSelector(s_getWarehousesLoading);\r\n    const [selectedCity, setSelectedCity] = useState<{ value?: string, deliveryCity?: string } | null>(null);\r\n    const [createOrderMutation, createOrderMutationOption] = useMutation<CreateOrderData, CreateOrderVars>(CREATE_ORDER_MUTATION,\r\n        {context: {gqlLink: gqlLinks.customer}},\r\n    );\r\n    const productsInBasket = useSelector(s_getProductsInBasket);\r\n    const citiesError = useSelector(s_getCitiesError);\r\n    const navigate = useNavigate();\r\n    const isAuth = useSelector(s_getAuthData);\r\n\r\n    useEffect(() => {\r\n        if (citiesError) {\r\n            form.setFields([\r\n                {\r\n                    name: 'city',\r\n                    errors: [citiesError],\r\n                },\r\n            ]);\r\n            dispatch(actions.setCitiesError(null));\r\n        }\r\n    }, [citiesError]);\r\n\r\n    const onFinish = async (values: {\r\n        email: string, phoneNumber: string,\r\n        firstName: string, lastName: string,\r\n        shippingMethod: ShippingMethod, address: string, city: string, warehouse: string\r\n    }) => {\r\n        const {city, warehouse, address, ...restValues} = values;\r\n        console.log('Received values of form: ', values);\r\n        let newAddress = values.address;\r\n        if (shippingMethod === 'warehouse')\r\n            newAddress = values.city + ' ' + values.warehouse;\r\n        createOrderMutation({\r\n            variables: {\r\n                createOrderInput: {\r\n                    ...restValues,\r\n                    address: newAddress,\r\n                    deliveryCityCode: selectedCity?.deliveryCity as string,\r\n                    deliveryCityName: selectedCity?.value as string,\r\n                    deliveryWarehouse: warehouse,\r\n                    createProductInOrder: productsInBasket.map(productsInBasket => ({\r\n                        productId: productsInBasket.product.id,\r\n                        productQuantity: productsInBasket.productQuantity,\r\n                    })),\r\n                },\r\n            },\r\n        })\r\n            .then(() => {\r\n                dispatch(actions.clearState());\r\n                message.success('Order successfully created');\r\n                navigate('/');\r\n            })\r\n            .catch(error => {\r\n                message.error(error.message);\r\n            });\r\n    };\r\n\r\n    const onSearchCityHandler = async (value: string) => {\r\n        dispatch(actions.setWarehouses([]));\r\n        dispatch(actions.setCities([]));\r\n        setSelectedCity(null);\r\n        form.setFields([{\r\n            name: 'department',\r\n            value: '',\r\n        }]);\r\n        value.trim() === '' || dispatch(loadCities(value));\r\n    };\r\n\r\n    const debouncedSearchCityHandler = useCallback(debounce(nextValue => onSearchCityHandler(nextValue), 500), []);\r\n    const searchCityHandler = (value: string) => debouncedSearchCityHandler(value);\r\n\r\n    const selectCityHandler = (value: string, option: any) => {\r\n        console.log(option);\r\n        setSelectedCity(option);\r\n        dispatch(loadWarehouses(option.deliveryCity));\r\n    };\r\n\r\n    if (!isAuth)\r\n        return <Navigate to={'../../auth/login'}/>;\r\n\r\n    if (!productsInBasket.length) {\r\n        return <Navigate to={'/'}/>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form\r\n                {...formItemLayout}\r\n                form={form}\r\n                name=\"place-an-order\"\r\n                onFinish={onFinish}\r\n                initialValues={{\r\n                    email: authData?.user.email,\r\n                    firstName: authData?.user.firstName,\r\n                    lastName: authData?.user.lastName,\r\n                    shippingMethod: shippingMethod,\r\n                }}\r\n                scrollToFirstError\r\n            >\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    label=\"E-mail\"\r\n                    rules={[\r\n                        {\r\n                            type: 'email',\r\n                            message: 'The input is not valid E-mail!',\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your E-mail!',\r\n                            whitespace: true,\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input placeholder={'E-mail'} type={'email'}/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"phoneNumber\"\r\n                    label=\"PhoneNumber\"\r\n                    rules={[{required: true, message: 'Please input your PhoneNumber!', whitespace: true}]}\r\n                >\r\n                    <Input placeholder={'+38 (099) 999-99-99'}/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"firstName\"\r\n                    label=\"FirstName\"\r\n                    rules={[{required: true, message: 'Please input your FirstName!', whitespace: true}]}\r\n                >\r\n                    <Input placeholder={'FirstName'}/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"lastName\"\r\n                    label=\"LastName\"\r\n                    rules={[{required: true, message: 'Please input your LastName!', whitespace: true}]}\r\n                >\r\n                    <Input placeholder={'LastName'}/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Shipping method\"\r\n                    name=\"shippingMethod\"\r\n                >\r\n                    <Radio.Group onChange={(e) => setShippingMethod(e.target.value)}>\r\n                        <Radio value=\"warehouse\">To the NovaPoshta office - at the NP rate</Radio>\r\n                        <Radio value=\"courier\">Courier of NovaPoshta at the address - 99 UAH</Radio>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n                {shippingMethod === 'warehouse'\r\n                    ? (\r\n                        <>\r\n                            <Form.Item\r\n                                name=\"city\"\r\n                                label=\"City\"\r\n                                rules={[{required: true, message: 'Please select your city!'}]}\r\n                            >\r\n                                <AutoComplete\r\n                                    options={cities.map(city => ({\r\n                                        value: city.Present,\r\n                                        deliveryCity: city.DeliveryCity,\r\n                                    }))}\r\n                                    onSearch={searchCityHandler}\r\n                                    onSelect={selectCityHandler}\r\n                                >\r\n                                    <Search placeholder=\"Search city\" enterButton loading={citiesLoading}/>\r\n                                </AutoComplete>\r\n                            </Form.Item>\r\n                            {selectedCity && (\r\n                                <Form.Item\r\n                                    name=\"warehouse\"\r\n                                    label=\"Warehouse\"\r\n                                    rules={[{required: true, message: 'Please select your warehouse!'}]}\r\n                                >\r\n                                    <Select loading={warehousesLoading}>\r\n                                        {warehouses.map(warehouse => (\r\n                                            <Select.Option\r\n                                                value={warehouse.Description}>{warehouse.Description}</Select.Option>\r\n                                        ))}\r\n                                    </Select>\r\n                                </Form.Item>\r\n                            )}\r\n                        </>\r\n                    )\r\n                    : (\r\n                        <Form.Item\r\n                            name=\"address\"\r\n                            label=\"Address\"\r\n                            rules={[{required: true, message: 'Please select your address!'}]}\r\n                        >\r\n                            <Input placeholder={'Address'}/>\r\n                        </Form.Item>\r\n                    )\r\n                }\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={createOrderMutationOption.loading}>Create</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {Error} from '../Error/Error';\r\nimport {BasketIndex} from './BasketIndex';\r\nimport {BasketPlaceAnOrder} from './BasketPlaceAnOrder';\r\n\r\nexport const BasketController = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<BasketIndex/>}/>\r\n            <Route path={'/place-an-order'} element={<BasketPlaceAnOrder/>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n};\r\n","import {gql} from '@apollo/client';\r\nimport {Order, OrderStatus} from '../../types/types';\r\n\r\n\r\nexport type GetMyOrdersData = { getMyOrders: getOrdersObject }\r\nexport type getOrdersObject = { orders: Order[], total: number }\r\n\r\nexport type GetMyOrdersVars = { getOrdersInput: getOrdersInput }\r\nexport type getOrdersInput = {\r\n    take: number,\r\n    skip: number,\r\n    like: string,\r\n    orderStatus: OrderStatus | null,\r\n}\r\n\r\nexport const GET_MY_ORDERS_QUERY = gql`\r\n    query GetMyOrders($getOrdersInput: GetOrdersInput!) {\r\n        getMyOrders(getOrdersInput: $getOrdersInput) {\r\n            orders {\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                phoneNumber\r\n                address\r\n                deliveryCityCode\r\n                deliveryCityName\r\n                deliveryWarehouse\r\n                shippingMethod\r\n                orderStatus\r\n                totalPrice\r\n                createdAt\r\n                updatedAt\r\n                user {\r\n                    id\r\n                    email\r\n                    firstName\r\n                    lastName\r\n                    roles {\r\n                        id\r\n                        name\r\n                    }\r\n                }\r\n                productsInOrder {\r\n                    product {\r\n                        id\r\n                        name\r\n                        slug\r\n                        isShown\r\n                        quantity\r\n                        priceUAH\r\n                        description\r\n                        characteristics {\r\n                            name\r\n                            value\r\n                        }\r\n                        files {\r\n                            id\r\n                            fileImage\r\n                            filePath\r\n                            mimetype\r\n                            destination\r\n                            fileName\r\n                            size\r\n                            originalName\r\n                        }\r\n                        categories {\r\n                            id\r\n                            isShown\r\n                            name\r\n                            description\r\n                            slug\r\n                        }\r\n                    }\r\n                    productQuantity\r\n                }\r\n            }\r\n            total\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type GetMyOrderByIdData = { getMyOrderById: Order }\r\nexport type GetMyOrderByIdVars = { id: string }\r\n\r\nexport const GET_MY_ORDER_BY_ID_QUERY = gql`\r\n    query GetMyOrderById($id: Int!) {\r\n        getMyOrderById(id: $id) {\r\n            id\r\n            email\r\n            firstName\r\n            lastName\r\n            phoneNumber\r\n            address\r\n            deliveryCityCode\r\n            deliveryCityName\r\n            deliveryWarehouse\r\n            shippingMethod\r\n            orderStatus\r\n            totalPrice\r\n            createdAt\r\n            updatedAt\r\n            user {\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                roles {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n            productsInOrder {\r\n                product {\r\n                    id\r\n                    name\r\n                    slug\r\n                    isShown\r\n                    quantity\r\n                    priceUAH\r\n                    description\r\n                    characteristics {\r\n                        name\r\n                        value\r\n                    }\r\n                    files {\r\n                        id\r\n                        fileImage\r\n                        filePath\r\n                        mimetype\r\n                        destination\r\n                        fileName\r\n                        size\r\n                        originalName\r\n                    }\r\n                    categories {\r\n                        id\r\n                        isShown\r\n                        name\r\n                        description\r\n                        slug\r\n                    }\r\n                }\r\n                productQuantity\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React, {FC, useEffect, useState} from 'react';\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    Card,\r\n    Carousel,\r\n    Collapse,\r\n    Form,\r\n    Input,\r\n    message,\r\n    Modal,\r\n    Pagination,\r\n    Popconfirm,\r\n    Tabs,\r\n} from 'antd';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {s_getAuthData, s_getIsAuth} from '../../../redux/auth-selectors';\r\nimport {Error} from '../../../admin-area/components/Error/Error';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {useMutation, useQuery} from '@apollo/client';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {GET_MY_ORDERS_QUERY, GetMyOrdersData, GetMyOrdersVars} from '../../gql/orders-query';\r\nimport s from './Account.module.css';\r\nimport {\r\n    UPDATE_EMAIL_MUTATION,\r\n    UPDATE_ME_MUTATION,\r\n    UPDATE_PASSWORD_MUTATION,\r\n    UpdateEmailData,\r\n    UpdateEmailVars,\r\n    UpdateMeData,\r\n    UpdateMeVars,\r\n    UpdatePasswordData,\r\n    UpdatePasswordVars,\r\n} from '../../../common-area/gql/auth-mutation';\r\nimport {Order, OrderStatus} from '../../../types/types';\r\nimport {CANCEL_ORDER_MUTATION, CancelOrderData, CancelOrderVars} from '../../gql/orders-mutation';\r\nimport {useForm} from 'antd/es/form/Form';\r\nimport {login, logout} from '../../../redux/auth-reducer';\r\nimport {FormOutlined} from '@ant-design/icons';\r\nimport {Link, Navigate} from 'react-router-dom';\r\n\r\nexport const Account: FC = () => {\r\n    const authData = useSelector(s_getAuthData);\r\n    const isAuth = useSelector(s_getIsAuth);\r\n    const [pageTake, setPageTake] = useState(10);\r\n    const [pageSkip, setPageSkip] = useState(0);\r\n    const dispatch = useDispatch();\r\n    const [myOrdersObj, setMyOrdersObj] = useState<{ orders?: Order[], total?: number }>({});\r\n    const getMyOrdersQuery = useQuery<GetMyOrdersData, GetMyOrdersVars>(GET_MY_ORDERS_QUERY,\r\n        {\r\n            variables: {\r\n                getOrdersInput: {\r\n                    skip: pageSkip,\r\n                    take: pageTake,\r\n                    like: '',\r\n                    orderStatus: null,\r\n                },\r\n            },\r\n            context: {gqlLink: gqlLinks.customer},\r\n        },\r\n    );\r\n    const [updateMeMutation, updateMeMutationOptions] = useMutation<UpdateMeData, UpdateMeVars>(UPDATE_ME_MUTATION,\r\n        {context: {gqlLink: gqlLinks.customer}},\r\n    );\r\n    const [cancelOrderMutation, cancelOrderMutationOptions] = useMutation<CancelOrderData, CancelOrderVars>(CANCEL_ORDER_MUTATION,\r\n        {context: {gqlLink: gqlLinks.customer}},\r\n    );\r\n    const [updateEmailMutation, updateEmailMutationOptions] = useMutation<UpdateEmailData, UpdateEmailVars>(UPDATE_EMAIL_MUTATION,\r\n        {context: {gqlLink: gqlLinks.customer}},\r\n    );\r\n    const [updatePasswordMutation, updatePasswordMutationOptions] = useMutation<UpdatePasswordData, UpdatePasswordVars>(UPDATE_PASSWORD_MUTATION,\r\n        {context: {gqlLink: gqlLinks.customer}},\r\n    );\r\n    const [isChangeEmailVisible, setIsChangeEmailVisible] = useState(false);\r\n    const [isChangePasswordVisible, setIsChangePasswordVisible] = useState(false);\r\n    const [updateEmailForm] = useForm();\r\n    const [updatePasswordForm] = useForm();\r\n\r\n    useEffect(() => {\r\n        if (getMyOrdersQuery.data?.getMyOrders) {\r\n            setMyOrdersObj(getMyOrdersQuery.data?.getMyOrders);\r\n        }\r\n    }, [getMyOrdersQuery.data?.getMyOrders]);\r\n\r\n    const onPersonalDataFinish = async (values: {\r\n        firstName: string,\r\n        lastName: string,\r\n    }) => {\r\n        const response = await updateMeMutation({\r\n            variables: {\r\n                updateMeInput: {...values},\r\n            },\r\n        });\r\n        if (response.data && !response.errors) {\r\n            dispatch(login(response.data.updateMe));\r\n            message.success('Personal data successfully updates');\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const OrderHeader: FC<{ order: Order }> = ({order}) => {\r\n        let createdAt = order.createdAt.split('T').join(' ');\r\n        createdAt = createdAt.substr(0, createdAt.length - 5);\r\n        return (\r\n            <div className={s.orderHeader}>\r\n                <div className={s.orderHeaderInfo}>\r\n                    <div>\r\n                        <div>#{order.id}</div>\r\n                        <div>{createdAt}</div>\r\n                        <div>Status: {order.orderStatus}</div>\r\n                    </div>\r\n                    <div>Total price: {order.totalPrice} UAH</div>\r\n                </div>\r\n                <div className={s.products}>\r\n                    {order.productsInOrder.map(productInOrder => (\r\n                        <Carousel autoplay className={s.carousel} key={productInOrder.id}>\r\n                            {productInOrder?.product?.files.map(file => (\r\n                                <Avatar key={file.id} className={s.image} shape={'square'} src={file.fileImage}\r\n                                        size={48}/>\r\n                            ))}\r\n                        </Carousel>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const clickCancelOrderHandler = async (orderId: number) => {\r\n        const response = await cancelOrderMutation({\r\n            variables: {id: orderId},\r\n        });\r\n        if (!response.errors) {\r\n            message.success('Order successfully canceled');\r\n            const newOrders = myOrdersObj.orders?.map(order => order.id === orderId ? {\r\n                ...order,\r\n                orderStatus: response.data?.cancelOrder.orderStatus,\r\n            } : order);\r\n            setMyOrdersObj({total: myOrdersObj.total, orders: newOrders as Order[]});\r\n        } else {\r\n            response.errors.map(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const changeEmailHandler = async () => {\r\n        const email = updateEmailForm.getFieldValue('email');\r\n        updateEmailMutation({variables: {updateEmailInput: {email: email}}})\r\n            .then(response => {\r\n                dispatch(logout());\r\n                setIsChangeEmailVisible(false);\r\n                message.success(response.data?.updateEmail);\r\n            })\r\n            .catch(error => {\r\n                updateEmailForm.setFields([\r\n                    {\r\n                        name: 'email',\r\n                        errors: [error.message],\r\n                    },\r\n                ]);\r\n            });\r\n    };\r\n\r\n    const changePasswordHandler = async () => {\r\n        const oldPassword = updatePasswordForm.getFieldValue('oldPassword');\r\n        const newPassword = updatePasswordForm.getFieldValue('newPassword');\r\n        updatePasswordMutation({\r\n            variables: {\r\n                updatePasswordInput: {oldPassword, newPassword},\r\n            },\r\n        })\r\n            .then(response => {\r\n                updatePasswordForm.setFields([{name: 'oldPassword', value: ''}]);\r\n                updatePasswordForm.setFields([{name: 'newPassword', value: ''}]);\r\n                setIsChangePasswordVisible(false);\r\n                message.success('Password successfully changed');\r\n            })\r\n            .catch(error => {\r\n                updatePasswordForm.setFields([\r\n                    {\r\n                        name: 'oldPassword',\r\n                        errors: [error.message],\r\n                    },\r\n                ]);\r\n            });\r\n    };\r\n\r\n    if (getMyOrdersQuery.error)\r\n        return <Error/>;\r\n\r\n    if (!isAuth)\r\n        return <Navigate to={'/auth/login'}/>;\r\n\r\n    if (getMyOrdersQuery.loading)\r\n        return <Loading/>;\r\n\r\n    return (\r\n        <div>\r\n            <Tabs type=\"card\">\r\n                <Tabs.TabPane tab=\"Account\" key=\"1\" className={s.tabPane}>\r\n                    <Card title=\"Personal data\" bordered={true}>\r\n                        <Form name=\"updatePersonalData\" onFinish={onPersonalDataFinish}\r\n                              initialValues={{\r\n                                  firstName: authData?.user.firstName,\r\n                                  lastName: authData?.user.lastName,\r\n                              }}>\r\n                            <Form.Item\r\n                                name=\"firstName\"\r\n                                label=\"FirstName\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please input your firstName',\r\n                                        whitespace: true,\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input placeholder=\"FirstName\"/>\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                name=\"lastName\"\r\n                                label=\"LastName\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please input your lastName',\r\n                                        whitespace: true,\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input placeholder=\"LastName\"/>\r\n                            </Form.Item>\r\n                            <Form.Item>\r\n                                <Button type=\"primary\" htmlType={'submit'} loading={updateMeMutationOptions.loading}>\r\n                                    Update\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Card>\r\n                    <Card title=\"Security\" bordered={true}>\r\n                        <div className={s.changeEmailAndPass}>\r\n                            <div>\r\n                                <div style={{marginBottom: '5px'}}>Email: {authData?.user.email}</div>\r\n                                <Button type={'primary'} onClick={() => setIsChangeEmailVisible(true)}\r\n                                        icon={<FormOutlined/>}>\r\n                                    Change\r\n                                </Button>\r\n                                <Modal title=\"Change email\" visible={isChangeEmailVisible} onOk={changeEmailHandler}\r\n                                       onCancel={() => setIsChangeEmailVisible(false)}\r\n                                       confirmLoading={updateEmailMutationOptions.loading}\r\n                                >\r\n                                    <Form name=\"updateEmail\" form={updateEmailForm}\r\n                                          initialValues={{\r\n                                              email: authData?.user.email,\r\n                                          }}>\r\n                                        <Form.Item\r\n                                            name=\"email\"\r\n                                            label=\"Email\"\r\n                                            rules={[\r\n                                                {\r\n                                                    type: 'email',\r\n                                                    message: 'The input is not valid E-mail!',\r\n                                                },\r\n                                                {\r\n                                                    required: true,\r\n                                                    message: 'Please input your email',\r\n                                                    whitespace: true,\r\n                                                },\r\n                                            ]}\r\n                                        >\r\n                                            <Input placeholder=\"Email\" type={'email'}/>\r\n                                        </Form.Item>\r\n                                    </Form>\r\n                                </Modal>\r\n                            </div>\r\n                            <div>\r\n                                <Button type={'primary'} onClick={() => setIsChangePasswordVisible(true)}\r\n                                        icon={<FormOutlined/>}>\r\n                                    Change password\r\n                                </Button>\r\n                                <Modal title=\"Change password\" visible={isChangePasswordVisible}\r\n                                       onOk={changePasswordHandler}\r\n                                       onCancel={() => setIsChangePasswordVisible(false)}\r\n                                       confirmLoading={updatePasswordMutationOptions.loading}\r\n                                >\r\n                                    <Form name=\"updatePassword\" form={updatePasswordForm}>\r\n                                        <Form.Item\r\n                                            name=\"oldPassword\"\r\n                                            label=\"Old password\"\r\n                                            rules={[\r\n                                                {\r\n                                                    required: true,\r\n                                                    message: 'Please input your old password',\r\n                                                    whitespace: true,\r\n                                                },\r\n                                                {\r\n                                                    min: 3,\r\n                                                    message: 'Length of password must be more then 2 symbols',\r\n                                                },\r\n                                            ]}\r\n                                        >\r\n                                            <Input placeholder=\"Old password\" type={'password'}/>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            name=\"newPassword\"\r\n                                            label=\"New password\"\r\n                                            rules={[\r\n                                                {\r\n                                                    required: true,\r\n                                                    message: 'Please input your new password',\r\n                                                    whitespace: true,\r\n                                                },\r\n                                                {\r\n                                                    min: 3,\r\n                                                    message: 'Length of password must be more then 2 symbols',\r\n                                                },\r\n                                            ]}\r\n                                        >\r\n                                            <Input placeholder=\"New password\" type={'password'}/>\r\n                                        </Form.Item>\r\n                                    </Form>\r\n                                </Modal>\r\n                            </div>\r\n                        </div>\r\n                    </Card>\r\n                </Tabs.TabPane>\r\n                <Tabs.TabPane tab=\"Orders\" key=\"2\">\r\n                    <Collapse expandIconPosition={'right'} className={s.orders}>\r\n                        {myOrdersObj?.orders?.map(order => (\r\n                            <Collapse.Panel header={<OrderHeader order={order}/>} key={order.id}>\r\n                                <table className=\"infoTable\">\r\n                                    <tbody>\r\n                                    <tr>\r\n                                        <td>Email:</td>\r\n                                        <td>\r\n                                            <span>{order?.email}</span>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>FirstName:</td>\r\n                                        <td>\r\n                                            <span>{order?.firstName}</span>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>LastName:</td>\r\n                                        <td>\r\n                                            <span>{order?.lastName}</span>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Phone number:</td>\r\n                                        <td>\r\n                                            <span>{order?.phoneNumber}</span>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Address:</td>\r\n                                        <td>\r\n                                            <span>{order?.address}</span>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Shipping method:</td>\r\n                                        <td>\r\n                                            <span>{order?.shippingMethod}</span>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Order status:</td>\r\n                                        <td>\r\n                                            <span>{order?.orderStatus}</span>\r\n                                        </td>\r\n                                    </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                                <div className={s.productsBig}>\r\n                                    {order.productsInOrder.map(productInOrder => (\r\n                                        <div className={s.productBig}>\r\n                                            <Carousel autoplay className={s.carouselBig} key={productInOrder.id}>\r\n                                                {productInOrder?.product?.files.map(file => (\r\n                                                    <Avatar key={file.id} className={s.image} shape={'square'}\r\n                                                            src={file.fileImage}\r\n                                                            size={64}/>\r\n                                                ))}\r\n                                            </Carousel>\r\n                                            <div>\r\n                                                <div>\r\n                                                    <Link to={`../products/${productInOrder.product.slug}`}>\r\n                                                        {productInOrder.product.name}\r\n                                                    </Link>\r\n                                                </div>\r\n                                                <div>{productInOrder.product.priceUAH} UAH</div>\r\n                                                <div>{productInOrder.productQuantity} units</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                                {order.orderStatus === OrderStatus.new && (\r\n                                    <Popconfirm\r\n                                        title=\"Are you sure to cancel this order?\"\r\n                                        onConfirm={() => clickCancelOrderHandler(order.id)}\r\n                                        okText=\"Yes\"\r\n                                        cancelText=\"No\"\r\n                                    >\r\n                                        <Button className={s.buttonCancelOrder} type={'primary'}\r\n                                                loading={cancelOrderMutationOptions.loading}\r\n                                        >\r\n                                            Cancel\r\n                                        </Button>\r\n                                    </Popconfirm>\r\n\r\n                                )}\r\n                            </Collapse.Panel>\r\n                        ))}\r\n                    </Collapse>\r\n                    <Pagination total={myOrdersObj.total}\r\n                                onChange={async (pageNumber) => {\r\n                                    const pageSkip = (pageNumber - 1) * pageTake;\r\n                                    setPageSkip(pageSkip);\r\n                                    await getMyOrdersQuery.refetch({\r\n                                        getOrdersInput: {\r\n                                            skip: pageSkip,\r\n                                            take: pageTake,\r\n                                            like: '',\r\n                                            orderStatus: null,\r\n                                        },\r\n                                    });\r\n                                }}\r\n                    />\r\n                </Tabs.TabPane>\r\n            </Tabs>\r\n        </div>\r\n    )\r\n        ;\r\n};\r\n","import React, {FC} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport {useQuery} from '@apollo/client';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {Card} from 'antd';\r\nimport parse from 'html-react-parser';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {Error} from '../Error/Error';\r\nimport {GET_CATEGORY_QUERY, GetCategoryData, GetCategoryVars} from '../../gql/categories-query';\r\nimport s from './CategoriesView.module.css';\r\nimport {ProductCard} from '../Products/ProductCard';\r\n\r\nexport const CategoriesView: FC = () => {\r\n    const params = useParams();\r\n    const categorySlug = params.slug || '';\r\n    const getCategoryQuery = useQuery<GetCategoryData, GetCategoryVars>(\r\n        GET_CATEGORY_QUERY,\r\n        {\r\n            variables: {slug: categorySlug},\r\n            context: {gqlLink: gqlLinks.customer},\r\n        },\r\n    );\r\n\r\n    if (!categorySlug || getCategoryQuery.error)\r\n        return <Error/>;\r\n\r\n    if (getCategoryQuery.loading)\r\n        return <Loading/>;\r\n\r\n    const category = getCategoryQuery.data?.getCategory;\r\n    return (\r\n        <>\r\n            <header>{category?.name}</header>\r\n            <div className={s.products}>\r\n                {category?.products.map(product => (\r\n                    <ProductCard product={product}/>\r\n                ))}\r\n            </div>\r\n            <div className={s.cards}>\r\n                <Card title=\"Description\" className={s.card}>{category && parse(category?.description)}</Card>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {Error} from '../../../admin-area/components/Error/Error';\r\nimport {CategoriesView} from './CategoriesView';\r\n\r\nexport const CategoriesController = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/:slug'} element={<CategoriesView/>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport s from './ClientLayout.module.css';\r\nimport {Home} from '../Home/Home';\r\nimport {Error} from '../Error/Error';\r\nimport {Pages} from '../Pages/Pages';\r\nimport {MyBreadcrumb} from '../../../common-area/components/MyBreadcrumb/MyBreadcrumb';\r\nimport {PagesView} from '../PageView/PageView';\r\nimport {ConfirmationEmail} from '../ConfirmationEmail/ConfirmationEmail';\r\nimport {AuthController} from '../Auth/AuthController';\r\nimport {Header} from '../Header/Header';\r\nimport {MyMenu} from '../MyMenu/MyMenu';\r\nimport {ProductsController} from '../Products/ProductsController';\r\nimport {BasketController} from '../Basket/BasketController';\r\nimport {Account} from '../Account/Account';\r\nimport {CategoriesController} from '../Categories/CategoriesController';\r\n\r\nexport const ClientLayout: FC = () => {\r\n    return (\r\n        <div className={s.documentWrapper}>\r\n            <div className={s.wrapperPages}>\r\n                <div className={s.container}>\r\n                    <Pages/>\r\n                </div>\r\n            </div>\r\n            <div className={s.container}>\r\n                <Header/>\r\n            </div>\r\n            <div className={s.wrapperMenu}>\r\n                <div className={s.container}>\r\n                    <MyMenu/>\r\n                </div>\r\n            </div>\r\n            <div className={[s.container, s.content].join(' ')}>\r\n                {/*<div className={s.breadcrumb}>*/}\r\n                {/*    <MyBreadcrumb/>*/}\r\n                {/*</div>*/}\r\n                <Routes>\r\n                    <Route path={'/'} element={<Home/>}/>\r\n                    <Route path={'/products/*'} element={<ProductsController/>}/>\r\n                    <Route path={'/categories/*'} element={<CategoriesController/>}/>\r\n                    <Route path={'/basket/*'} element={<BasketController/>}/>\r\n                    <Route path={'/confirmation-email/:token'} element={<ConfirmationEmail/>}/>\r\n                    <Route path={'/pages/:slug'} element={<PagesView/>}/>\r\n                    <Route path={'/auth/*'} element={<AuthController/>}/>\r\n                    <Route path={'/account'} element={<Account/>}/>\r\n                    <Route path={'/ya'} element={<div>ya</div>}/>\r\n                    <Route path={'*'} element={<Error/>}/>\r\n                </Routes>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import {gql} from '@apollo/client';\r\nimport {Auth, User} from '../../types/types';\r\n\r\nexport type MeData = { me: Auth }\r\nexport type MeVars = {}\r\n\r\n\r\nexport const ME_QUERY = gql`\r\n    query Me {\r\n        me {\r\n            user {\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                roles {\r\n                    id\r\n                    name\r\n                    color\r\n                }\r\n            }\r\n            accessToken\r\n        }\r\n    }\r\n\r\n`\r\n","import React, {FC, useState} from 'react';\r\nimport {Layout, Menu, Tag} from 'antd';\r\nimport {\r\n    AppstoreAddOutlined,\r\n    FileOutlined,\r\n    FunnelPlotOutlined,\r\n    LineChartOutlined,\r\n    LogoutOutlined,\r\n    SettingOutlined,\r\n    ShoppingCartOutlined,\r\n    ShoppingOutlined,\r\n    TeamOutlined,\r\n    UserOutlined,\r\n} from '@ant-design/icons';\r\nimport s from './MyMenu.module.css';\r\nimport {Link} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {s_getAuthData} from '../../../redux/auth-selectors';\r\nimport {logout} from '../../../redux/auth-reducer';\r\n\r\nconst {Sider} = Layout;\r\nconst {SubMenu} = Menu;\r\n\r\n\r\nexport const MyMenu: FC = () => {\r\n    const [collapsed, setCollapsed] = useState(false);\r\n    const authData = useSelector(s_getAuthData);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Sider collapsible collapsed={collapsed} onCollapse={setCollapsed} className={s.wrapperMenu}>\r\n            <div className={s.logo}/>\r\n            <div className={s.userInfo}>\r\n                <div className={s.userFirstLastName}>\r\n                    <span className={s.name}>{authData?.user.firstName}</span>\r\n                    <span className={s.name}>{authData?.user.lastName}</span>\r\n                </div>\r\n                <div className={s.roles}>\r\n                    {authData?.user.roles.map(role => (\r\n                        <Tag key={role.id} color={role.color}>{role.name}</Tag>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            <Menu theme=\"dark\" /*defaultSelectedKeys={['1']}*/ mode=\"inline\">\r\n                <Menu.Item key=\"10\" icon={<LineChartOutlined/>}>\r\n                    <Link to={'/admin'}>Home</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"20\" icon={<ShoppingCartOutlined/>}>\r\n                    <Link to={'/admin/orders'}>Orders</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"30\" icon={<ShoppingOutlined/>}>\r\n                    <Link to={'/admin/products'}>\r\n                        Products\r\n                    </Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"40\" icon={<FunnelPlotOutlined/>}>\r\n                    <Link to={'/admin/categories'}>\r\n                        Categories\r\n                    </Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"80\" icon={<FileOutlined/>}>\r\n                    <Link to={'/admin/files'}>Files</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"90\" icon={<TeamOutlined/>}>\r\n                    <Link to={'/admin/users'}>\r\n                        Users\r\n                    </Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"110\" icon={<AppstoreAddOutlined/>}>\r\n                    <Link to={'/admin/pages'}>\r\n                        Pages\r\n                    </Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"120\" icon={<SettingOutlined/>}>\r\n                    <Link to={'/admin/settings'}>\r\n                        Settings\r\n                    </Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"130\" icon={<UserOutlined/>}>\r\n                    <Link to={'/'}>Customer side</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"140\" icon={<LogoutOutlined/>} onClick={() => dispatch(logout())}>\r\n                    Logout\r\n                </Menu.Item>\r\n                <div style={{height: '48px'}}/>\r\n            </Menu>\r\n        </Sider>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Breadcrumb} from 'antd';\r\nimport {useLocation} from 'react-router-dom';\r\n\r\nexport const MyBreadcrumb: FC = () => {\r\n    const location = useLocation();\r\n    let modules = location.pathname.split('/');\r\n    modules = modules.filter(Boolean);\r\n\r\n    return (\r\n        <Breadcrumb>\r\n            <Breadcrumb.Item key={'-1'}>.</Breadcrumb.Item>\r\n            {modules.map((module, i) => <Breadcrumb.Item key={i}>{module}</Breadcrumb.Item>)}\r\n        </Breadcrumb>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Line, LineChart, Tooltip, XAxis, YAxis} from 'recharts';\r\nimport {OrderStatistics} from '../../../types/types';\r\nimport s from './StatisticsChart.module.css';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\n\r\ntype Props = {\r\n    ordersStatistics: OrderStatistics[] | undefined,\r\n    loading: boolean\r\n}\r\n\r\nexport const OrdersStatisticsChart: FC<Props> = ({ordersStatistics, loading}) => {\r\n    return (\r\n        <div className={s.chartWrapper}>\r\n            {loading\r\n                ? <Loading/>\r\n                : <LineChart width={600} height={300} data={ordersStatistics} syncId=\"OrdersStatisticsChart\">\r\n                    <Line type=\"monotone\" dataKey=\"ordersCount\" stroke=\"#ff7300\"/>\r\n                    <Tooltip/>\r\n                    <XAxis dataKey=\"date\"/>\r\n                    <YAxis/>\r\n                </LineChart>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import {gql} from '@apollo/client';\r\nimport {Order, OrderStatus} from '../../types/types';\r\n\r\nexport type GetOrdersData = { getOrders: getOrders }\r\nexport type getOrders = {\r\n    orders: Order[],\r\n    total: number\r\n}\r\n\r\nexport type GetOrdersVars = { getOrdersInput: getOrdersInput }\r\nexport type getOrdersInput = {\r\n    take: number,\r\n    skip: number,\r\n    like: string,\r\n    orderStatus: OrderStatus | null,\r\n}\r\n\r\nexport const GET_ORDERS_QUERY = gql`\r\n    query GetOrders($getOrdersInput: GetOrdersInput!) {\r\n        getOrders(getOrdersInput: $getOrdersInput) {\r\n            orders {\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                phoneNumber\r\n                address\r\n                deliveryCityCode\r\n                deliveryCityName\r\n                deliveryWarehouse\r\n                shippingMethod\r\n                orderStatus\r\n                totalPrice\r\n                createdAt\r\n                updatedAt\r\n                user {\r\n                    id\r\n                    email\r\n                    firstName\r\n                    lastName\r\n                    roles {\r\n                        id\r\n                        name\r\n                    }\r\n                }\r\n                productsInOrder {\r\n                    product {\r\n                        id\r\n                        name\r\n                        slug\r\n                        isShown\r\n                        quantity\r\n                        priceUAH\r\n                        description\r\n                        characteristics {\r\n                            name\r\n                            value\r\n                        }\r\n                        files {\r\n                            id\r\n                            fileImage\r\n                            filePath\r\n                            mimetype\r\n                            destination\r\n                            fileName\r\n                            size\r\n                            originalName\r\n                        }\r\n                        categories {\r\n                            id\r\n                            isShown\r\n                            name\r\n                            description\r\n                            slug\r\n                        }\r\n                    }\r\n                    productQuantity\r\n                }\r\n            }\r\n            total\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type GetOrderData = { getOrder: Order }\r\nexport type GetOrderVars = { id: number }\r\n\r\nexport const GET_ORDER_QUERY = gql`\r\n    query GetOrder($id: Int!) {\r\n        getOrder(id: $id) {\r\n            id\r\n            email\r\n            firstName\r\n            lastName\r\n            phoneNumber\r\n            address\r\n            deliveryCityCode\r\n            deliveryCityName\r\n            deliveryWarehouse\r\n            shippingMethod\r\n            orderStatus\r\n            totalPrice\r\n            createdAt\r\n            updatedAt\r\n            user {\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                roles {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n            productsInOrder {\r\n                product {\r\n                    id\r\n                    name\r\n                    slug\r\n                    isShown\r\n                    quantity\r\n                    priceUAH\r\n                    description\r\n                    characteristics {\r\n                        name\r\n                        value\r\n                    }\r\n                    files {\r\n                        id\r\n                        fileImage\r\n                        filePath\r\n                        mimetype\r\n                        destination\r\n                        fileName\r\n                        size\r\n                        originalName\r\n                    }\r\n                    categories {\r\n                        id\r\n                        isShown\r\n                        name\r\n                        description\r\n                        slug\r\n                    }\r\n                }\r\n                productQuantity\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import {gql} from '@apollo/client';\r\nimport {OrderStatistics, ProfitStatistics} from '../../types/types';\r\n\r\nexport type GetStatisticsData = {\r\n    getOrdersStatistics: OrderStatistics[],\r\n    getProfitStatistics: ProfitStatistics[]\r\n}\r\n\r\nexport type GetStatisticsVars = {}\r\n\r\nexport const GET_STATISTICS_QUERY = gql`\r\n    query GetStatistics {\r\n        getOrdersStatistics {\r\n            date\r\n            ordersCount\r\n        }\r\n        getProfitStatistics {\r\n            date\r\n            totalPrice\r\n        }\r\n    }\r\n`;\r\n","import React, {FC} from 'react';\r\nimport {Line, LineChart, Tooltip, XAxis, YAxis} from 'recharts';\r\nimport {ProfitStatistics} from '../../../types/types';\r\nimport s from './StatisticsChart.module.css';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\n\r\ntype Props = {\r\n    profitStatistics: ProfitStatistics[] | undefined,\r\n    loading: boolean\r\n}\r\n\r\nexport const ProfitStatisticsChart: FC<Props> = ({profitStatistics, loading}) => {\r\n    return (\r\n        <div className={s.chartWrapper}>\r\n            {loading\r\n                ? <Loading/>\r\n                : <LineChart width={600} height={300} data={profitStatistics} syncId=\"ProfitStatisticsChart\">\r\n                    <Line type=\"monotone\" dataKey=\"totalPrice\" stroke=\"#ff7300\"/>\r\n                    <Tooltip/>\r\n                    <XAxis dataKey=\"date\"/>\r\n                    <YAxis/>\r\n                </LineChart>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import React, {FC, useState} from 'react';\r\nimport {OrdersStatisticsChart} from '../Charts/OrdersStatisticsChart';\r\nimport {useQuery} from '@apollo/client';\r\nimport {GET_ORDERS_QUERY, GetOrdersData, GetOrdersVars} from '../../gql/orders-query';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {Order, OrderStatus} from '../../../types/types';\r\nimport {ColumnsType} from 'antd/es/table';\r\nimport {getStringFromCamelCase, getStringFromDate} from '../../../utils/stringActions';\r\nimport {ButtonsVUR} from '../ButtonsVUD/ButtonsVUR';\r\nimport {Table} from 'antd';\r\nimport {GET_STATISTICS_QUERY, GetStatisticsData, GetStatisticsVars} from '../../gql/statistics-query';\r\nimport s from './Home.module.css';\r\nimport {ProfitStatisticsChart} from '../Charts/ProfitStatisticsChart';\r\n\r\nexport const Home: FC = () => {\r\n    const [pageTake, setPageTake] = useState(10);\r\n    const [pageSkip, setPageSkip] = useState(0);\r\n    const getOrdersQuery = useQuery<GetOrdersData, GetOrdersVars>(\r\n        GET_ORDERS_QUERY,\r\n        {\r\n            variables: {\r\n                getOrdersInput: {\r\n                    skip: pageSkip,\r\n                    take: pageTake,\r\n                    like: '',\r\n                    orderStatus: OrderStatus.new,\r\n                },\r\n            },\r\n            context: {gqlLink: gqlLinks.admin},\r\n        },\r\n    );\r\n\r\n    const getStatisticsQuery = useQuery<GetStatisticsData, GetStatisticsVars>(GET_STATISTICS_QUERY,\r\n        {context: {gqlLink: gqlLinks.admin}},\r\n    );\r\n\r\n    const columns: ColumnsType<Order> = [\r\n        {\r\n            title: 'Id',\r\n            dataIndex: 'id',\r\n            key: 'id',\r\n            render: (text: any, order: Order) => <>#{order.id}</>,\r\n        },\r\n        {\r\n            title: 'Email',\r\n            dataIndex: 'email',\r\n            key: 'email',\r\n        },\r\n        {\r\n            title: 'FirstName',\r\n            dataIndex: 'firstName',\r\n            key: 'firstName',\r\n        },\r\n        {\r\n            title: 'LastName',\r\n            dataIndex: 'lastName',\r\n            key: 'lastName',\r\n        },\r\n        {\r\n            title: 'Phone number',\r\n            dataIndex: 'phoneNumber',\r\n            key: 'phoneNumber',\r\n        },\r\n        {\r\n            title: 'Order status',\r\n            dataIndex: 'orderStatus',\r\n            key: 'orderStatus',\r\n            render: (text: any, order: Order) => <span>{getStringFromCamelCase(order.orderStatus)}</span>,\r\n        },\r\n        {\r\n            title: 'Total price',\r\n            dataIndex: 'totalPrice',\r\n            key: 'totalPrice',\r\n            render: (text: any, order: Order) => <span>{order.totalPrice} UAH</span>,\r\n        },\r\n        {\r\n            title: 'Created at',\r\n            dataIndex: 'createdAt',\r\n            key: 'createdAt',\r\n            render: (text: any, order: Order) => <span>{getStringFromDate(order.createdAt)}</span>,\r\n        },\r\n        {\r\n            title: 'Actions',\r\n            dataIndex: 'actions',\r\n            key: 'actions',\r\n            render: (text: any, order: Order) => (\r\n                <ButtonsVUR viewUrl={`./orders/${order.id}`} updateUrl={`./orders/update/${order.id}`}/>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <div className={s.wrapperCharts}>\r\n                <div className={s.wrapperChart}>\r\n                    <header>Orders statistics</header>\r\n                    <OrdersStatisticsChart ordersStatistics={getStatisticsQuery.data?.getOrdersStatistics}\r\n                                           loading={getStatisticsQuery.loading}/>\r\n                </div>\r\n                <div className={s.wrapperChart}>\r\n                    <header>Profit statistics</header>\r\n                    <ProfitStatisticsChart profitStatistics={getStatisticsQuery.data?.getProfitStatistics}\r\n                                           loading={getStatisticsQuery.loading}/>\r\n                </div>\r\n            </div>\r\n            <header>New orders</header>\r\n            <Table\r\n                loading={getOrdersQuery.loading}\r\n                columns={columns}\r\n                dataSource={getOrdersQuery.data?.getOrders.orders}\r\n                pagination={{\r\n                    total: getOrdersQuery.data?.getOrders.total,\r\n                    onChange: async (pageNumber: number) => {\r\n                        const pageSkip = (pageNumber - 1) * pageTake;\r\n                        setPageSkip(pageSkip);\r\n                        await getOrdersQuery.refetch({\r\n                            getOrdersInput: {\r\n                                skip: pageSkip,\r\n                                take: pageTake,\r\n                                like: '',\r\n                                orderStatus: OrderStatus.new,\r\n                            },\r\n                        });\r\n                    },\r\n                }}\r\n                rowKey={'id'}\r\n            />\r\n        </>\r\n    );\r\n};\r\n","import {gql} from '@apollo/client';\r\nimport {User} from '../../types/types';\r\n\r\nexport type GetUsersData = { getUsers: getUsers }\r\nexport type getUsers = { users: User[], total: number }\r\n\r\nexport type GetUsersVars = { getUsersInput: getUsersInput }\r\nexport type getUsersInput = {\r\n    take: number,\r\n    skip: number,\r\n    like: string,\r\n}\r\n\r\nexport const GET_USERS_QUERY = gql`\r\n    query GetUsers($getUsersInput: GetUsersInput!){\r\n        getUsers(getUsersInput: $getUsersInput){\r\n            users {\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                roles {\r\n                    id\r\n                    name\r\n                    color\r\n                }\r\n            }\r\n            total\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type GetUserData = { getUser: User }\r\n\r\nexport type GetUserVars = { email: string }\r\n\r\nexport const GET_USER_QUERY = gql`\r\n    query GetUser($email: String!){\r\n        getUser(email: $email) {\r\n            id\r\n            email\r\n            firstName\r\n            lastName\r\n            roles {\r\n                id\r\n                name\r\n                color\r\n            }\r\n            orders {\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                phoneNumber\r\n                address\r\n                deliveryCityCode\r\n                deliveryCityName\r\n                deliveryWarehouse\r\n                shippingMethod\r\n                orderStatus\r\n                totalPrice\r\n                createdAt\r\n                updatedAt\r\n                user {\r\n                    id\r\n                    email\r\n                    firstName\r\n                    lastName\r\n                    roles {\r\n                        id\r\n                        name\r\n                    }\r\n                }\r\n                productsInOrder {\r\n                    product {\r\n                        id\r\n                        name\r\n                        slug\r\n                        isShown\r\n                        quantity\r\n                        priceUAH\r\n                        description\r\n                        characteristics {\r\n                            name\r\n                            value\r\n                        }\r\n                        files {\r\n                            id\r\n                            fileImage\r\n                            filePath\r\n                            mimetype\r\n                            destination\r\n                            fileName\r\n                            size\r\n                            originalName\r\n                        }\r\n                        categories {\r\n                            id\r\n                            isShown\r\n                            name\r\n                            description\r\n                            slug\r\n                        }\r\n                    }\r\n                    productQuantity\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\n","import {gql} from '@apollo/client';\r\nimport {Product, RoleName} from '../../types/types';\r\n\r\nexport type UpdateUserData = { updateUser: Product }\r\n\r\nexport type UpdateUserVars = { updateUserInput: updateUserInput }\r\nexport type updateUserInput = {\r\n    id: number,\r\n    email: string,\r\n    firstName: string,\r\n    lastName: string,\r\n    roles: updateRoleInput[],\r\n}\r\n\r\nexport type updateRoleInput = {\r\n    id: number;\r\n    name: RoleName;\r\n}\r\n\r\nexport const UPDATE_USER_MUTATION = gql`\r\n    mutation UpdateUser($updateUserInput: UpdateUserInput!){\r\n        updateUser(updateUserInput: $updateUserInput){\r\n            id\r\n            confirmedEmail\r\n            email\r\n            firstName\r\n            lastName\r\n            roles{\r\n                id\r\n                name\r\n                color\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type RemoveUserData = { removeUser: boolean }\r\nexport type RemoveUserVars = { email: string }\r\n\r\nexport const REMOVE_USER_MUTATION = gql`\r\n    mutation RemoveProduct($email: String!){\r\n        removeUser(email: $email)\r\n    }\r\n`;\r\n\r\n","import {useMutation, useQuery} from '@apollo/client';\r\nimport React, {ChangeEvent, FC, useCallback, useState} from 'react';\r\nimport {GET_USERS_QUERY, GetUsersData, GetUsersVars} from '../../gql/users-query';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {Divider, message, Table, Tag} from 'antd';\r\nimport {User} from '../../../types/types';\r\nimport {ButtonsVUR} from '../ButtonsVUD/ButtonsVUR';\r\nimport s from './UsersIndex.module.css';\r\nimport {REMOVE_USER_MUTATION, RemoveUserData, RemoveUserVars} from '../../gql/users-mutation';\r\nimport {isAdmin} from '../../../utils/authorization';\r\nimport {useSelector} from 'react-redux';\r\nimport {s_getAuthData} from '../../../redux/auth-selectors';\r\nimport Search from 'antd/es/input/Search';\r\nimport debounce from 'lodash.debounce';\r\n\r\nexport const UsersIndex: FC = () => {\r\n    const authData = useSelector(s_getAuthData);\r\n    const [pageTake, setPageTake] = useState(10);\r\n    const [pageSkip, setPageSkip] = useState(0);\r\n    const [searchLike, setSearchLike] = useState('');\r\n    const getUserQuery = useQuery<GetUsersData, GetUsersVars>(\r\n        GET_USERS_QUERY,\r\n        {\r\n            variables: {\r\n                getUsersInput: {\r\n                    skip: pageSkip,\r\n                    take: pageTake,\r\n                    like: searchLike,\r\n                },\r\n            },\r\n            context: {gqlLink: gqlLinks.admin},\r\n        },\r\n    );\r\n    const [removeUser, removeUserOptions] = useMutation<RemoveUserData, RemoveUserVars>(REMOVE_USER_MUTATION,\r\n        {context: {gqlLink: gqlLinks.admin}},\r\n    );\r\n\r\n\r\n    const onRemove = async (email: string) => {\r\n        const response = await removeUser({variables: {email: email}});\r\n        if (response.data)\r\n            await getUserQuery.refetch({\r\n                getUsersInput: {\r\n                    skip: pageSkip,\r\n                    take: pageTake,\r\n                    like: searchLike,\r\n                },\r\n            });\r\n        else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Id',\r\n            dataIndex: 'id',\r\n            key: 'id',\r\n            render: (text: any, user: User) => <>#{user.id}</>,\r\n        },\r\n        {\r\n            title: 'Email',\r\n            dataIndex: 'email',\r\n            key: 'email',\r\n        },\r\n        {\r\n            title: 'FirstName',\r\n            dataIndex: 'firstName',\r\n            key: 'firstName',\r\n        },\r\n        {\r\n            title: 'LastName',\r\n            dataIndex: 'lastName',\r\n            key: 'lastName',\r\n        },\r\n        {\r\n            title: 'Roles',\r\n            dataIndex: 'roles',\r\n            key: 'roles',\r\n            render: (text: any, user: User) => (\r\n                <div className={s.roles}>\r\n                    {user.roles.map(role => (\r\n                        <Tag key={role.id} color={role.color}>{role.name}</Tag>\r\n                    ))}\r\n                </div>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Actions',\r\n            dataIndex: 'actions',\r\n            key: 'actions',\r\n            render: (text: any, user: User) => {\r\n                if (authData && isAdmin(authData?.user) && user.id !== authData?.user.id) {\r\n                    return <ButtonsVUR viewUrl={`${user.email}`} updateUrl={`update/${user.email}`}\r\n                                       onRemove={() => onRemove(user.email)}/>;\r\n                } else {\r\n                    return <ButtonsVUR viewUrl={`${user.email}`}/>;\r\n                }\r\n            },\r\n\r\n        },\r\n    ];\r\n\r\n    const onSearchUsersHandler = async (e: ChangeEvent<HTMLInputElement>) => {\r\n        const newPageSkip = 0;\r\n        const newSearchLike = e.target.value;\r\n        setPageSkip(newPageSkip);\r\n        setSearchLike(newSearchLike);\r\n        await getUserQuery.refetch({\r\n            getUsersInput: {\r\n                skip: newPageSkip,\r\n                take: pageTake,\r\n                like: newSearchLike,\r\n            },\r\n        });\r\n    };\r\n\r\n    const debouncedSearchUsersHandler = useCallback(debounce(nextValue => onSearchUsersHandler(nextValue), 500), []);\r\n    const searchUsersHandler = (e: ChangeEvent<HTMLInputElement>) => debouncedSearchUsersHandler(e);\r\n\r\n    if (getUserQuery.error) {\r\n        message.error(getUserQuery.error);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"wrapperHeader\">\r\n                <div className=\"wrapperHeader\">\r\n                    <header>Users</header>\r\n                </div>\r\n                <Search placeholder=\"Search users\" className={'search'}\r\n                        onChange={searchUsersHandler} enterButton\r\n                        loading={getUserQuery.loading}/>\r\n            </div>\r\n            <Divider/>\r\n            <Table\r\n                loading={getUserQuery.loading || removeUserOptions.loading}\r\n                columns={columns}\r\n                dataSource={getUserQuery.data?.getUsers.users}\r\n                pagination={{\r\n                    total: getUserQuery.data?.getUsers.total,\r\n                    onChange: async (pageNumber: number) => {\r\n                        const pageSkip = (pageNumber - 1) * pageTake;\r\n                        setPageSkip(pageSkip);\r\n                        await getUserQuery.refetch({\r\n                            getUsersInput: {\r\n                                skip: pageSkip,\r\n                                take: pageTake,\r\n                                like: searchLike,\r\n                            },\r\n                        });\r\n                    },\r\n                }}\r\n                rowKey=\"id\"\r\n            />\r\n        </>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport {useQuery} from '@apollo/client';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {Table, Tag} from 'antd';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {Error} from '../Error/Error';\r\nimport {GET_USER_QUERY, GetUserData, GetUserVars} from '../../gql/users-query';\r\nimport s from './UsersView.module.css';\r\nimport {ColumnsType} from 'antd/es/table';\r\nimport {Order} from '../../../types/types';\r\nimport {getStringFromCamelCase, getStringFromDate} from '../../../utils/stringActions';\r\nimport {ButtonsVUR} from '../ButtonsVUD/ButtonsVUR';\r\n\r\nexport const UsersView: FC = () => {\r\n    const params = useParams();\r\n    const userEmail = params.email || '';\r\n    const getUserQuery = useQuery<GetUserData, GetUserVars>(\r\n        GET_USER_QUERY,\r\n        {\r\n            variables: {email: userEmail},\r\n            context: {gqlLink: gqlLinks.admin},\r\n        },\r\n    );\r\n\r\n    const columns: ColumnsType<Order> = [\r\n        {\r\n            title: 'Id',\r\n            dataIndex: 'id',\r\n            key: 'id',\r\n            render: (text: any, order: Order) => <>#{order.id}</>,\r\n        },\r\n        {\r\n            title: 'Email',\r\n            dataIndex: 'email',\r\n            key: 'email',\r\n        },\r\n        {\r\n            title: 'FirstName',\r\n            dataIndex: 'firstName',\r\n            key: 'firstName',\r\n        },\r\n        {\r\n            title: 'LastName',\r\n            dataIndex: 'lastName',\r\n            key: 'lastName',\r\n        },\r\n        {\r\n            title: 'Phone number',\r\n            dataIndex: 'phoneNumber',\r\n            key: 'phoneNumber',\r\n        },\r\n        {\r\n            title: 'Order status',\r\n            dataIndex: 'orderStatus',\r\n            key: 'orderStatus',\r\n            render: (text: any, order: Order) => <span>{getStringFromCamelCase(order.orderStatus)}</span>,\r\n        },\r\n        {\r\n            title: 'Total price',\r\n            dataIndex: 'totalPrice',\r\n            key: 'totalPrice',\r\n            render: (text: any, order: Order) => <span>{order.totalPrice} UAH</span>,\r\n        },\r\n        {\r\n            title: 'Created at',\r\n            dataIndex: 'createdAt',\r\n            key: 'createdAt',\r\n            render: (text: any, order: Order) => <span>{getStringFromDate(order.createdAt)}</span>,\r\n        },\r\n        {\r\n            title: 'Actions',\r\n            dataIndex: 'actions',\r\n            key: 'actions',\r\n            render: (text: any, order: Order) => (\r\n                <ButtonsVUR viewUrl={`../../orders/${order.id}`} updateUrl={`../../orders/update/${order.id}`}/>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    if (!userEmail || getUserQuery.error)\r\n        return <Error/>;\r\n\r\n    if (getUserQuery.loading)\r\n        return <Loading/>;\r\n\r\n    const user = getUserQuery.data?.getUser;\r\n    return (\r\n        <>\r\n            <div className={s.photosAndMainInfo}>\r\n                <header>{user?.email}</header>\r\n                <table className=\"infoTable\">\r\n                    <tbody>\r\n                    <tr>\r\n                        <td>Id:</td>\r\n                        <td>\r\n                            <span># {user?.id}</span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>FirstName:</td>\r\n                        <td>\r\n                            <span>{user?.firstName}</span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>LastName:</td>\r\n                        <td>\r\n                            <span>{user?.lastName}</span>\r\n                        </td>\r\n                    </tr>\r\n                    {(user && user?.roles.length > 0) && (\r\n                        <tr>\r\n                            <td>Roles:</td>\r\n                            <td className={s.roles}>\r\n                                {user.roles.map(role => (\r\n                                    <Tag key={role.id} color={role.color}>{role.name}</Tag>\r\n                                ))}\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                    </tbody>\r\n                </table>\r\n                <Table\r\n                    title={() => <div className={s.ordersTitle}>Orders</div>}\r\n                    columns={columns}\r\n                    dataSource={getUserQuery.data?.getUser.orders}\r\n                    // pagination={{\r\n                    //     total: getOrdersQuery.data?.getOrders.total,\r\n                    //     onChange: async (pageNumber: number) => {\r\n                    //         const pageSkip = (pageNumber - 1) * pageTake;\r\n                    //         setPageSkip(pageSkip);\r\n                    //         await getOrdersQuery.refetch({\r\n                    //             getOrdersInput: {\r\n                    //                 skip: pageSkip,\r\n                    //                 take: pageTake,\r\n                    //                 like: searchLike,\r\n                    //                 orderStatus: orderStatus === all ? null : orderStatus,\r\n                    //             },\r\n                    //         });\r\n                    //     },\r\n                    // }}\r\n                    pagination={false}\r\n                    rowKey={'id'}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","export const sizeFormItem = {\r\n    labelCol: {span: 2},\r\n    wrapperCol: {span: 30},\r\n};\r\n","import {gql} from '@apollo/client';\r\nimport {Role, User} from '../../types/types';\r\n\r\nexport type GetRolesData = { getRoles: Role[] }\r\n\r\nexport type GetRolesVars = { }\r\n\r\nexport const GET_ROLES_QUERY = gql`\r\n    query GetRoles {\r\n        getRoles {\r\n            id\r\n            name\r\n            color\r\n        }\r\n    }\r\n\r\n`;\r\n","import {useMutation, useQuery} from '@apollo/client';\r\nimport {Button, Form, Input, message, Transfer} from 'antd';\r\nimport React, {FC, useEffect, useState} from 'react';\r\nimport {useNavigate, useParams} from 'react-router-dom';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {Error} from '../Error/Error';\r\nimport {GET_USER_QUERY, GetUserData, GetUserVars} from '../../gql/users-query';\r\nimport {RoleName} from '../../../types/types';\r\nimport {UPDATE_USER_MUTATION, updateRoleInput, UpdateUserData, UpdateUserVars} from '../../gql/users-mutation';\r\nimport {sizeFormItem} from '../../styles/sizeFormItem';\r\nimport {GET_ROLES_QUERY, GetRolesData, GetRolesVars} from '../../gql/roles-query';\r\n\r\nexport const UsersUpdate: FC = () => {\r\n    const params = useParams();\r\n    const userEmail = params.email || '';\r\n    const getUserQuery = useQuery<GetUserData, GetUserVars>(GET_USER_QUERY,\r\n        {\r\n            variables: {email: userEmail},\r\n            context: {gqlLink: gqlLinks.admin},\r\n        },\r\n    );\r\n    const getRolesQuery = useQuery<GetRolesData, GetRolesVars>(GET_ROLES_QUERY,\r\n        {\r\n            context: {gqlLink: gqlLinks.admin},\r\n        },\r\n    );\r\n    const [updateUserMutation, updateUserMutationOptions] = useMutation<UpdateUserData, UpdateUserVars>(UPDATE_USER_MUTATION,\r\n        {context: {gqlLink: gqlLinks.admin}},\r\n    );\r\n    const navigate = useNavigate();\r\n\r\n    const [targetKeys, setTargetKeys] = useState<string[]>([]);\r\n    const [selectedKeys, setSelectedKeys] = useState([]);\r\n\r\n    const onChange = (nextTargetKeys: string[], direction: any, moveKeys: any) => {\r\n        if (getRolesQuery.data) {\r\n            console.log('nextTargetKeys', nextTargetKeys);\r\n            const idCustomerRole = getRolesQuery.data.getRoles.find(role => role.name === RoleName.customer)?.id.toString() as string;\r\n            if (nextTargetKeys.some(key => key === idCustomerRole)) {\r\n                setTargetKeys(nextTargetKeys);\r\n            } else {\r\n                setTargetKeys([...nextTargetKeys, idCustomerRole]);\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    const onSelectChange = (sourceSelectedKeys: any, targetSelectedKeys: any) => {\r\n        // @ts-ignore\r\n        setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (getUserQuery.data?.getUser) {\r\n            setTargetKeys(getUserQuery.data.getUser.roles.map(role => role.id.toString()));\r\n        }\r\n    }, [getUserQuery.data?.getUser]);\r\n\r\n    const onFinish = async (values: {\r\n        id: string,\r\n        email: string,\r\n        firstName: string,\r\n        lastName: string,\r\n    }) => {\r\n        const parsedId = parseInt(values.id);\r\n        let newRoles: updateRoleInput[];\r\n        if (getRolesQuery.data) {\r\n            newRoles = getRolesQuery.data?.getRoles\r\n                .filter(role => targetKeys.some(key => key === role.id.toString()))\r\n                .map(role => {\r\n                    const {color, ...rest} = role;\r\n                    return rest;\r\n                });\r\n        } else {\r\n            newRoles = [];\r\n        }\r\n        console.log();\r\n        const response = await updateUserMutation({\r\n            variables: {\r\n                updateUserInput: {\r\n                    ...values,\r\n                    id: parsedId,\r\n                    roles: newRoles,\r\n                },\r\n            },\r\n        });\r\n        if (response.data && !response.errors) {\r\n            navigate('..');\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    if (!userEmail || getUserQuery.error)\r\n        return <Error/>;\r\n\r\n    if (getUserQuery.loading)\r\n        return <Loading/>;\r\n\r\n    return (\r\n        <Form name=\"updateUser\"\r\n              onFinish={onFinish}\r\n              initialValues={{\r\n                  id: getUserQuery.data?.getUser.id,\r\n                  email: getUserQuery.data?.getUser.email,\r\n                  firstName: getUserQuery.data?.getUser.firstName,\r\n                  lastName: getUserQuery.data?.getUser.lastName,\r\n              }}\r\n              {...sizeFormItem}\r\n        >\r\n            <Form.Item name=\"id\" style={{display: 'none'}}>\r\n                <Input type={'hidden'}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"email\"\r\n                label=\"E-mail\"\r\n                rules={[\r\n                    {\r\n                        type: 'email',\r\n                        message: 'The input is not valid E-mail!',\r\n                    },\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your E-mail!',\r\n                        whitespace: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder={'E-mail'} type={'email'}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"firstName\"\r\n                label=\"FirstName\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your FirstName!',\r\n                        whitespace: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder={'FirstName'}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"lastName\"\r\n                label=\"LastName\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your LastName!',\r\n                        whitespace: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder={'LastName'}/>\r\n            </Form.Item>\r\n            <Form.Item label={'Roles'}>\r\n                <Transfer\r\n                    dataSource={getRolesQuery.data?.getRoles}\r\n                    titles={['Rest roles', `User roles`]}\r\n                    targetKeys={targetKeys}\r\n                    selectedKeys={selectedKeys}\r\n                    onChange={onChange}\r\n                    onSelectChange={onSelectChange}\r\n                    render={role => role.name}\r\n                    rowKey={role => role.id.toString()}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType={'submit'}\r\n                        loading={getUserQuery.loading || updateUserMutationOptions.loading}>\r\n                    Update\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {UsersIndex} from './UsersIndex';\r\nimport {Error} from '../Error/Error';\r\nimport {UsersView} from './UsersView';\r\nimport {UsersUpdate} from './UsersUpdate';\r\n\r\nexport const UsersController: FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<UsersIndex/>}/>\r\n            <Route path={':email'} element={<UsersView/>}/>\r\n            <Route path={'update/:email'} element={<UsersUpdate/>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n};\r\n","import {gql} from '@apollo/client';\r\nimport {Characteristic, Product} from '../../types/types';\r\nimport {updateFileInput} from './files-mutation';\r\nimport {updateCategoryInput} from './categories-mutation';\r\n\r\nexport type CreateProductData = { createProduct: Product[] }\r\n\r\nexport type CreateProductVars = { createProductInput: createProductInput }\r\nexport type createProductInput = {\r\n    isShown: boolean,\r\n    name: string,\r\n    quantity: number,\r\n    priceUAH: number,\r\n    description: string,\r\n    characteristics: Characteristic[],\r\n    files: updateFileInput[],\r\n    categories: updateCategoryInput[];\r\n}\r\n\r\nexport const CREATE_PRODUCT_MUTATION = gql`\r\n    mutation CreateProduct($createProductInput: CreateProductInput!){\r\n        createProduct(createProductInput: $createProductInput){\r\n            id\r\n            name\r\n            slug\r\n            isShown\r\n            quantity\r\n            priceUAH\r\n            description\r\n            characteristics {\r\n                name\r\n                value\r\n            }\r\n            files {\r\n                id\r\n                fileImage\r\n                filePath\r\n                mimetype\r\n                destination\r\n                fileName\r\n                size\r\n                originalName\r\n            }\r\n            categories {\r\n                id\r\n                isShown\r\n                name\r\n                description\r\n                slug\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport type UpdateProductData = { updateProduct: Product }\r\n\r\nexport type UpdateProductVars = { updateProductInput: updateProductInput }\r\nexport type updateProductInput = createProductInput & { id: number }\r\n\r\nexport interface updateProductWithoutFilesInput extends Omit<updateProductInput, 'files'> {\r\n}\r\n\r\n\r\nexport const UPDATE_PRODUCT_MUTATION = gql`\r\n    mutation UpdateProduct($updateProductInput: UpdateProductInput!){\r\n        updateProduct(updateProductInput: $updateProductInput){\r\n            id\r\n            name\r\n            slug\r\n            isShown\r\n            quantity\r\n            priceUAH\r\n            description\r\n            characteristics {\r\n                name\r\n                value\r\n            }\r\n            files {\r\n                id\r\n                fileImage\r\n                filePath\r\n                mimetype\r\n                destination\r\n                fileName\r\n                size\r\n                originalName\r\n            }\r\n            categories {\r\n                id\r\n                isShown\r\n                name\r\n                description\r\n                slug\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type RemoveProductData = { removeProduct: boolean }\r\nexport type RemoveProductVars = { slug: string }\r\n\r\nexport const REMOVE_PRODUCT_MUTATION = gql`\r\n    mutation RemoveProduct($slug: String!){\r\n        removeProduct(slug: $slug)\r\n    }\r\n`;\r\n\r\n","import {gql} from '@apollo/client';\r\nimport {FileType} from '../../types/types';\r\n\r\nexport type GetFilesData = { getFiles: getFilesObject }\r\ntype getFilesObject = { files: FileType[], total: number }\r\n\r\nexport type GetFilesVars = { getFilesInput: getFilesInput }\r\ntype getFilesInput = {\r\n    take: number,\r\n    skip: number,\r\n    likeFileName: string,\r\n    likeMimetype: string,\r\n}\r\n\r\n\r\nexport const GET_FILES_QUERY = gql`\r\n    query GetFiles($getFilesInput: GetFilesInput!) {\r\n        getFiles(getFilesInput: $getFilesInput) {\r\n            files {\r\n                id\r\n                filePath\r\n                fileImage\r\n                mimetype\r\n                destination\r\n                fileName\r\n                size\r\n                originalName\r\n            }\r\n            total\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type GetFileData = { getFile: FileType }\r\nexport type GetFileVars = { id: number }\r\n\r\nexport const GET_FILE_QUERY = gql`\r\n    query GetFile($id: Int!){\r\n        getFile(id: $id){\r\n            id\r\n            filePath\r\n            fileImage\r\n            originalName\r\n            mimetype\r\n            destination\r\n            fileName\r\n            size\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type GetFileByNameData = { getFileByName: FileType }\r\nexport type GetFileByNameVars = { fileName: string }\r\n\r\nexport const GET_FILE_BY_NAME_QUERY = gql`\r\n    query GetFileByName($fileName: String!) {\r\n        getFileByName(fileName: $fileName) {\r\n            id\r\n            filePath\r\n            fileImage\r\n            mimetype\r\n            destination\r\n            fileName\r\n            size\r\n            originalName\r\n        }\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport {Avatar, Table} from 'antd';\r\nimport {ButtonsVUR} from '../../../admin-area/components/ButtonsVUD/ButtonsVUR';\r\nimport {FileType} from '../../../types/types';\r\nimport s from './PinnedUploadedFiles.module.css';\r\n\r\ntype Props = {\r\n    files: FileType[],\r\n    setFiles: (files: FileType[]) => void,\r\n    loading: boolean,\r\n}\r\n\r\nexport const PinnedUploadedFiles: React.FC<Props> = ({loading, files, setFiles}) => {\r\n\r\n    const clickRemoveHandler = (fileRemove: FileType) => {\r\n        const newFiles = files.filter(file => file !== fileRemove);\r\n        setFiles(newFiles);\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Image',\r\n            key: 'image',\r\n            render: (text: any, file: FileType) => {\r\n                return (\r\n                    <Avatar shape={'square'} size={48} src={file.fileImage} alt={file.fileName}/>\r\n                );\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Original name',\r\n            dataIndex: 'originalName',\r\n            key: 'originalName',\r\n        },\r\n        {\r\n            title: 'File name',\r\n            dataIndex: 'fileName',\r\n            key: 'fileName',\r\n        },\r\n        {\r\n            title: 'Size',\r\n            dataIndex: 'size',\r\n            key: 'size',\r\n        },\r\n        {\r\n            title: 'Actions',\r\n            dataIndex: 'actions',\r\n            key: 'actions',\r\n            render: (text: any, file: FileType) => (\r\n                <ButtonsVUR onRemove={() => clickRemoveHandler(file)}/>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Table columns={columns} dataSource={files} pagination={false} loading={loading} rowKey={'id'}/>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Editor} from '@tinymce/tinymce-react';\r\n\r\ntype Props = {\r\n    text: string,\r\n    setText: (text: string) => void,\r\n}\r\n\r\nexport const WysiwygEditor: FC<Props> = ({text, setText}) => {\r\n    return (\r\n        <Editor\r\n            init={{\r\n                height: '60vh',\r\n            }}\r\n            value={text}\r\n            onEditorChange={setText}\r\n            apiKey={'pn18e5vacaao1r9yihq8aq4c0gcomzoplpgle7xaza9d8e04'}\r\n        />\r\n    );\r\n};\r\n","import {gql} from '@apollo/client';\r\nimport {Category} from '../../types/types';\r\n\r\nexport type GetCategoriesData = { getCategories: getCategoriesObject }\r\nexport type getCategoriesObject = { categories: Category[], total: number }\r\n\r\nexport type GetCategoriesVars = { getCategoriesInput: getCategoriesInput }\r\nexport type getCategoriesInput = {\r\n    take: number,\r\n    skip: number,\r\n    likeName: string,\r\n}\r\n\r\nexport const GET_CATEGORIES_QUERY = gql`\r\n    query GetCategories($getCategoriesInput: GetCategoriesInput!) {\r\n        getCategories(getCategoriesInput: $getCategoriesInput) {\r\n            categories {\r\n                id\r\n                isShown\r\n                name\r\n                slug\r\n                description\r\n                products {\r\n                    id\r\n                    isShown\r\n                    name\r\n                    slug\r\n                    quantity\r\n                    priceUAH\r\n                    description\r\n                    characteristics {\r\n                        name\r\n                        value\r\n                    }\r\n                    files {\r\n                        id\r\n                        originalName\r\n                        mimetype\r\n                        destination\r\n                        fileName\r\n                        filePath\r\n                        fileImage\r\n                        size\r\n                    }\r\n                }\r\n            }\r\n            total\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type GetCategoryData = { getCategory: Category }\r\nexport type GetCategoryVars = { slug: string }\r\n\r\nexport const GET_CATEGORY_QUERY = gql`\r\n    query GetCategory($slug: String!) {\r\n        getCategory(slug: $slug) {\r\n            id\r\n            isShown\r\n            name\r\n            slug\r\n            description\r\n            products {\r\n                id\r\n                isShown\r\n                name\r\n                slug\r\n                quantity\r\n                priceUAH\r\n                description\r\n                characteristics {\r\n                    name\r\n                    value\r\n                }\r\n                files {\r\n                    id\r\n                    originalName\r\n                    mimetype\r\n                    destination\r\n                    fileName\r\n                    filePath\r\n                    fileImage\r\n                    size\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type GetCategoryByNameData = { getCategoryByName: Category }\r\nexport type GetCategoryByNameVars = { name: string }\r\n\r\nexport const GET_CATEGORY_BY_NAME_QUERY = gql`\r\n    query GetCategoryByName($name: String!){\r\n        getCategoryByName(name: $name){\r\n            id\r\n            isShown\r\n            name\r\n            slug\r\n            description\r\n            products {\r\n                id\r\n                isShown\r\n                name\r\n                slug\r\n                quantity\r\n                priceUAH\r\n                description\r\n                characteristics {\r\n                    name\r\n                    value\r\n                }\r\n                files {\r\n                    id\r\n                    originalName\r\n                    mimetype\r\n                    destination\r\n                    fileName\r\n                    filePath\r\n                    fileImage\r\n                    size\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport {Table} from 'antd';\r\nimport {ButtonsVUR} from '../../../admin-area/components/ButtonsVUD/ButtonsVUR';\r\nimport {Category, Product} from '../../../types/types';\r\nimport s from './PinnedCategories.module.css';\r\n\r\ntype Props = {\r\n    categories: Category[],\r\n    setCategories: (categories: Category[]) => void,\r\n    loading: boolean,\r\n}\r\n\r\nexport const PinnedCategories: React.FC<Props> = ({loading, categories, setCategories}) => {\r\n\r\n    const clickRemoveHandler = (categoryRemove: Category) => {\r\n        const newCategories = categories.filter(category => category !== categoryRemove);\r\n        setCategories(newCategories);\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Id',\r\n            dataIndex: 'id',\r\n            render: (text: any, category: Category) => <>#{category.id}</>,\r\n        },\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Actions',\r\n            dataIndex: 'actions',\r\n            key: 'actions',\r\n            render: (text: any, category: Category) => (\r\n                <ButtonsVUR onRemove={() => clickRemoveHandler(category)}/>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Table columns={columns} dataSource={categories} pagination={false} loading={loading}/>\r\n    );\r\n};\r\n","import {useMutation, useQuery} from '@apollo/client';\r\nimport {AutoComplete, Button, Form, Input, message, Space, Switch} from 'antd';\r\nimport React, {FC, useCallback, useState} from 'react';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {CREATE_PRODUCT_MUTATION, CreateProductData, CreateProductVars} from '../../gql/products-mutation';\r\nimport debounce from 'lodash.debounce';\r\nimport {\r\n    GET_FILE_BY_NAME_QUERY,\r\n    GET_FILES_QUERY,\r\n    GetFileByNameData,\r\n    GetFileByNameVars,\r\n    GetFilesData,\r\n    GetFilesVars,\r\n} from '../../gql/files-query';\r\nimport {Category, Characteristic, FileType} from '../../../types/types';\r\nimport {PinnedUploadedFiles} from '../../../common-area/components/PinnedUploadedFiles/PinnedUploadedFiles';\r\nimport {MinusCircleOutlined, PlusOutlined} from '@ant-design/icons';\r\nimport {WysiwygEditor} from '../../../common-area/components/WysiwygEditor/WysiwygEditor';\r\nimport {sizeFormItem} from '../../styles/sizeFormItem';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {\r\n    GET_CATEGORIES_QUERY,\r\n    GET_CATEGORY_BY_NAME_QUERY,\r\n    GetCategoriesData,\r\n    GetCategoriesVars,\r\n    GetCategoryByNameData,\r\n    GetCategoryByNameVars,\r\n} from '../../gql/categories-query';\r\nimport {PinnedCategories} from '../../../common-area/components/PinnedCategories/PinnedCategories';\r\nimport {updateCategoryInput} from '../../gql/categories-mutation';\r\n\r\nconst {Search} = Input;\r\n\r\nexport const ProductsCreate: FC = () => {\r\n    const [createProduct, createProductOption] = useMutation<CreateProductData, CreateProductVars>(CREATE_PRODUCT_MUTATION, {context: {gqlLink: gqlLinks.admin}});\r\n    const getFileByName = useQuery<GetFileByNameData, GetFileByNameVars>(GET_FILE_BY_NAME_QUERY, {context: {gqlLink: gqlLinks.admin}});\r\n    const getFilesQuery = useQuery<GetFilesData, GetFilesVars>(GET_FILES_QUERY, {context: {gqlLink: gqlLinks.admin}});\r\n    const navigate = useNavigate();\r\n    const [photos, setPhotos] = useState([] as FileType[]);\r\n    const [options, setOptions] = useState<{ value: string }[]>([]);\r\n    const [isShown, setIsShown] = useState<boolean>(true);\r\n    const [description, setDescription] = useState<string>('');\r\n\r\n    const getCategoriesQuery = useQuery<GetCategoriesData, GetCategoriesVars>(GET_CATEGORIES_QUERY, {context: {gqlLink: gqlLinks.admin}});\r\n    const getCategoryByName = useQuery<GetCategoryByNameData, GetCategoryByNameVars>(GET_CATEGORY_BY_NAME_QUERY, {context: {gqlLink: gqlLinks.admin}});\r\n    const [searchedCategoryNames, setSearchedCategoryNames] = useState<{ value: string }[]>([]);\r\n    const [categories, setCategories] = useState([] as Category[]);\r\n\r\n\r\n    const onFinish = async (values: {\r\n        name: string,\r\n        quantity: string,\r\n        priceUAH: string,\r\n        characteristics: Characteristic[]\r\n    }) => {\r\n        const intQuantity = parseInt(values.quantity);\r\n        const intPriceUAH = parseInt(values.priceUAH);\r\n        const characteristics = values.characteristics || [];\r\n        const photosWithoutExtra = photos.map(photo => {\r\n            const {filePath, fileImage, ...rest} = photo;\r\n            return rest;\r\n        });\r\n        const categoriesWithoutExtra: updateCategoryInput[] = categories.map(category => {\r\n            const {slug, products, ...rest} = category;\r\n            return rest;\r\n        });\r\n        const createProductsVars: CreateProductVars = {\r\n            createProductInput: {\r\n                ...values,\r\n                isShown,\r\n                quantity: intQuantity,\r\n                priceUAH: intPriceUAH,\r\n                description: description,\r\n                characteristics: characteristics,\r\n                files: photosWithoutExtra,\r\n                categories: categoriesWithoutExtra,\r\n            },\r\n        };\r\n        createProduct({variables: createProductsVars})\r\n            .then(() => navigate('..'))\r\n            .catch(error => message.error(error.message));\r\n    };\r\n\r\n    const onSearch = async (value: string) => {\r\n        if (value.trim() === '') {\r\n            setOptions([]);\r\n            return;\r\n        }\r\n        const response = await getFilesQuery.refetch({\r\n            getFilesInput: {\r\n                skip: 0,\r\n                take: 5,\r\n                likeFileName: value,\r\n                likeMimetype: 'image',\r\n            },\r\n        });\r\n        if (!response.errors) {\r\n            setOptions(response.data.getFiles.files.map(file => ({value: file.fileName})));\r\n            if (!response.data.getFiles.files.length) {\r\n                message.warning('Photos with current name not found');\r\n            }\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const debouncedSearch = useCallback(debounce(nextValue => onSearch(nextValue), 500), []);\r\n    const handleSearch = (value: string) => debouncedSearch(value);\r\n\r\n    const selectPhotoHandler = async (value: string) => {\r\n        if (photos.some(photo => photo.fileName === value)) {\r\n            message.warning('You already added this photo');\r\n            return;\r\n        }\r\n        console.log('selected: ' + value);\r\n        const response = await getFileByName.refetch({\r\n            fileName: value,\r\n        });\r\n        if (!response.errors) {\r\n            setPhotos([...photos, response.data.getFileByName]);\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n\r\n    const selectCategoryHandler = async (value: string) => {\r\n        if (categories.some(category => category.name === value)) {\r\n            message.warning('You already added this category');\r\n            return;\r\n        }\r\n        const response = await getCategoryByName.refetch({\r\n            name: value,\r\n        });\r\n        if (!response.errors) {\r\n            setCategories([...categories, response.data.getCategoryByName]);\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const onSearchCategoryHandler = async (value: string) => {\r\n        if (value.trim() === '') {\r\n            setSearchedCategoryNames([]);\r\n            return;\r\n        }\r\n        const response = await getCategoriesQuery.refetch({\r\n            getCategoriesInput: {\r\n                skip: 0,\r\n                take: 10,\r\n                likeName: value,\r\n            },\r\n        });\r\n        if (!response.errors) {\r\n            setSearchedCategoryNames(response.data.getCategories.categories.map(category => ({value: category.name})));\r\n            if (!response.data.getCategories.categories.length) {\r\n                message.warning('Categories with current name not found');\r\n            }\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const debouncedSearchCategoriesHandler = useCallback(debounce(nextValue => onSearchCategoryHandler(nextValue), 500), []);\r\n    const searchCategoriesHandler = (value: string) => debouncedSearchCategoriesHandler(value);\r\n\r\n\r\n    return (\r\n        <Form name=\"createProduct\" onFinish={onFinish}>\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                name=\"isShown\"\r\n                label=\"Is shown\"\r\n            >\r\n                <Switch size={'small'} checked={isShown} onChange={setIsShown}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                name=\"name\"\r\n                label=\"Name\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input product name',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder=\"Name\"/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                label=\"Photos\"\r\n            >\r\n                <AutoComplete\r\n                    options={options}\r\n                    onSearch={handleSearch}\r\n                    onSelect={selectPhotoHandler}\r\n                >\r\n                    <Search placeholder=\"Search in files\" enterButton\r\n                            loading={getFileByName.loading || getFilesQuery.loading}/>\r\n                </AutoComplete>\r\n            </Form.Item>\r\n            {photos.length > 0 && (\r\n                <Form.Item>\r\n                    <PinnedUploadedFiles loading={createProductOption.loading}\r\n                                         files={photos} setFiles={setPhotos}/>\r\n                </Form.Item>\r\n            )}\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                name=\"quantity\"\r\n                label=\"Quantity\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input product quantity',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder=\"Quantity\" type={'number'} addonAfter={'Units'}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                name=\"priceUAH\"\r\n                label=\"Price\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input product price',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder=\"Price\" type={'number'} addonAfter=\"UAH\"/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                label={'Description'}\r\n            >\r\n                <WysiwygEditor text={description} setText={setDescription}/>\r\n            </Form.Item>\r\n            <Form.List\r\n\r\n                name=\"characteristics\"\r\n            >\r\n                {(fields, {add, remove}) => (\r\n                    <>\r\n                        {fields.map(({key, name, ...restField}) => (\r\n                            <Space key={key} style={{display: 'flex', marginBottom: 8}} align=\"baseline\">\r\n                                <Form.Item\r\n                                    {...restField}\r\n                                    name={[name, 'name']}\r\n                                    rules={[{required: true, message: 'Missing name'}]}\r\n                                >\r\n                                    <Input placeholder=\"Name\"/>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    {...restField}\r\n                                    name={[name, 'value']}\r\n                                    rules={[{required: true, message: 'Missing value'}]}\r\n                                >\r\n                                    <Input placeholder=\"Value\"/>\r\n                                </Form.Item>\r\n                                <MinusCircleOutlined onClick={() => remove(name)}/>\r\n                            </Space>\r\n                        ))}\r\n                        <Form.Item>\r\n                            <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined/>}>\r\n                                Add characteristic\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </>\r\n                )}\r\n            </Form.List>\r\n            <Form.Item\r\n                label=\"Categories\"\r\n            >\r\n                <AutoComplete\r\n                    options={searchedCategoryNames}\r\n                    onSearch={searchCategoriesHandler}\r\n                    onSelect={selectCategoryHandler}\r\n                >\r\n                    <Search placeholder=\"Search categories\" enterButton\r\n                            loading={getCategoriesQuery.loading || getCategoryByName.loading}/>\r\n                </AutoComplete>\r\n            </Form.Item>\r\n            {categories.length > 0 && (\r\n                <Form.Item>\r\n                    <PinnedCategories loading={getCategoriesQuery.loading || getCategoryByName.loading}\r\n                                      categories={categories}\r\n                                      setCategories={setCategories}/>\r\n                </Form.Item>\r\n            )}\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType={'submit'}\r\n                        loading={createProductOption.loading || getFilesQuery.loading || getFileByName.loading}>\r\n                    Create\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n","import {gql} from '@apollo/client';\r\nimport {OrderBy, Product} from '../../types/types';\r\n\r\nexport type GetProductsData = { getProducts: getProductsObject }\r\nexport type getProductsObject = { products: Product[], total: number }\r\n\r\nexport type GetProductsVars = { getProductsInput: getProductsInput }\r\nexport type getProductsInput = {\r\n    take: number,\r\n    skip: number,\r\n    likeName: string,\r\n    orderBy: OrderBy,\r\n}\r\n\r\nexport const GET_PRODUCTS_QUERY = gql`\r\n    query GetProducts($getProductsInput: GetProductsInput!) {\r\n        getProducts(getProductsInput: $getProductsInput) {\r\n            products {\r\n                id\r\n                name\r\n                slug\r\n                isShown\r\n                quantity\r\n                priceUAH\r\n                description\r\n                characteristics {\r\n                    name\r\n                    value\r\n                }\r\n                files {\r\n                    id\r\n                    fileImage\r\n                    filePath\r\n                    mimetype\r\n                    destination\r\n                    fileName\r\n                    size\r\n                    originalName\r\n                }\r\n                categories {\r\n                    id\r\n                    isShown\r\n                    name\r\n                    description\r\n                    slug\r\n                }\r\n            }\r\n            total\r\n        }\r\n    }\r\n`;\r\n\r\nexport type GetProductData = { getProduct: Product }\r\nexport type GetProductVars = { slug: string }\r\n\r\n\r\nexport const GET_PRODUCT_QUERY = gql`\r\n    query GetProduct($slug: String!){\r\n        getProduct(slug: $slug){\r\n            id\r\n            name\r\n            slug\r\n            isShown\r\n            quantity\r\n            priceUAH\r\n            description\r\n            characteristics {\r\n                name\r\n                value\r\n            }\r\n            files {\r\n                id\r\n                fileImage\r\n                filePath\r\n                mimetype\r\n                destination\r\n                fileName\r\n                size\r\n                originalName\r\n            }\r\n            categories {\r\n                id\r\n                isShown\r\n                name\r\n                description\r\n                slug\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type GetProductByNameData = { getProductByName: Product }\r\nexport type GetProductByNameVars = { name: string }\r\n\r\nexport const GET_PRODUCT_BY_NAME_QUERY = gql`\r\n    query GetProductByName($name: String!) {\r\n        getProductByName(name: $name) {\r\n            id\r\n            isShown\r\n            name\r\n            slug\r\n            quantity\r\n            priceUAH\r\n            description\r\n            characteristics {\r\n                name\r\n                value\r\n            }\r\n            files {\r\n                id\r\n                originalName\r\n                mimetype\r\n                destination\r\n                fileName\r\n                filePath\r\n                fileImage\r\n                size\r\n            }\r\n            categories {\r\n                id\r\n                isShown\r\n                name\r\n                description\r\n                slug\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import {useMutation, useQuery} from '@apollo/client';\r\nimport {Avatar, Button, Carousel, Divider, message, Select, Switch, Table, Tag} from 'antd';\r\nimport React, {ChangeEvent, FC, useCallback, useEffect, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {GET_PRODUCTS_QUERY, GetProductsData, getProductsObject, GetProductsVars} from '../../gql/products-query';\r\nimport {OrderBy, Product} from '../../../types/types';\r\nimport {\r\n    REMOVE_PRODUCT_MUTATION,\r\n    RemoveProductData,\r\n    RemoveProductVars,\r\n    UPDATE_PRODUCT_MUTATION,\r\n    UpdateProductData,\r\n    UpdateProductVars,\r\n} from '../../gql/products-mutation';\r\nimport {ButtonsVUR} from '../ButtonsVUD/ButtonsVUR';\r\nimport s from './ProductsIndex.module.css';\r\nimport {updateFileInput} from '../../gql/files-mutation';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {updateCategoryInput} from '../../gql/categories-mutation';\r\nimport Search from 'antd/es/input/Search';\r\nimport debounce from 'lodash.debounce';\r\nimport {ColumnsType} from 'antd/es/table';\r\nimport {getStringFromCamelCase} from '../../../utils/stringActions';\r\n\r\nexport const ProductsIndex: FC = () => {\r\n    const [pageTake, setPageTake] = useState(10);\r\n    const [pageSkip, setPageSkip] = useState(0);\r\n    const [orderBy, setOrderBy] = useState<OrderBy>(OrderBy.newest);\r\n    const [searchLike, setSearchLike] = useState('');\r\n    const getProductsQuery = useQuery<GetProductsData, GetProductsVars>(\r\n        GET_PRODUCTS_QUERY,\r\n        {\r\n            variables: {\r\n                getProductsInput: {\r\n                    skip: pageSkip,\r\n                    take: pageTake,\r\n                    likeName: searchLike,\r\n                    orderBy: orderBy,\r\n                },\r\n            },\r\n            context: {gqlLink: gqlLinks.admin},\r\n        },\r\n    );\r\n    const [removeProduct, removeProductOptions] = useMutation<RemoveProductData, RemoveProductVars>(REMOVE_PRODUCT_MUTATION, {context: {gqlLink: gqlLinks.admin}});\r\n    const [updateProduct, updateProductOptions] = useMutation<UpdateProductData, UpdateProductVars>(UPDATE_PRODUCT_MUTATION, {context: {gqlLink: gqlLinks.admin}});\r\n    const [selectedProducts, setSelectedProducts] = useState<Product[]>([]);\r\n    const [productsObj, setProductsObj] = useState<getProductsObject>({products: [], total: 0});\r\n\r\n    useEffect(() => {\r\n        if (getProductsQuery.data?.getProducts)\r\n            setProductsObj(getProductsQuery.data.getProducts);\r\n    }, [getProductsQuery.data?.getProducts]);\r\n\r\n    const onRemove = async (slug: string) => {\r\n        const response = await removeProduct({variables: {slug: slug}});\r\n        if (response.data)\r\n            await getProductsQuery.refetch({\r\n                getProductsInput: {\r\n                    skip: pageSkip,\r\n                    take: pageTake,\r\n                    likeName: searchLike,\r\n                    orderBy: orderBy,\r\n                },\r\n            });\r\n        else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const rowSelection = {\r\n        onChange: (selectedRowKeys: React.Key[], selectedRows: Product[]) => {\r\n            console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\r\n            setSelectedProducts(selectedRows);\r\n        },\r\n    };\r\n\r\n    const toggleIsShownHandler = async (product: Product, flag: boolean) => {\r\n        const {slug, categories, ...rest} = product;\r\n        rest.isShown = flag;\r\n        const files: updateFileInput[] = product.files.map(file => {\r\n            const {fileImage, filePath, ...rest} = file;\r\n            return rest;\r\n        });\r\n        const categoriesWithoutExtra: updateCategoryInput[] = categories?.map(category => {\r\n            const {slug, products, ...rest} = category;\r\n            return rest;\r\n        });\r\n        const response = await updateProduct({\r\n            variables: {\r\n                updateProductInput: {\r\n                    ...rest,\r\n                    files: files,\r\n                    categories: categoriesWithoutExtra,\r\n                },\r\n            },\r\n        });\r\n        if (!response.errors) {\r\n            const newProducts = productsObj.products.map(product => product.id == response.data?.updateProduct.id ? response.data.updateProduct : product);\r\n            setProductsObj({products: newProducts, total: productsObj.total});\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const columns: ColumnsType<Product> = [\r\n        {\r\n            title: 'Id',\r\n            dataIndex: 'id',\r\n            key: 'id',\r\n            render: (text: any, product: Product) => <>#{product.id}</>,\r\n        },\r\n        {\r\n            title: 'Is shown',\r\n            dataIndex: 'isShown',\r\n            key: 'isShown',\r\n            render: (text: any, product: Product) => (\r\n                <Switch size={'small'} checked={product.isShown}\r\n                        onChange={(flag) => toggleIsShownHandler(product, flag)}/>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Image',\r\n            dataIndex: 'fileImage',\r\n            key: 'fileImage',\r\n            render: (text: any, product: Product) => (\r\n                <Carousel className={s.carousel}>\r\n                    {product.files?.map(file => (\r\n                        <Avatar key={file.id} className={s.image} shape={'square'} size={64} src={file.fileImage}\r\n                                alt={file.fileName}/>\r\n                    ))}\r\n                </Carousel>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Categories',\r\n            dataIndex: 'categories',\r\n            key: 'categories',\r\n            render: (text: any, product: Product) => (\r\n                <div className={s.categories}>\r\n                    {product?.categories?.length > 0 && product.categories.map(category => (\r\n                        <Tag color=\"cyan\" key={category.id}>\r\n                            <Link to={`../../categories/${category.slug}`}>{category.name} </Link>\r\n                        </Tag>\r\n                    ))}\r\n                </div>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Quantity',\r\n            dataIndex: 'quantity',\r\n            key: 'quantity',\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'priceUAH',\r\n            key: 'priceUAH',\r\n            render: (text: any, product: Product) => <>{product.priceUAH} UAH</>,\r\n        },\r\n        {\r\n            title: 'Actions',\r\n            dataIndex: 'actions',\r\n            key: 'actions',\r\n            render: (text: any, product: Product) => (\r\n                <ButtonsVUR viewUrl={`${product.slug}`} updateUrl={`update/${product.slug}`}\r\n                            onRemove={() => onRemove(product.slug)}/>\r\n            ),\r\n        },\r\n    ];\r\n\r\n\r\n    const onSearchProductsHandler = async (e: ChangeEvent<HTMLInputElement>) => {\r\n        const newPageSkip = 0;\r\n        const newSearchLike = e.target.value;\r\n        setSearchLike(newSearchLike);\r\n        setPageSkip(newPageSkip);\r\n        const response = await getProductsQuery.refetch({\r\n            getProductsInput: {\r\n                skip: newPageSkip,\r\n                take: pageTake,\r\n                likeName: newSearchLike,\r\n                orderBy: orderBy,\r\n            },\r\n        });\r\n        if (response.errors)\r\n            response.errors?.forEach(error => message.error(error.message));\r\n    };\r\n\r\n    const debouncedSearchProductHandler = useCallback(debounce(nextValue => onSearchProductsHandler(nextValue), 500), []);\r\n    const searchProductHandler = (e: ChangeEvent<HTMLInputElement>) => debouncedSearchProductHandler(e);\r\n\r\n    const orderByChangeHandler = async (value: OrderBy) => {\r\n        const newPageSkip = 0;\r\n        setPageSkip(newPageSkip);\r\n        setOrderBy(value);\r\n        setProductsObj({products: [], total: 0});\r\n        await getProductsQuery.refetch({\r\n            getProductsInput: {\r\n                skip: newPageSkip,\r\n                take: pageSkip,\r\n                likeName: searchLike,\r\n                orderBy: value,\r\n            },\r\n        });\r\n    };\r\n\r\n    if (getProductsQuery.error)\r\n        message.error(getProductsQuery.error.message);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"wrapperHeader\">\r\n                <div className=\"wrapperHeader\">\r\n                    <header>Products</header>\r\n                    <Link to={'create'}>\r\n                        <Button>Create</Button>\r\n                    </Link>\r\n                </div>\r\n                <Search placeholder=\"Search products\" className={'search'}\r\n                        onChange={searchProductHandler} enterButton\r\n                        loading={getProductsQuery.loading}/>\r\n            </div>\r\n            <Divider/>\r\n            <div>\r\n                <Select style={{width: '200px', marginBottom: '10px'}}\r\n                        defaultValue={orderBy}\r\n                        className={s.orderBy}\r\n                        onChange={orderByChangeHandler}\r\n                >\r\n                    {(Object.keys(OrderBy) as Array<keyof typeof OrderBy>).map((key, i) => (\r\n                        <Select.Option value={key} key={i}>{getStringFromCamelCase(key)}</Select.Option>\r\n                    ))}\r\n                </Select>\r\n                <Table\r\n                    loading={getProductsQuery.loading || removeProductOptions.loading || updateProductOptions.loading}\r\n                    rowSelection={{...rowSelection}}\r\n                    columns={columns}\r\n                    dataSource={productsObj.products}\r\n                    pagination={{\r\n                        total: productsObj.total,\r\n                        onChange: async (pageNumber: number) => {\r\n                            const pageSkip = (pageNumber - 1) * pageTake;\r\n                            setPageSkip(pageSkip);\r\n                            await getProductsQuery.refetch({\r\n                                getProductsInput: {\r\n                                    skip: pageSkip,\r\n                                    take: pageTake,\r\n                                    likeName: '',\r\n                                    orderBy: orderBy,\r\n                                },\r\n                            });\r\n                        },\r\n                    }}\r\n                    rowKey={'id'}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n","import {useMutation, useQuery} from '@apollo/client';\r\nimport {AutoComplete, Button, Form, Input, message, Space, Switch} from 'antd';\r\nimport React, {FC, useCallback, useEffect, useState} from 'react';\r\nimport {useNavigate, useParams} from 'react-router-dom';\r\nimport {UPDATE_PRODUCT_MUTATION, UpdateProductData, UpdateProductVars} from '../../gql/products-mutation';\r\nimport {GET_PRODUCT_QUERY, GetProductData, GetProductVars} from '../../gql/products-query';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {PinnedUploadedFiles} from '../../../common-area/components/PinnedUploadedFiles/PinnedUploadedFiles';\r\nimport {MinusCircleOutlined, PlusOutlined} from '@ant-design/icons';\r\nimport debounce from 'lodash.debounce';\r\nimport {\r\n    GET_FILE_BY_NAME_QUERY,\r\n    GET_FILES_QUERY,\r\n    GetFileByNameData,\r\n    GetFileByNameVars,\r\n    GetFilesData,\r\n    GetFilesVars,\r\n} from '../../gql/files-query';\r\nimport {Category, Characteristic, FileType} from '../../../types/types';\r\nimport {updateFileInput} from '../../gql/files-mutation';\r\nimport {WysiwygEditor} from '../../../common-area/components/WysiwygEditor/WysiwygEditor';\r\nimport {\r\n    GET_CATEGORIES_QUERY,\r\n    GET_CATEGORY_BY_NAME_QUERY,\r\n    GetCategoriesData,\r\n    GetCategoriesVars,\r\n    GetCategoryByNameData,\r\n    GetCategoryByNameVars,\r\n} from '../../gql/categories-query';\r\nimport {sizeFormItem} from '../../styles/sizeFormItem';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {Error} from '../Error/Error';\r\nimport {PinnedCategories} from '../../../common-area/components/PinnedCategories/PinnedCategories';\r\nimport {updateCategoryInput} from '../../gql/categories-mutation';\r\n\r\nconst {Search} = Input;\r\n\r\nexport const ProductsUpdate: FC = () => {\r\n    const params = useParams();\r\n    const productSlug = params.slug || '';\r\n    const getProductQuery = useQuery<GetProductData, GetProductVars>(\r\n        GET_PRODUCT_QUERY,\r\n        {\r\n            variables: {slug: productSlug},\r\n            context: {gqlLink: gqlLinks.admin},\r\n        },\r\n    );\r\n    const [updateProductMutation, updateProductMutationOptions] = useMutation<UpdateProductData, UpdateProductVars>(UPDATE_PRODUCT_MUTATION, {context: {gqlLink: gqlLinks.admin}});\r\n    const navigate = useNavigate();\r\n    const [isShown, setIsShown] = useState<boolean>(false);\r\n    const [description, setDescription] = useState<string>('');\r\n\r\n    const getFilesQuery = useQuery<GetFilesData, GetFilesVars>(GET_FILES_QUERY, {context: {gqlLink: gqlLinks.admin}});\r\n    const getFileByName = useQuery<GetFileByNameData, GetFileByNameVars>(GET_FILE_BY_NAME_QUERY, {context: {gqlLink: gqlLinks.admin}});\r\n    const [searchedPhotosNames, setSearchedPhotosNames] = useState<{ value: string }[]>([]);\r\n    const [photos, setPhotos] = useState([] as FileType[]);\r\n\r\n    const getCategoriesQuery = useQuery<GetCategoriesData, GetCategoriesVars>(GET_CATEGORIES_QUERY, {context: {gqlLink: gqlLinks.admin}});\r\n    const getCategoryByName = useQuery<GetCategoryByNameData, GetCategoryByNameVars>(GET_CATEGORY_BY_NAME_QUERY, {context: {gqlLink: gqlLinks.admin}});\r\n    const [searchedCategoryNames, setSearchedCategoryNames] = useState<{ value: string }[]>([]);\r\n    const [categories, setCategories] = useState([] as Category[]);\r\n\r\n    useEffect(() => {\r\n        if (getProductQuery.data) {\r\n            setIsShown(getProductQuery.data.getProduct.isShown);\r\n            setPhotos(getProductQuery.data.getProduct.files);\r\n            setCategories(getProductQuery.data.getProduct.categories);\r\n            setDescription(getProductQuery.data.getProduct.description);\r\n        }\r\n    }, [getProductQuery.data]);\r\n\r\n    const onFinish = async (values: {\r\n        id: string,\r\n        name: string,\r\n        quantity: string,\r\n        priceUAH: string,\r\n        characteristics: Characteristic[]\r\n    }) => {\r\n        const intId = parseInt(values.id);\r\n        const intQuantity = parseInt(values.quantity);\r\n        const intPriceUAH = parseInt(values.priceUAH);\r\n        const files: updateFileInput[] = photos.map(photo => {\r\n            const {fileImage, filePath, ...rest} = photo;\r\n            return rest;\r\n        });\r\n        const categoriesWithoutExtra: updateCategoryInput[] = categories.map(category => {\r\n            const {slug, products, ...rest} = category;\r\n            return rest;\r\n        });\r\n        updateProductMutation({\r\n            variables: {\r\n                updateProductInput: {\r\n                    ...values,\r\n                    id: intId,\r\n                    isShown: isShown,\r\n                    quantity: intQuantity,\r\n                    priceUAH: intPriceUAH,\r\n                    description: description,\r\n                    files: files,\r\n                    categories: categoriesWithoutExtra,\r\n                },\r\n            },\r\n        })\r\n            .then(() => navigate('..'))\r\n            .catch(error => message.error(error.message));\r\n    };\r\n\r\n    const selectPhotoHandler = async (value: string) => {\r\n        if (photos.some(photo => photo.fileName === value)) {\r\n            message.warning('You already added this photo');\r\n            return;\r\n        }\r\n        const response = await getFileByName.refetch({\r\n            fileName: value,\r\n        });\r\n        if (!response.errors) {\r\n            setPhotos([...photos, response.data.getFileByName]);\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const onSearchPhotoHandler = async (value: string) => {\r\n        if (value.trim() === '') {\r\n            setSearchedPhotosNames([]);\r\n            return;\r\n        }\r\n        const response = await getFilesQuery.refetch({\r\n            getFilesInput: {\r\n                skip: 0,\r\n                take: 10,\r\n                likeFileName: value,\r\n                likeMimetype: 'image',\r\n            },\r\n        });\r\n        if (!response.errors) {\r\n            setSearchedPhotosNames(response.data.getFiles.files.map(file => ({value: file.fileName})));\r\n            if (!response.data.getFiles.files.length) {\r\n                message.warning('Photos with current name not found');\r\n            }\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const debouncedSearchPhotoHandler = useCallback(debounce(nextValue => onSearchPhotoHandler(nextValue), 500), []);\r\n    const searchPhotoHandler = (value: string) => debouncedSearchPhotoHandler(value);\r\n\r\n\r\n    const selectCategoryHandler = async (value: string) => {\r\n        if (categories.some(category => category.name === value)) {\r\n            message.warning('You already added this category');\r\n            return;\r\n        }\r\n        const response = await getCategoryByName.refetch({\r\n            name: value,\r\n        });\r\n        if (!response.errors) {\r\n            setCategories([...categories, response.data.getCategoryByName]);\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const onSearchCategoryHandler = async (value: string) => {\r\n        if (value.trim() === '') {\r\n            setSearchedCategoryNames([]);\r\n            return;\r\n        }\r\n        const response = await getCategoriesQuery.refetch({\r\n            getCategoriesInput: {\r\n                skip: 0,\r\n                take: 10,\r\n                likeName: value,\r\n            },\r\n        });\r\n        if (!response.errors) {\r\n            setSearchedCategoryNames(response.data.getCategories.categories.map(category => ({value: category.name})));\r\n            if (!response.data.getCategories.categories.length) {\r\n                message.warning('Categories with current name not found');\r\n            }\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const debouncedSearchCategoriesHandler = useCallback(debounce(nextValue => onSearchCategoryHandler(nextValue), 500), []);\r\n    const searchCategoriesHandler = (value: string) => debouncedSearchCategoriesHandler(value);\r\n\r\n    if (!productSlug)\r\n        return <Error/>;\r\n\r\n    if (getProductQuery.error)\r\n        message.error(getProductQuery.error.message);\r\n\r\n    if (getProductQuery.loading)\r\n        return <Loading/>;\r\n\r\n    return (\r\n        <Form name=\"updateProduct\" onFinish={onFinish}\r\n              initialValues={{\r\n                  id: getProductQuery.data?.getProduct.id,\r\n                  name: getProductQuery.data?.getProduct.name,\r\n                  quantity: getProductQuery.data?.getProduct.quantity,\r\n                  priceUAH: getProductQuery.data?.getProduct.priceUAH,\r\n                  description: getProductQuery.data?.getProduct.description,\r\n                  characteristics: getProductQuery.data?.getProduct.characteristics,\r\n              }}>\r\n            <Form.Item name=\"id\" style={{display: 'none'}}>\r\n                <Input type={'hidden'}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                name=\"isShown\"\r\n                label=\"Is shown\"\r\n            >\r\n                <Switch size={'small'} checked={isShown} onChange={setIsShown}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                name=\"name\"\r\n                label=\"Name\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input product name',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder=\"Name\"/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                label=\"Photos\"\r\n            >\r\n                <AutoComplete\r\n                    options={searchedPhotosNames}\r\n                    onSearch={searchPhotoHandler}\r\n                    onSelect={selectPhotoHandler}\r\n                >\r\n                    <Search placeholder=\"Find in uploaded files\" enterButton\r\n                            loading={getFileByName.loading || getFilesQuery.loading}/>\r\n                </AutoComplete>\r\n            </Form.Item>\r\n            {photos.length > 0 && (\r\n                <Form.Item>\r\n                    <PinnedUploadedFiles loading={getProductQuery.loading || getFileByName.loading} files={photos}\r\n                                         setFiles={setPhotos}/>\r\n                </Form.Item>\r\n            )}\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                name=\"quantity\"\r\n                label=\"Quantity\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input product quantity',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder=\"Quantity\" type={'number'}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                name=\"priceUAH\"\r\n                label=\"Price\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input product price',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder=\"Price\" type={'number'} addonAfter=\"UAH\"/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                label={'Description'}\r\n            >\r\n                <WysiwygEditor text={description} setText={setDescription}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                label=\"Categories\"\r\n            >\r\n                <AutoComplete\r\n                    options={searchedCategoryNames}\r\n                    onSearch={searchCategoriesHandler}\r\n                    onSelect={selectCategoryHandler}\r\n                >\r\n                    <Search placeholder=\"Search categories\" enterButton\r\n                            loading={getCategoriesQuery.loading || getCategoryByName.loading}/>\r\n                </AutoComplete>\r\n            </Form.Item>\r\n            {categories.length > 0 && (\r\n                <Form.Item>\r\n                    <PinnedCategories loading={getCategoriesQuery.loading || getCategoryByName.loading}\r\n                                      categories={categories}\r\n                                      setCategories={setCategories}/>\r\n                </Form.Item>\r\n            )}\r\n            <Form.List name=\"characteristics\">\r\n                {(fields, {add, remove}) => (\r\n                    <>\r\n                        {fields.map(({key, name, ...restField}) => (\r\n                            <Space key={key} style={{display: 'flex', marginBottom: 8}} align=\"baseline\">\r\n                                <Form.Item\r\n                                    {...restField}\r\n                                    name={[name, 'name']}\r\n                                    rules={[{required: true, message: 'Missing name'}]}\r\n                                >\r\n                                    <Input placeholder=\"Name\"/>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    {...restField}\r\n                                    name={[name, 'value']}\r\n                                    rules={[{required: true, message: 'Missing value'}]}\r\n                                >\r\n                                    <Input placeholder=\"Value\"/>\r\n                                </Form.Item>\r\n                                <MinusCircleOutlined onClick={() => remove(name)}/>\r\n                            </Space>\r\n                        ))}\r\n                        <Form.Item>\r\n                            <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined/>}>\r\n                                Add characteristic\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </>\r\n                )}\r\n            </Form.List>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType={'submit'}\r\n                        loading={updateProductMutationOptions.loading || getProductQuery.loading || getFilesQuery.loading}>\r\n                    Update\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Link, Navigate, useNavigate, useParams} from 'react-router-dom';\r\nimport {useMutation, useQuery} from '@apollo/client';\r\nimport {GET_PRODUCT_QUERY, GetProductData, GetProductVars} from '../../gql/products-query';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {Avatar, Card, Carousel, message, Table, Tag} from 'antd';\r\nimport s from './ProductsView.module.css';\r\nimport {ButtonsVUR} from '../ButtonsVUD/ButtonsVUR';\r\nimport {REMOVE_PRODUCT_MUTATION, RemoveProductData, RemoveProductVars} from '../../gql/products-mutation';\r\nimport parse from 'html-react-parser';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {Error} from '../Error/Error';\r\n\r\nexport const ProductsView: FC = () => {\r\n    const params = useParams();\r\n    const productSlug = params.slug || '';\r\n    const getProductQuery = useQuery<GetProductData, GetProductVars>(\r\n        GET_PRODUCT_QUERY,\r\n        {\r\n            variables: {slug: productSlug},\r\n            context: {gqlLink: gqlLinks.admin},\r\n        },\r\n    );\r\n    const [removeProduct, removeProductOptions] = useMutation<RemoveProductData, RemoveProductVars>(REMOVE_PRODUCT_MUTATION, {context: {gqlLink: gqlLinks.admin}});\r\n    const navigate = useNavigate();\r\n\r\n    const columns = [\r\n        {\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            dataIndex: 'value',\r\n            key: 'value',\r\n        },\r\n    ];\r\n\r\n    const onRemove = async (slug: string) => {\r\n        const response = await removeProduct({variables: {slug: slug}});\r\n        if (response.data)\r\n            navigate(`../`);\r\n        else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    if (!productSlug || getProductQuery.error)\r\n        return <Error/>;\r\n\r\n    if (getProductQuery.loading)\r\n        return <Loading/>;\r\n\r\n    const product = getProductQuery.data?.getProduct;\r\n    return (\r\n        <>\r\n            <div className={s.photosAndMainInfo}>\r\n                <Carousel autoplay className={s.carousel}>\r\n                    {product?.files.map(file => (\r\n                        <Avatar key={file.id} className={s.image} shape={'square'} src={file.fileImage} size={256}/>\r\n                    ))}\r\n                </Carousel>\r\n                <div>\r\n                    <ButtonsVUR updateUrl={`../update/${productSlug}`} onRemove={() => onRemove(productSlug)}/>\r\n                    <header>{product?.name}</header>\r\n                    <table className=\"infoTable\">\r\n                        <tbody>\r\n                        <tr>\r\n                            <td>Id:</td>\r\n                            <td>\r\n                                <span># {product?.id}</span>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Is shown:</td>\r\n                            <td>\r\n                                {product?.isShown\r\n                                    ? <Tag color=\"green\">Yes</Tag>\r\n                                    : <Tag color=\"red\">No</Tag>\r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Price:</td>\r\n                            <td>\r\n                                <span>{product?.priceUAH}</span>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Quantity:</td>\r\n                            <td>\r\n                                <span>{product?.quantity}</span>\r\n                            </td>\r\n                        </tr>\r\n                        {(product && product?.categories.length > 0) && (\r\n                            <tr>\r\n                                <td>Categories:</td>\r\n                                <td>{product?.categories.map(category => (\r\n                                    <Tag color={'cyan'}>\r\n                                        <Link key={category.id}\r\n                                              to={'../../categories/' + category.slug}>{category.name}</Link>\r\n                                    </Tag>\r\n                                ))}\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div className={s.cards}>\r\n                <Card title=\"Description\" className={s.card}>{product && parse(product?.description)}</Card>\r\n                <Card title=\"Characteristics\" className={s.card}>\r\n                    <Table showHeader={false} dataSource={product?.characteristics}\r\n                           columns={columns} pagination={false}/>\r\n                </Card>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {Error} from '../Error/Error';\r\nimport {ProductsCreate} from './ProductsCreate';\r\nimport {ProductsIndex} from './ProductsIndex';\r\nimport {ProductsUpdate} from './ProductsUpdate';\r\nimport {ProductsView} from './ProductsView';\r\n\r\nexport const ProductsController: FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<ProductsIndex/>}/>\r\n            <Route path={':slug'} element={<ProductsView/>}/>\r\n            <Route path={'create'} element={<ProductsCreate/>}/>\r\n            <Route path={'update/:slug'} element={<ProductsUpdate/>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n};\r\n","import {gql} from '@apollo/client';\r\nimport {Category} from '../../types/types';\r\n\r\nexport type CreateCategoryData = { createCategory: Category }\r\n\r\nexport type CreateCategoryVars = { createCategoryInput: createCategoryInput }\r\nexport type createCategoryInput = {\r\n    isShown: boolean,\r\n    name: string,\r\n    description: string,\r\n}\r\n\r\nexport const CREATE_CATEGORY_MUTATION = gql`\r\n    mutation CreateCategory($createCategoryInput: CreateCategoryInput!) {\r\n        createCategory(createCategoryInput: $createCategoryInput) {\r\n            id\r\n            isShown\r\n            name\r\n            slug\r\n            description\r\n        }\r\n    }\r\n`;\r\n\r\nexport type UpdateCategoryData = { updateCategory: Category }\r\n\r\nexport type UpdateCategoryVars = { updateCategoryInput: updateCategoryInput }\r\nexport type updateCategoryInput = createCategoryInput & { id: number }\r\n\r\nexport const UPDATE_CATEGORY_MUTATION = gql`\r\n    mutation UpdateCategory($updateCategoryInput: UpdateCategoryInput!) {\r\n        updateCategory(updateCategoryInput: $updateCategoryInput) {\r\n            id\r\n            isShown\r\n            name\r\n            slug\r\n            description\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type RemoveCategoryData = { removeCategory: boolean }\r\nexport type RemoveCategoryVars = { slug: string }\r\n\r\nexport const REMOVE_CATEGORY_MUTATION = gql`\r\n    mutation RemoveCategory($slug: String!) {\r\n        removeCategory(slug: $slug)\r\n    }\r\n`;\r\n\r\n","import React, {FC, useEffect, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Button, Divider, message, Switch, Table} from 'antd';\r\nimport {useMutation, useQuery} from '@apollo/client';\r\nimport {\r\n    GET_CATEGORIES_QUERY,\r\n    GetCategoriesData,\r\n    getCategoriesObject,\r\n    GetCategoriesVars,\r\n} from '../../gql/categories-query';\r\nimport {Category} from '../../../types/types';\r\nimport {ButtonsVUR} from '../ButtonsVUD/ButtonsVUR';\r\nimport {\r\n    REMOVE_CATEGORY_MUTATION,\r\n    RemoveCategoryData,\r\n    RemoveCategoryVars,\r\n    UPDATE_CATEGORY_MUTATION,\r\n    UpdateCategoryData,\r\n    UpdateCategoryVars,\r\n} from '../../gql/categories-mutation';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\n\r\nexport const CategoriesIndex: FC = () => {\r\n    const [pageTake, setPageTake] = useState(10);\r\n    const [pageSkip, setSkipTake] = useState(0);\r\n    const [categoriesObj, setCategoriesObj] = useState<getCategoriesObject>({categories: [], total: 0});\r\n    const [selectedCategories, setSelectedCategories] = useState<Category[]>([]);\r\n\r\n    const getCategoriesQuery = useQuery<GetCategoriesData, GetCategoriesVars>(\r\n        GET_CATEGORIES_QUERY,\r\n        {\r\n            variables: {getCategoriesInput: {skip: pageSkip, take: pageTake, likeName: ''}},\r\n            context: {gqlLink: gqlLinks.admin},\r\n        },\r\n    );\r\n    const [removeCategory, removeCategoryOptions] = useMutation<RemoveCategoryData, RemoveCategoryVars>(REMOVE_CATEGORY_MUTATION,\r\n        {context: {gqlLink: gqlLinks.admin}},\r\n    );\r\n    const [updateCategory, updateCategoryOptions] = useMutation<UpdateCategoryData, UpdateCategoryVars>(UPDATE_CATEGORY_MUTATION,\r\n        {context: {gqlLink: gqlLinks.admin}},\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (getCategoriesQuery.data?.getCategories)\r\n            setCategoriesObj(getCategoriesQuery.data.getCategories);\r\n    }, [getCategoriesQuery.data?.getCategories]);\r\n\r\n    const rowSelection = {\r\n        onChange: (selectedRowKeys: React.Key[], selectedRows: Category[]) => {\r\n            console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\r\n            setSelectedCategories(selectedRows);\r\n        },\r\n    };\r\n\r\n    const onRemove = async (slug: string) => {\r\n        const response = await removeCategory({variables: {slug: slug}});\r\n        if (!response.errors)\r\n            await getCategoriesQuery.refetch({getCategoriesInput: {skip: pageSkip, take: pageTake, likeName: ''}});\r\n        else\r\n            response.errors.forEach(error => message.error(error.message));\r\n    };\r\n\r\n    const toggleIsShownHandler = async (category: Category, flag: boolean) => {\r\n        const {slug, products, ...rest} = category;\r\n        rest.isShown = flag;\r\n        const response = await updateCategory({\r\n            variables: {\r\n                updateCategoryInput: {\r\n                    ...rest,\r\n                },\r\n            },\r\n        });\r\n        if (!response.errors) {\r\n            const newCategories = categoriesObj.categories.map(category => (category.id == response.data?.updateCategory.id ? response.data.updateCategory : category));\r\n            setCategoriesObj({categories: newCategories, total: categoriesObj.total});\r\n        } else {\r\n            response.errors.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Id',\r\n            dataIndex: 'id',\r\n            key: 'id',\r\n            render: (text: any, category: Category) => <>#{category.id}</>,\r\n        },\r\n        {\r\n            title: 'Is shown',\r\n            dataIndex: 'isShown',\r\n            key: 'isShown',\r\n            render: (text: any, category: Category) => (\r\n                <Switch size={'small'} checked={category.isShown}\r\n                        onChange={(flag) => toggleIsShownHandler(category, flag)}/>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Actions',\r\n            dataIndex: 'actions',\r\n            key: 'actions',\r\n            render: (text: any, category: Category) => (\r\n                <ButtonsVUR viewUrl={`${category.slug}`} updateUrl={`update/${category.slug}`}\r\n                            onRemove={() => onRemove(category.slug)}/>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    if (getCategoriesQuery.error)\r\n        message.error(getCategoriesQuery.error.message);\r\n\r\n    if (getCategoriesQuery.loading)\r\n        return <Loading/>;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"wrapperHeader\">\r\n                <div className=\"wrapperHeader\">\r\n                    <header>Categories</header>\r\n                    <Link to={'create'}>\r\n                        <Button>Create</Button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n            <Divider/>\r\n            <div>\r\n                <Table\r\n                    loading={getCategoriesQuery.loading || removeCategoryOptions.loading || updateCategoryOptions.loading}\r\n                    rowSelection={{...rowSelection}}\r\n                    columns={columns}\r\n                    dataSource={categoriesObj.categories}\r\n                    pagination={{\r\n                        total: categoriesObj.total,\r\n                        onChange: async (pageNumber: number) => {\r\n                            const pageSkip = (pageNumber - 1) * pageTake;\r\n                            setSkipTake(pageSkip);\r\n                            await getCategoriesQuery.refetch({getCategoriesInput: {skip: pageSkip, take: pageTake, likeName: ''}});\r\n                        },\r\n                    }}\r\n                    rowKey={'id'}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import {useMutation} from '@apollo/client';\r\nimport {Button, Form, Input, message, Switch} from 'antd';\r\nimport React, {FC, useState} from 'react';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {CREATE_CATEGORY_MUTATION, CreateCategoryData, CreateCategoryVars} from '../../gql/categories-mutation';\r\nimport {WysiwygEditor} from '../../../common-area/components/WysiwygEditor/WysiwygEditor';\r\nimport {sizeFormItem} from '../../styles/sizeFormItem';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\n\r\nexport const CategoriesCreate: FC = () => {\r\n    const [createCategory, createCategoryOptions] = useMutation<CreateCategoryData, CreateCategoryVars>(CREATE_CATEGORY_MUTATION,\r\n        {context: {gqlLink: gqlLinks.admin}},\r\n    );\r\n    const navigate = useNavigate();\r\n    const [isShown, setIsShown] = useState<boolean>(true);\r\n    const [description, setDescription] = useState<string>('');\r\n\r\n    const onFinish = async (values: {\r\n        name: string,\r\n    }) => {\r\n        createCategory({\r\n            variables: {\r\n                createCategoryInput: {\r\n                    ...values,\r\n                    isShown,\r\n                    description: description,\r\n                },\r\n            },\r\n        })\r\n            .then(() => navigate('..'))\r\n            .catch(error => message.error(error.message));\r\n    };\r\n\r\n    return (\r\n        <Form name=\"createCategory\" onFinish={onFinish}>\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                name=\"isShown\"\r\n                label=\"Is shown\"\r\n            >\r\n                <Switch size={'small'} checked={isShown} onChange={setIsShown}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                name=\"name\"\r\n                label=\"Name\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input product name',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder=\"Name\"/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                label={'Description'}\r\n            >\r\n                <WysiwygEditor text={description} setText={setDescription}/>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType={'submit'} loading={createCategoryOptions.loading}>\r\n                    Create\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n","import React, {FC, useEffect, useState} from 'react';\r\nimport {useNavigate, useParams} from 'react-router-dom';\r\nimport {useMutation, useQuery} from '@apollo/client';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {Avatar, Card, Carousel, message, Table, Tag} from 'antd';\r\nimport {GET_CATEGORY_QUERY, GetCategoryData, GetCategoryVars} from '../../gql/categories-query';\r\nimport {Product} from '../../../types/types';\r\nimport {ButtonsVUR} from '../ButtonsVUD/ButtonsVUR';\r\nimport {REMOVE_CATEGORY_MUTATION, RemoveCategoryData, RemoveCategoryVars} from '../../gql/categories-mutation';\r\nimport s from './CategoriesView.module.css';\r\nimport parse from 'html-react-parser';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {Error} from '../Error/Error';\r\n\r\nexport const CategoriesView: FC = () => {\r\n        const [pageTake, setPageTake] = useState(10);\r\n        const [pageSkip, setSkipTake] = useState(0);\r\n        const params = useParams();\r\n        const categorySlug = params.slug || '';\r\n        const navigate = useNavigate();\r\n        const [products, setProducts] = useState<Product[]>([]);\r\n\r\n        const getCategoryQuery = useQuery<GetCategoryData, GetCategoryVars>(\r\n            GET_CATEGORY_QUERY, {\r\n                variables: {slug: categorySlug},\r\n                context: {gqlLink: gqlLinks.admin},\r\n            });\r\n        const [removeCategory, removeCategoryOptions] = useMutation<RemoveCategoryData, RemoveCategoryVars>(REMOVE_CATEGORY_MUTATION,\r\n            {context: {gqlLink: gqlLinks.admin}},\r\n        );\r\n\r\n        useEffect(() => {\r\n            if (getCategoryQuery.data?.getCategory)\r\n                setProducts(getCategoryQuery.data?.getCategory.products);\r\n        }, [getCategoryQuery.data?.getCategory]);\r\n\r\n        const columns = [\r\n            {\r\n                title: 'Id',\r\n                dataIndex: 'id',\r\n                key: 'id',\r\n                render: (text: any, product: Product) => <>#{product.id}</>,\r\n            },\r\n            {\r\n                title: 'Image',\r\n                dataIndex: 'fileImage',\r\n                key: 'fileImage',\r\n                render: (text: any, product: Product) => (\r\n                    <Carousel className={s.carousel}>\r\n                        {product.files.map(file => (\r\n                            <div>\r\n                                <Avatar className={s.image} shape={'square'} size={64} src={file.fileImage}\r\n                                        alt={file.fileName}/>\r\n                            </div>\r\n                        ))}\r\n                    </Carousel>\r\n                ),\r\n            },\r\n            {\r\n                title: 'Name',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n            },\r\n            {\r\n                title: 'Quantity',\r\n                dataIndex: 'quantity',\r\n                key: 'quantity',\r\n            },\r\n            {\r\n                title: 'Price',\r\n                dataIndex: 'priceUAH',\r\n                key: 'priceUAH',\r\n                render: (text: any, product: Product) => <>{product.priceUAH} UAH</>,\r\n            },\r\n            {\r\n                title: 'Actions',\r\n                dataIndex: 'actions',\r\n                key: 'actions',\r\n                render: (text: any, product: Product) => (\r\n                    <ButtonsVUR viewUrl={`../../products/${product.slug}`}/>\r\n                ),\r\n            },\r\n        ];\r\n\r\n        const onRemove = async (slug: string) => {\r\n            const response = await removeCategory({variables: {slug: slug}});\r\n            if (!response.errors)\r\n                navigate(`../`);\r\n            else {\r\n                response.errors?.forEach(error => message.error(error.message));\r\n            }\r\n        };\r\n\r\n        if (!categorySlug || getCategoryQuery.error)\r\n            return <Error/>;\r\n\r\n        if (getCategoryQuery.loading)\r\n            return <Loading/>;\r\n\r\n        const category = getCategoryQuery.data?.getCategory;\r\n        return (\r\n            <>\r\n                <ButtonsVUR updateUrl={`../update/${categorySlug}`} onRemove={() => onRemove(categorySlug)}/>\r\n                <header>{category?.name}</header>\r\n                <table className=\"infoTable\">\r\n                    <tbody>\r\n                    <tr>\r\n                        <td>Id:</td>\r\n                        <td>\r\n                            <span># {category?.id}</span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Is shown:</td>\r\n                        <td>\r\n                            {category?.isShown\r\n                                ? <Tag color=\"green\">Yes</Tag>\r\n                                : <Tag color=\"red\">No</Tag>\r\n                            }\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Slug:</td>\r\n                        <td>\r\n                            <span>{category?.slug}</span>\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n                <Table\r\n                    title={() => <div className={s.productsTitle}>Products</div>}\r\n                    loading={removeCategoryOptions.loading}\r\n                    columns={columns}\r\n                    dataSource={products.map(products => ({key: products.id, ...products}))}\r\n                    pagination={false}\r\n                    // pagination={{\r\n                    //     total: productsObj.total,\r\n                    //     onChange: async (pageNumber: number) => {\r\n                    //         const pageSkip = (pageNumber - 1) * pageTake;\r\n                    //         setSkipTake(pageSkip);\r\n                    //         // await getProductsByCategoryIdQuery.refetch({\r\n                    //         //     getProductsByCategoryIdInput: {\r\n                    //         //         categoryId: categoryId,\r\n                    //         //         skip: pageSkip,\r\n                    //         //         take: pageTake,\r\n                    //         //         likeName: '',\r\n                    //         //     },\r\n                    //         // });\r\n                    //     },\r\n                    // }}\r\n                />\r\n                <Card title=\"Description\" className={s.description}>{category && parse(category?.description)}</Card>\r\n            </>\r\n        );\r\n    }\r\n;\r\n;\r\n","import {useMutation, useQuery} from '@apollo/client';\r\nimport {Button, Form, Input, message, Switch} from 'antd';\r\nimport React, {FC, useEffect, useState} from 'react';\r\nimport {useNavigate, useParams} from 'react-router-dom';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {GET_CATEGORY_QUERY, GetCategoryData, GetCategoryVars} from '../../gql/categories-query';\r\nimport {UPDATE_CATEGORY_MUTATION, UpdateCategoryData, UpdateCategoryVars} from '../../gql/categories-mutation';\r\nimport {WysiwygEditor} from '../../../common-area/components/WysiwygEditor/WysiwygEditor';\r\nimport {sizeFormItem} from '../../styles/sizeFormItem';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {Error} from '../Error/Error';\r\n\r\nexport const CategoriesUpdate: FC = () => {\r\n    const params = useParams();\r\n    const categorySlug = params.slug || '';\r\n    const getCategoryQuery = useQuery<GetCategoryData, GetCategoryVars>(\r\n        GET_CATEGORY_QUERY,\r\n        {\r\n            variables: {slug: categorySlug},\r\n            context: {gqlLink: gqlLinks.admin},\r\n        },\r\n    );\r\n    const [updateCategory, updateCategoryOption] = useMutation<UpdateCategoryData, UpdateCategoryVars>(UPDATE_CATEGORY_MUTATION,\r\n        {context: {gqlLink: gqlLinks.admin}},\r\n    );\r\n    const navigate = useNavigate();\r\n    const [isShown, setIsShown] = useState<boolean>(false);\r\n    const [description, setDescription] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        if (getCategoryQuery.data?.getCategory) {\r\n            setIsShown(getCategoryQuery.data.getCategory.isShown);\r\n            setDescription(getCategoryQuery.data.getCategory.description);\r\n        }\r\n    }, [getCategoryQuery.data?.getCategory]);\r\n\r\n    const onFinish = async (values: {\r\n        id: string,\r\n        name: string,\r\n    }) => {\r\n        const intId = parseInt(values.id);\r\n        updateCategory({\r\n            variables: {\r\n                updateCategoryInput: {\r\n                    ...values,\r\n                    id: intId,\r\n                    isShown: isShown,\r\n                    description: description,\r\n                },\r\n            },\r\n        })\r\n            .then(() => navigate('..'))\r\n            .catch(error => message.error(error.message));\r\n    };\r\n\r\n    if (!categorySlug || getCategoryQuery.error)\r\n        return <Error/>;\r\n\r\n    if (getCategoryQuery.loading)\r\n        return <Loading/>;\r\n\r\n    return (\r\n        <Form name=\"updateCategory\" onFinish={onFinish}\r\n              initialValues={{\r\n                  id: getCategoryQuery.data?.getCategory.id,\r\n                  name: getCategoryQuery.data?.getCategory.name,\r\n                  description: getCategoryQuery.data?.getCategory.description,\r\n              }}>\r\n            <Form.Item name=\"id\" style={{display: 'none'}}>\r\n                <Input type={'hidden'}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                name=\"isShown\"\r\n                label=\"Is shown\"\r\n            >\r\n                <Switch size={'small'} checked={isShown} onChange={setIsShown}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                name=\"name\"\r\n                label=\"Name\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input product name',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder=\"Name\"/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                {...sizeFormItem}\r\n                label={'Description'}\r\n            >\r\n                <WysiwygEditor text={description} setText={setDescription}/>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType={'submit'}\r\n                        loading={getCategoryQuery.loading || updateCategoryOption.loading}>\r\n                    Update\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {Error} from '../Error/Error';\r\nimport {CategoriesIndex} from './CategoriesIndex';\r\nimport {CategoriesCreate} from './CategoriesCreate';\r\nimport {CategoriesView} from './CategoriesView';\r\nimport {CategoriesUpdate} from './CategoriesUpdate';\r\n\r\nexport const CategoriesController: FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<CategoriesIndex/>}/>\r\n            <Route path={'/:slug'} element={<CategoriesView/>}/>\r\n            <Route path={'create'} element={<CategoriesCreate/>}/>\r\n            <Route path={'update/:slug'} element={<CategoriesUpdate/>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n};\r\n","import {FileType} from '../../types/types';\r\nimport {gql} from '@apollo/client';\r\n\r\n// CREATE FILE\r\nexport type CreateFileData = { createFile: FileType }\r\n\r\nexport type CreateFileVars = { createFileInput: createFileInput }\r\nexport type createFileInput = {\r\n    originalName: string;\r\n    mimetype: string;\r\n    destination: string;\r\n    fileName: string;\r\n    size: number;\r\n}\r\nexport const CREATE_FILE_MUTATION = gql`\r\n    mutation CreateFile($createFileInput: CreateFileInput!) {\r\n        createFile(createFileInput: $createFileInput) {\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\n\r\n// UPDATE FILE\r\nexport type UpdateFileData = { updateFile: FileType }\r\n\r\nexport type UpdateFileVars = { updateFileInput: updateFileInput }\r\nexport type updateFileInput = createFileInput & { id: number }\r\n\r\nexport const UPDATE_FILE_MUTATION = gql`\r\n    mutation UpdateFile($updateFileInput: UpdateFileInput!) {\r\n        updateFile(updateFileInput: $updateFileInput) {\r\n            id\r\n            originalName\r\n            mimetype\r\n            destination\r\n            fileName\r\n            filePath\r\n            fileImage\r\n            size\r\n        }\r\n    }\r\n`;\r\n\r\n\r\n// DELETE FILE\r\nexport type RemoveFileData = { removeFile: boolean }\r\nexport type RemoveFileVars = { id: number }\r\n\r\nexport const REMOVE_FILE_MUTATION = gql`\r\n    mutation RemoveFile($id: Int!){\r\n        removeFile(id: $id)\r\n    }\r\n`;\r\n","import React, {ChangeEvent, FC} from 'react';\r\nimport {Avatar, Input, Table} from 'antd';\r\nimport {ButtonsVUR} from '../../../admin-area/components/ButtonsVUD/ButtonsVUR';\r\nimport {FileName} from '../../../types/types';\r\n\r\ntype EditableColumnProps = {\r\n    file: File,\r\n    index: number,\r\n    filesNames: FileName[],\r\n    setFilesNames: (fileNames: FileName[]) => void,\r\n}\r\n\r\nconst EditableColumn: FC<EditableColumnProps> = ({file, index, filesNames, setFilesNames}) => {\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const newFilesNames = filesNames.map((fileName, i) => {\r\n            if (i === index)\r\n                return ({originalName: file.name, newName: e.target.value});\r\n            return fileName;\r\n        });\r\n        setFilesNames(newFilesNames);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Input value={filesNames[index].newName} onChange={onChangeHandler}/>\r\n            {filesNames[index].newName.trim() === '' &&\r\n            <div className={'errorMessage'}>File name can not be empty</div>}\r\n        </>\r\n    );\r\n};\r\n\r\n\r\ntype Props = {\r\n    files: File[],\r\n    setFiles: (files: File[]) => void,\r\n    filesNames: FileName[],\r\n    setFilesNames: (filesNames: FileName[]) => void,\r\n    loading: boolean,\r\n}\r\nexport const PinnedFiles: React.FC<Props> = ({loading, files, setFiles, filesNames, setFilesNames}) => {\r\n\r\n    const clickRemoveHandler = (fileRemove: File, index: number) => {\r\n        const newFiles = files.filter(file => file !== fileRemove);\r\n        setFiles(newFiles);\r\n        const newFilesNames = filesNames.filter((fileName, i) => i !== index);\r\n        setFilesNames(newFilesNames);\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Image',\r\n            dataIndex: 'image',\r\n            key: 'image',\r\n            render: (text: any, file: File) => {\r\n                const regex = file.type.match(/image/);\r\n                return (\r\n                    <Avatar shape={'square'} size={48}\r\n                            src={regex && regex.length ? URL.createObjectURL(file) : 'https://www.colinfoss.com/wp-content/uploads/2019/10/document.png'}\r\n                            alt={file.name}/>\r\n                );\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: (text: any, file: File) => <EditableColumn file={file} index={files.indexOf(file)}\r\n                                                               filesNames={filesNames} setFilesNames={setFilesNames}/>,\r\n        },\r\n        {\r\n            title: 'Size',\r\n            dataIndex: 'size',\r\n            key: 'size',\r\n        },\r\n        {\r\n            title: 'Actions',\r\n            dataIndex: 'actions',\r\n            key: 'actions',\r\n            render: (text: any, file: File) => (\r\n                <ButtonsVUR onRemove={() => clickRemoveHandler(file, files.indexOf(file))}/>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Table columns={columns} dataSource={files} pagination={false} loading={loading}/>\r\n    );\r\n};\r\n","import {instance} from './api';\r\nimport {FileName, FileType} from '../../types/types';\r\n\r\nexport const filesAPI = {\r\n    upload(files: File[], filesNames: FileName[]) {\r\n        let formData = new FormData;\r\n        files.forEach((file, i) => {\r\n            formData.append(\"files[]\", file, filesNames[i].newName);\r\n        });\r\n        return instance.post<ResponseType>('files/upload', formData, {\r\n            headers: {'Content-Type': 'multipart-form-data'},\r\n        }).then(res => res.data);\r\n    },\r\n};\r\n\r\ntype ResponseType = {\r\n    result: boolean,\r\n    files: FileType[],\r\n}\r\n","import {BaseThunkType, InferActionsTypes} from './redux-store';\r\nimport {filesAPI} from '../admin-area/api/files-api';\r\nimport {FileName, FileType} from '../types/types';\r\n\r\nlet initialState = {\r\n    loading: false,\r\n    uploadedFiles: [] as FileType[],\r\n};\r\n\r\nconst filesReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_LOADING':\r\n            return {\r\n                ...state,\r\n                loading: action.loading,\r\n            };\r\n        case 'SET_UPLOADED_FILES':\r\n            return {\r\n                ...state,\r\n                uploadedFiles: action.uploadedFiles,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setLoading: (loading: boolean) => ({\r\n        type: 'SET_LOADING',\r\n        loading,\r\n    } as const),\r\n    setUploadedFiles: (uploadedFiles: FileType[]) => ({\r\n        type: 'SET_UPLOADED_FILES',\r\n        uploadedFiles,\r\n    } as const),\r\n};\r\n\r\nexport const upload = (files: File[], filesNames: FileName[]): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setLoading(true));\r\n    let data = await filesAPI.upload(files, filesNames);\r\n    if (data.result === true) {\r\n        dispatch(actions.setUploadedFiles(data.files));\r\n    }\r\n    dispatch(actions.setLoading(false));\r\n};\r\n\r\nexport default filesReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType>;\r\n","import {AppStateType} from './redux-store';\r\n\r\nexport const s_getLoading = (state: AppStateType) => {\r\n    return state.files.loading;\r\n};\r\n\r\nexport const s_getUploadedFiles = (state: AppStateType) => {\r\n    return state.files.uploadedFiles;\r\n};\r\n","import {Avatar, Button, Form, message} from 'antd';\r\nimport React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {CREATE_FILE_MUTATION, CreateFileData, CreateFileVars} from '../../gql/files-mutation';\r\nimport {useMutation} from '@apollo/client';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {PinnedFiles} from '../../../common-area/components/PinnedFiles/PinnedFiles';\r\nimport {PlusOutlined} from '@ant-design/icons';\r\nimport s from './FilesCreate.module.css';\r\nimport {actions, upload} from '../../../redux/files-reducer';\r\nimport {s_getLoading, s_getUploadedFiles} from '../../../redux/files.selectors';\r\nimport {FileName} from '../../../types/types';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\n\r\nexport const FilesCreate: FC = () => {\r\n    const [createFile, createFileOptions] = useMutation<CreateFileData, CreateFileVars>(CREATE_FILE_MUTATION, {context: {gqlLink: gqlLinks.admin}});\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const [files, setFiles] = useState([] as File[]);\r\n    const [filesNames, setFilesNames] = useState([] as FileName[]);\r\n    const uploadedFiles = useSelector(s_getUploadedFiles);\r\n    const loadingUpload = useSelector(s_getLoading);\r\n\r\n    useEffect(() => {\r\n        if (uploadedFiles.length) {\r\n            uploadedFiles.forEach(async (file) => {\r\n                console.log('upload file: ', file);\r\n                const response = await createFile({\r\n                    variables: {createFileInput: {...file}},\r\n                });\r\n                if (response.errors) {\r\n                    response.errors?.forEach(error => message.error(error.message));\r\n                }\r\n            });\r\n            dispatch(actions.setUploadedFiles([]));\r\n            navigate('..');\r\n        }\r\n    }, [uploadedFiles]);\r\n\r\n    const onFinish = async () => {\r\n        if (files.length) {\r\n            dispatch(upload(files, filesNames));\r\n        }\r\n    };\r\n\r\n    const fileChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            const newFiles = Array.from(e.target.files);\r\n            setFilesNames([...filesNames, ...newFiles.map(file => ({newName: file.name, originalName: file.name}))]);\r\n            setFiles([...files, ...newFiles]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Form name=\"createFile\" onFinish={onFinish}>\r\n            <Form.Item>\r\n                <input type=\"file\" id=\"file\" multiple style={{display: 'none'}} onChange={fileChangeHandler}/>\r\n                <label className={s.labelFile} htmlFor=\"file\">\r\n                    <Avatar icon={<PlusOutlined/>}/>\r\n                </label>\r\n            </Form.Item>\r\n\r\n            {files.length > 0 && (\r\n                <>\r\n                    <Form.Item>\r\n                        <PinnedFiles loading={createFileOptions.loading || loadingUpload} files={files}\r\n                                     setFiles={setFiles} filesNames={filesNames} setFilesNames={setFilesNames}/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType={'submit'} loading={createFileOptions.loading || loadingUpload}>\r\n                            Create\r\n                        </Button>\r\n                    </Form.Item>\r\n                </>\r\n            )}\r\n        </Form>\r\n    );\r\n};\r\n","import {useMutation, useQuery} from '@apollo/client';\r\nimport React, {ChangeEvent, FC, useCallback, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {GET_FILES_QUERY, GetFilesData, GetFilesVars} from '../../gql/files-query';\r\nimport {Avatar, Button, Divider, message, Table} from 'antd';\r\nimport {FileType} from '../../../types/types';\r\nimport {ButtonsVUR} from '../ButtonsVUD/ButtonsVUR';\r\nimport {REMOVE_FILE_MUTATION, RemoveFileData, RemoveFileVars} from '../../gql/files-mutation';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {actions} from '../../../redux/files-reducer';\r\nimport {s_getLoading} from '../../../redux/files.selectors';\r\nimport debounce from 'lodash.debounce';\r\nimport Search from 'antd/es/input/Search';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\n\r\nexport const FilesIndex: FC = () => {\r\n    const [pageTake, setPageTake] = useState(10);\r\n    const [pageSkip, setPageSkip] = useState(0);\r\n    const getFilesQuery = useQuery<GetFilesData, GetFilesVars>(\r\n        GET_FILES_QUERY,\r\n        {\r\n            variables: {\r\n                getFilesInput: {\r\n                    skip: pageSkip,\r\n                    take: pageTake,\r\n                    likeFileName: '',\r\n                    likeMimetype: '',\r\n                },\r\n            },\r\n            context: {gqlLink: gqlLinks.admin},\r\n        },\r\n    );\r\n    const [removeFile, removeFileOptions] = useMutation<RemoveFileData, RemoveFileVars>(REMOVE_FILE_MUTATION, {context: {gqlLink: gqlLinks.admin}});\r\n    const [selectedFiles, setSelectedFiles] = useState<FileType[]>([]);\r\n    const uploadLoading = useSelector(s_getLoading);\r\n    const dispatch = useDispatch();\r\n    const [searchFileName, setSearchFileName] = useState<string>('');\r\n\r\n    const onRemove = async (id: number) => {\r\n        const response = await removeFile({variables: {id: id}});\r\n        if (response.data && !response.errors) {\r\n            dispatch(actions.setLoading(true));\r\n            await getFilesQuery.refetch({\r\n                getFilesInput: {\r\n                    skip: pageSkip,\r\n                    take: pageTake,\r\n                    likeFileName: searchFileName,\r\n                    likeMimetype: '',\r\n                },\r\n            });\r\n            dispatch(actions.setLoading(false));\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const rowSelection = {\r\n        onChange: (selectedRowKeys: React.Key[], selectedRows: FileType[]) => {\r\n            console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\r\n            setSelectedFiles(selectedRows);\r\n        },\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Image',\r\n            dataIndex: 'image',\r\n            key: 'image',\r\n            render: (text: any, file: FileType) => (\r\n                <Avatar size={48} shape={'square'} src={file.fileImage}/>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Original name',\r\n            dataIndex: 'originalName',\r\n            key: 'originalName',\r\n        },\r\n        {\r\n            title: 'File name',\r\n            dataIndex: 'fileName',\r\n            key: 'fileName',\r\n        },\r\n        {\r\n            title: 'Mimetype',\r\n            dataIndex: 'mimetype',\r\n            key: 'fileName',\r\n        },\r\n        {\r\n            title: 'Size',\r\n            dataIndex: 'size',\r\n            key: 'size',\r\n        },\r\n        {\r\n            title: 'Actions',\r\n            dataIndex: 'size',\r\n            key: 'size',\r\n            render: (text: any, file: FileType) => (\r\n                <ButtonsVUR onRemove={() => onRemove(file.id)} viewUrlA={file.filePath}/>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const onSearch = async (value: string) => {\r\n        const newPageSkip = 0;\r\n        setPageSkip(newPageSkip);\r\n        setSearchFileName(value);\r\n        await getFilesQuery.refetch({\r\n            getFilesInput: {\r\n                skip: newPageSkip,\r\n                take: pageTake,\r\n                likeFileName: value,\r\n                likeMimetype: '',\r\n            },\r\n        });\r\n    };\r\n\r\n\r\n    const debouncedSearch = useCallback(debounce(nextValue => onSearch(nextValue), 500), []);\r\n    const handleSearch = (e: ChangeEvent<HTMLInputElement>) => debouncedSearch(e.target.value);\r\n\r\n    if (getFilesQuery.error) {\r\n        message.error(getFilesQuery.error.message);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"wrapperHeader\">\r\n                <div className=\"wrapperHeader\">\r\n                    <header>Files</header>\r\n                    <Link to={'create'}>\r\n                        <Button>Create</Button>\r\n                    </Link>\r\n                </div>\r\n                <Search placeholder=\"Search\" onChange={handleSearch} enterButton className=\"search\"\r\n                        loading={getFilesQuery.loading}/>\r\n            </div>\r\n            <Divider/>\r\n            <div>\r\n                <Table\r\n                    loading={getFilesQuery.loading || removeFileOptions.loading || uploadLoading}\r\n                    rowSelection={{...rowSelection}}\r\n                    columns={columns}\r\n                    dataSource={getFilesQuery.data?.getFiles.files}\r\n                    rowKey={'id'}\r\n                    pagination={{\r\n                        total: getFilesQuery.data?.getFiles.total,\r\n                        onChange: async (pageNumber: number) => {\r\n                            const pageSkip = (pageNumber - 1) * pageTake;\r\n                            setPageSkip(pageSkip);\r\n                            await getFilesQuery.refetch({\r\n                                getFilesInput: {\r\n                                    skip: pageSkip,\r\n                                    take: pageTake,\r\n                                    likeFileName: searchFileName,\r\n                                    likeMimetype: '',\r\n                                },\r\n                            });\r\n                        },\r\n                    }}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import {useMutation, useQuery} from '@apollo/client';\r\nimport {Button, Form, Input} from 'antd';\r\nimport React, {FC} from 'react';\r\nimport {Navigate, useNavigate, useParams} from 'react-router-dom';\r\nimport s from './FilesUpdate.module.css';\r\nimport {GET_PRODUCT_QUERY, GetProductData, GetProductVars} from '../../gql/products-query';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {Error} from '../Error/Error';\r\n\r\nexport const FilesUpdate: FC = () => {\r\n    const params = useParams();\r\n\r\n    // const {loading, error, data} = useQuery<GetProductData, GetProductVars>(\r\n    //     GET_PRODUCT_QUERY,\r\n    //     {variables: {id: params.id ? parseInt(params.id) : 0}, context: {gqlLink: gqlLinks.graphqlAdmin}},\r\n    // );\r\n    // const [createProduct] = useMutation<ProductUpdateData, ProductUpdateVars>(PRODUCT_UPDATE_MUTATION, {context: {gqlLink: gqlLinks.graphqlAdmin}});\r\n    const navigate = useNavigate();\r\n\r\n    if (!params.id)\r\n        return <Error/>;\r\n\r\n    // if (loading)\r\n    //     return <Loading/>;\r\n    //\r\n    // if (error)\r\n    //     console.log(error);\r\n\r\n    const onFinish = async (values: { id: number, name: string }) => {\r\n        console.log('Received values of form: ', values);\r\n        // const response = await createProduct({variables: {updateProductInput: {...values}}});\r\n        // console.log(response);\r\n        // if (response.data && !response.errors) {\r\n        //     navigate('..');\r\n        // } else\r\n        //     console.log('error:', response.errors);\r\n    };\r\n\r\n    return (\r\n        <Form name=\"createProduct\" onFinish={onFinish}\r\n              // initialValues={{id: data?.getProduct.id, name: data?.getProduct.name}}\r\n        >\r\n            <Form.Item name=\"id\" className={s.inputId}>\r\n                <Input type={'hidden'} className={s.inputId}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"name\"\r\n                label=\"Name\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input product name',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder=\"Product name\"/>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType={'submit'}>\r\n                    Update\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Link, Navigate, useParams} from 'react-router-dom';\r\nimport {useQuery} from '@apollo/client';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {Avatar, Card, message} from 'antd';\r\nimport s from './FilesView.module.css';\r\nimport {GET_FILE_QUERY, GetFileData, GetFileVars} from '../../gql/files-query';\r\nimport {DeleteOutlined, FormOutlined} from '@ant-design/icons';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {Error} from '../Error/Error';\r\n\r\nconst {Meta} = Card;\r\n\r\nexport const FilesView: FC = () => {\r\n    const params = useParams();\r\n    const fileId = params.id ? parseInt(params.id) : 0\r\n    const getFileQuery = useQuery<GetFileData, GetFileVars>(\r\n        GET_FILE_QUERY,\r\n        {\r\n            variables: {id: params.id ? parseInt(params.id) : 0},\r\n            context: {gqlLink: gqlLinks.admin},\r\n        },\r\n    );\r\n\r\n    if (!params.id)\r\n        return <Error/>;\r\n\r\n    if (getFileQuery.loading)\r\n        return <Loading/>;\r\n\r\n    if (getFileQuery.error) {\r\n        message.error(getFileQuery.error);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card\r\n                className={s.card}\r\n                cover={\r\n                    <Avatar\r\n                        shape={'square'}\r\n                        size={300}\r\n                        src={getFileQuery.data?.getFile.filePath}\r\n                    />\r\n                }\r\n                actions={[\r\n                    <Link to={`../update/${getFileQuery.data?.getFile.id}`} className={'buttonUpdate'}>\r\n                        <Avatar size={28} icon={<FormOutlined/>}/>\r\n                    </Link>,\r\n                    <Link to={`../remove/${getFileQuery.data?.getFile.id}`} className={'buttonRemove'}>\r\n                        <Avatar size={28} icon={<DeleteOutlined/>}/>\r\n                    </Link>,\r\n                ]}\r\n            >\r\n                <Meta\r\n                    title={getFileQuery.data?.getFile.originalName}\r\n                    description={(\r\n                        <>\r\n                            <div>Size: {getFileQuery.data?.getFile.size}</div>\r\n                            <div>Mimetype: {getFileQuery.data?.getFile.mimetype}</div>\r\n                        </>\r\n                    )}\r\n                />\r\n            </Card>,\r\n        </>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {Error} from '../Error/Error';\r\nimport {FilesCreate} from './FilesCreate';\r\nimport {FilesIndex} from './FilesIndex';\r\nimport {FilesUpdate} from './FilesUpdate';\r\nimport {FilesView} from './FilesView';\r\n\r\nexport const FilesController: FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<FilesIndex/>}/>\r\n            <Route path={':id'} element={<FilesView/>}/>\r\n            <Route path={'create'} element={<FilesCreate/>}/>\r\n            <Route path={'update/:id'} element={<FilesUpdate/>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>Settings</div>\r\n    );\r\n};\r\n","import {Page} from '../../types/types';\r\nimport {gql} from '@apollo/client';\r\n\r\n// CREATE PAGE\r\nexport type CreatePageData = { createPage: Page }\r\n\r\nexport type CreatePageVars = { createPageInput: createPageInput }\r\nexport type createPageInput = {\r\n    isShown: boolean,\r\n    name: string,\r\n    text: string,\r\n}\r\n\r\nexport const CREATE_PAGE_MUTATION = gql`\r\n    mutation CreatePage($createPageInput: CreatePageInput!){\r\n        createPage(createPageInput: $createPageInput){\r\n            id\r\n            isShown\r\n            name\r\n            slug\r\n            text\r\n            sorting\r\n        }\r\n    }\r\n`;\r\n\r\n\r\n// UPDATE PAGE\r\nexport type UpdatePageData = { updatePage: Page }\r\n\r\nexport type UpdatePageVars = { updatePageInput: updatePageInput }\r\nexport type updatePageInput = createPageInput & { id: number, sorting: number }\r\n\r\nexport const UPDATE_PAGE_MUTATION = gql`\r\n    mutation UpdatePage($updatePageInput: UpdatePageInput!){\r\n        updatePage(updatePageInput: $updatePageInput){\r\n            id\r\n            isShown\r\n            name\r\n            slug\r\n            text\r\n            sorting\r\n        }\r\n    }\r\n`;\r\n\r\n\r\n// UPDATE PAGES\r\nexport type UpdatePagesData = { updatePages: Page[] }\r\n\r\nexport type UpdatePagesVars = { updatePagesInput: updatePagesInput }\r\nexport type updatePagesInput = {\r\n    updatePagesInput: updatePageInput[],\r\n}\r\n\r\nexport const UPDATE_PAGES_MUTATION = gql`\r\n    mutation UpdatePages($updatePagesInput: UpdatePagesInput!) {\r\n        updatePages(updatePagesInput: $updatePagesInput) {\r\n            id\r\n            isShown\r\n            name\r\n            slug\r\n            text\r\n            sorting\r\n        }\r\n    }\r\n`;\r\n\r\n\r\n// DELETE PAGE\r\nexport type RemovePageData = { removePage: boolean }\r\nexport type RemovePageVars = { slug: string }\r\n\r\nexport const REMOVE_PAGE_MUTATION = gql`\r\n    mutation RemovePage($slug: String!){\r\n        removePage(slug: $slug)\r\n    }\r\n`;\r\n","import {useMutation, useQuery} from '@apollo/client';\r\nimport {Button, Divider, message, Switch, Table} from 'antd';\r\nimport React, {FC, useEffect, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {Page} from '../../../types/types';\r\nimport {ButtonsVUR} from '../ButtonsVUD/ButtonsVUR';\r\nimport {GET_PAGES_QUERY, GetPagesData, GetPagesVars} from '../../gql/pages-query';\r\nimport {\r\n    REMOVE_PAGE_MUTATION,\r\n    RemovePageData,\r\n    RemovePageVars,\r\n    UPDATE_PAGE_MUTATION,\r\n    UPDATE_PAGES_MUTATION,\r\n    UpdatePageData,\r\n    UpdatePagesData,\r\n    UpdatePagesVars,\r\n    UpdatePageVars,\r\n} from '../../gql/pages-mutation';\r\nimport {SortableContainer, SortableElement, SortableHandle} from 'react-sortable-hoc';\r\nimport {arrayMoveImmutable} from 'array-move';\r\nimport {MenuOutlined} from '@ant-design/icons';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\n\r\nexport const PagesIndex: FC = () => {\r\n    const getPagesQuery = useQuery<GetPagesData, GetPagesVars>(GET_PAGES_QUERY);\r\n    const [pages, setPages] = useState<Page[]>([]);\r\n    const [removePage, removePageOptions] = useMutation<RemovePageData, RemovePageVars>(REMOVE_PAGE_MUTATION, {context: {gqlLink: gqlLinks.admin}});\r\n    const [updatePage, updatePageOptions] = useMutation<UpdatePageData, UpdatePageVars>(UPDATE_PAGE_MUTATION, {context: {gqlLink: gqlLinks.admin}});\r\n    const [updatePages, updatePagesOptions] = useMutation<UpdatePagesData, UpdatePagesVars>(UPDATE_PAGES_MUTATION, {context: {gqlLink: gqlLinks.admin}});\r\n    const [selectedPages, setSelectedPages] = useState<Page[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (getPagesQuery.data?.getPages)\r\n            setPages(getPagesQuery.data.getPages);\r\n    }, [getPagesQuery.data?.getPages]);\r\n\r\n    const onRemove = async (slug: string) => {\r\n        const response = await removePage({variables: {slug: slug}});\r\n        if (response.data)\r\n            await getPagesQuery.refetch();\r\n        else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const rowSelection = {\r\n        onChange: (selectedRowKeys: React.Key[], selectedRows: Page[]) => {\r\n            console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\r\n            setSelectedPages(selectedRows);\r\n        },\r\n    };\r\n\r\n    const toggleIsShownHandler = async (page: Page, flag: boolean) => {\r\n        const {slug, ...rest} = page;\r\n        rest.isShown = flag;\r\n        const response = await updatePage({\r\n            variables: {\r\n                updatePageInput: {\r\n                    ...rest,\r\n                },\r\n            },\r\n        });\r\n        if (!response.errors) {\r\n            const newPages = pages.map(page => (page.id == response.data?.updatePage.id ? response.data.updatePage : page));\r\n            setPages(newPages);\r\n        } else {\r\n            response.errors.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const DragHandle = SortableHandle(() => <MenuOutlined style={{cursor: 'grab', color: '#999'}}/>);\r\n    const columns = [\r\n        {\r\n            title: 'Sort',\r\n            dataIndex: 'sort',\r\n            width: 30,\r\n            className: 'drag-visible',\r\n            render: () => (\r\n                <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                    <DragHandle/>\r\n                </div>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Id',\r\n            dataIndex: 'id',\r\n            key: 'id',\r\n            render: (text: any, page: Page) => <>#{page.id}</>,\r\n        },\r\n        {\r\n            title: 'Is shown',\r\n            dataIndex: 'isShown',\r\n            key: 'isShown',\r\n            render: (text: any, page: Page) => (\r\n                <Switch size={'small'} checked={page.isShown}\r\n                        onChange={(flag) => toggleIsShownHandler(page, flag)}/>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Actions',\r\n            dataIndex: 'actions',\r\n            key: 'actions',\r\n            render: (text: any, page: Page) => (\r\n                <ButtonsVUR viewUrl={`${page.slug}`} updateUrl={`update/${page.slug}`}\r\n                            onRemove={() => onRemove(page.slug)}/>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const SortableItem = SortableElement((props: any) => <tr {...props} />);\r\n    const SortableContainerWrapper = SortableContainer((props: any) => <tbody {...props} />);\r\n\r\n\r\n    const onSortEnd = async (props: any) => {\r\n        if (props.oldIndex !== props.newIndex) {\r\n            const sortedPages = arrayMoveImmutable([].concat(pages as any), props.oldIndex, props.newIndex)\r\n                .filter(el => !!el)\r\n                .map((page: Page, i) => ({\r\n                    ...page,\r\n                    sorting: i + 1,\r\n                })) as Page[];\r\n            setPages(sortedPages);\r\n            const sortedPagesWithoutSlug = sortedPages.map(page => {\r\n                const {slug, ...rest} = page;\r\n                return rest;\r\n            });\r\n            const response = await updatePages({\r\n                variables: {\r\n                    updatePagesInput: {\r\n                        updatePagesInput: sortedPagesWithoutSlug,\r\n                    },\r\n                },\r\n            });\r\n            if (!response.errors) {\r\n                console.log('Sorted pages: ', sortedPages);\r\n                response.data && setPages(response.data.updatePages);\r\n            } else {\r\n                response.errors?.forEach(error => message.error(error.message));\r\n            }\r\n        }\r\n    };\r\n\r\n    const DraggableContainer = (props: any) => (\r\n        <SortableContainerWrapper\r\n            useDragHandle\r\n            disableAutoscroll\r\n            helperClass=\"row-dragging\"\r\n            onSortEnd={onSortEnd}\r\n            {...props}\r\n        />\r\n    );\r\n\r\n    const DraggableBodyRow = (props: any) => {\r\n        const {className, style, ...restProps} = props;\r\n        const index = pages.findIndex(x => x.id === restProps['data-row-key']);\r\n        return <SortableItem index={index} {...restProps} />;\r\n    };\r\n\r\n    if (getPagesQuery.loading)\r\n        return <Loading/>;\r\n\r\n    if (getPagesQuery.error)\r\n        console.log(getPagesQuery.error);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"wrapperHeader\">\r\n                <div className=\"wrapperHeader\">\r\n                    <header>Pages</header>\r\n                    <Link to={'create'}>\r\n                        <Button>Create</Button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n            <Divider/>\r\n            <div>\r\n                <Table\r\n                    loading={getPagesQuery.loading || removePageOptions.loading || updatePageOptions.loading || updatePagesOptions.loading}\r\n                    rowSelection={{...rowSelection}}\r\n                    columns={columns}\r\n                    dataSource={pages}\r\n                    pagination={false}\r\n                    rowKey=\"id\"\r\n                    components={{\r\n                        body: {\r\n                            wrapper: DraggableContainer,\r\n                            row: DraggableBodyRow,\r\n                        },\r\n                    }}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n","import {useMutation} from '@apollo/client';\r\nimport {Button, Form, Input, message, Switch} from 'antd';\r\nimport React, {FC, useState} from 'react';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {CREATE_PAGE_MUTATION, CreatePageData, CreatePageVars} from '../../gql/pages-mutation';\r\nimport {WysiwygEditor} from '../../../common-area/components/WysiwygEditor/WysiwygEditor';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {sizeFormItem} from '../../styles/sizeFormItem';\r\n\r\nexport const PagesCreate: FC = () => {\r\n    const [createPage, createPageOption] = useMutation<CreatePageData, CreatePageVars>(CREATE_PAGE_MUTATION, {context: {gqlLink: gqlLinks.admin}});\r\n    const navigate = useNavigate();\r\n    const [isShown, setIsShown] = useState<boolean>(true);\r\n    const [text, setText] = useState<string>('');\r\n\r\n    const onFinish = async (values: {\r\n        name: string,\r\n    }) => {\r\n        createPage({\r\n            variables: {\r\n                createPageInput: {\r\n                    ...values,\r\n                    isShown: isShown,\r\n                    text: text,\r\n                },\r\n            },\r\n        })\r\n            .then(() => navigate('..'))\r\n            .catch(error => message.error(error.message));\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            name=\"createPage\"\r\n            onFinish={onFinish}\r\n            {...sizeFormItem}\r\n        >\r\n            <Form.Item\r\n                name=\"isShown\"\r\n                label=\"Is shown\"\r\n            >\r\n                <Switch size={'small'} checked={isShown} onChange={setIsShown}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"name\"\r\n                label=\"Name\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input product name',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder=\"Name\"/>\r\n            </Form.Item>\r\n            <Form.Item label={'Text'}>\r\n                <WysiwygEditor text={text} setText={setText}/>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType={'submit'} loading={createPageOption.loading}>\r\n                    Create\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n","import {useMutation, useQuery} from '@apollo/client';\r\nimport {Button, Form, Input, message, Switch} from 'antd';\r\nimport React, {FC, useEffect, useState} from 'react';\r\nimport {useNavigate, useParams} from 'react-router-dom';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {GET_PAGE_QUERY, GetPageData, GetPageVars} from '../../gql/pages-query';\r\nimport {UPDATE_PAGE_MUTATION, UpdatePageData, UpdatePageVars} from '../../gql/pages-mutation';\r\nimport {WysiwygEditor} from '../../../common-area/components/WysiwygEditor/WysiwygEditor';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {Error} from '../Error/Error';\r\nimport {sizeFormItem} from '../../styles/sizeFormItem';\r\n\r\nexport const PagesUpdate: FC = () => {\r\n    const params = useParams();\r\n    const pageSlug = params.slug || '';\r\n    const getPageQuery = useQuery<GetPageData, GetPageVars>(\r\n        GET_PAGE_QUERY,\r\n        {\r\n            variables: {slug: pageSlug},\r\n            context: {gqlLink: gqlLinks.admin},\r\n        },\r\n    );\r\n    const [updatePageMutation, updatePageMutationOptions] = useMutation<UpdatePageData, UpdatePageVars>(UPDATE_PAGE_MUTATION,\r\n        {context: {gqlLink: gqlLinks.admin}},\r\n    );\r\n    const navigate = useNavigate();\r\n    const [isShown, setIsShown] = useState<boolean>(false);\r\n    const [text, setText] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        if (getPageQuery.data?.getPage) {\r\n            setIsShown(getPageQuery.data.getPage.isShown);\r\n            setText(getPageQuery.data.getPage.text);\r\n        }\r\n    }, [getPageQuery.data?.getPage]);\r\n\r\n    const onFinish = async (values: {\r\n        id: string,\r\n        sorting: string,\r\n        name: string,\r\n    }) => {\r\n        const intId = parseInt(values.id);\r\n        const intSorting = parseInt(values.sorting);\r\n        updatePageMutation({\r\n            variables: {\r\n                updatePageInput: {\r\n                    ...values,\r\n                    id: intId,\r\n                    sorting: intSorting,\r\n                    isShown: isShown,\r\n                    text: text,\r\n                },\r\n            },\r\n        })\r\n            .then(() => navigate('..'))\r\n            .catch(error => message.error(error.message));\r\n    };\r\n\r\n    if (!pageSlug || getPageQuery.error)\r\n        return <Error/>;\r\n\r\n    if (getPageQuery.loading)\r\n        return <Loading/>;\r\n\r\n    return (\r\n        <Form name=\"updateProduct\"\r\n              onFinish={onFinish}\r\n              initialValues={{\r\n                  id: getPageQuery.data?.getPage.id,\r\n                  name: getPageQuery.data?.getPage.name,\r\n                  sorting: getPageQuery.data?.getPage.sorting,\r\n              }}\r\n              {...sizeFormItem}\r\n        >\r\n            <Form.Item name=\"id\" style={{display: 'none'}}>\r\n                <Input type={'hidden'}/>\r\n            </Form.Item>\r\n            <Form.Item name=\"sorting\" style={{display: 'none'}}>\r\n                <Input type={'hidden'}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                label=\"Is shown\"\r\n            >\r\n                <Switch size={'small'} checked={isShown} onChange={setIsShown}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"name\"\r\n                label=\"Name\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input page name',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder=\"Name\"/>\r\n            </Form.Item>\r\n            <Form.Item label={'Text'}>\r\n                <WysiwygEditor text={text} setText={setText}/>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType={'submit'}\r\n                        loading={getPageQuery.loading || updatePageMutationOptions.loading}>\r\n                    Update\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Navigate, useNavigate, useParams} from 'react-router-dom';\r\nimport {useMutation, useQuery} from '@apollo/client';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {Card, message, Tag} from 'antd';\r\nimport s from './PagesView.module.css';\r\nimport {ButtonsVUR} from '../ButtonsVUD/ButtonsVUR';\r\nimport {GET_PAGE_QUERY, GetPageData, GetPageVars} from '../../gql/pages-query';\r\nimport {REMOVE_PAGE_MUTATION, RemovePageData, RemovePageVars} from '../../gql/pages-mutation';\r\nimport parse from 'html-react-parser';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {Error} from '../Error/Error';\r\n\r\nexport const PagesView: FC = () => {\r\n    const params = useParams();\r\n    const pageSlug = params.slug || '';\r\n    const getPageQuery = useQuery<GetPageData, GetPageVars>(\r\n        GET_PAGE_QUERY,\r\n        {\r\n            variables: {slug: pageSlug},\r\n            context: {gqlLink: gqlLinks.admin}\r\n        },\r\n    );\r\n    const [removePage, removePageOptions] = useMutation<RemovePageData, RemovePageVars>(REMOVE_PAGE_MUTATION, {context: {gqlLink: gqlLinks.admin}});\r\n    const navigate = useNavigate();\r\n\r\n    const onRemove = async (slug: string) => {\r\n        const response = await removePage({variables: {slug: slug}});\r\n        if (response.data)\r\n            navigate(`../`);\r\n        else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    if (!pageSlug || getPageQuery.error)\r\n        return <Error/>;\r\n\r\n    if (getPageQuery.loading)\r\n        return <Loading/>;\r\n\r\n    const page = getPageQuery.data?.getPage;\r\n    return (\r\n        <>\r\n            <div className={s.photosAndMainInfo}>\r\n\r\n                <div>\r\n                    <ButtonsVUR updateUrl={`../update/${pageSlug}`} onRemove={() => onRemove(pageSlug)}/>\r\n                    <header>{page?.name}</header>\r\n                    <table className={s.info}>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td>Id:</td>\r\n                            <td>\r\n                                <span># {page?.id}</span>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Is shown:</td>\r\n                            <td>\r\n                                {page?.isShown\r\n                                    ? <Tag color=\"green\">Yes</Tag>\r\n                                    : <Tag color=\"red\">No</Tag>\r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <Card title=\"Text\" className={s.card}>{page && parse(page?.text)}</Card>\r\n        </>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {Error} from '../Error/Error';\r\nimport {PagesIndex} from './PagesIndex';\r\nimport {PagesCreate} from './PagesCreate';\r\nimport {PagesUpdate} from './PagesUpdate';\r\nimport {PagesView} from './PagesView';\r\n\r\nexport const PagesController: FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<PagesIndex/>}/>\r\n            <Route path={':slug'} element={<PagesView/>}/>\r\n            <Route path={'create'} element={<PagesCreate/>}/>\r\n            <Route path={'update/:slug'} element={<PagesUpdate/>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n};\r\n","import {Order, OrderStatus, ShippingMethod} from '../../types/types';\r\nimport {gql} from '@apollo/client';\r\n\r\n// CREATE ORDER\r\nexport type CreateOrderData = { createOrder: Order }\r\n\r\nexport type CreateOrderVars = { createOrderInput: createOrderInput }\r\nexport type createOrderInput = {\r\n    email: string,\r\n    firstName: string,\r\n    lastName: string,\r\n    phoneNumber: string,\r\n    address: string,\r\n    deliveryCityCode: string | null,\r\n    deliveryCityName: string | null,\r\n    deliveryWarehouse: string | null,\r\n    shippingMethod: ShippingMethod,\r\n    createProductInOrder: CreateProductInOrderInput[]\r\n}\r\n\r\nexport type CreateProductInOrderInput = {\r\n    productId: number,\r\n    productQuantity: number\r\n}\r\n\r\nexport const CREATE_ORDER_MUTATION = gql`\r\n    mutation CreateOrder($createOrderInput: CreateOrderInput!) {\r\n        createOrder(createOrderInput: $createOrderInput) {\r\n            id\r\n            email\r\n            firstName\r\n            lastName\r\n            phoneNumber\r\n            address\r\n            deliveryCityCode\r\n            deliveryCityName\r\n            deliveryWarehouse\r\n            shippingMethod\r\n            orderStatus\r\n            totalPrice\r\n            createdAt\r\n            updatedAt\r\n            user {\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                roles {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n            productsInOrder {\r\n                product {\r\n                    id\r\n                    name\r\n                    slug\r\n                    isShown\r\n                    quantity\r\n                    priceUAH\r\n                    description\r\n                    characteristics {\r\n                        name\r\n                        value\r\n                    }\r\n                    files {\r\n                        id\r\n                        fileImage\r\n                        filePath\r\n                        mimetype\r\n                        destination\r\n                        fileName\r\n                        size\r\n                        originalName\r\n                    }\r\n                    categories {\r\n                        id\r\n                        isShown\r\n                        name\r\n                        description\r\n                        slug\r\n                    }\r\n                }\r\n                productQuantity\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\n// UPDATE ORDER\r\nexport type UpdateOrderData = { updateOrder: Order }\r\n\r\nexport type UpdateOrderVars = { updateOrderInput: updateOrderInput }\r\nexport type updateOrderInput = createOrderInput & { id: number, orderStatus: OrderStatus }\r\n\r\nexport const UPDATE_ORDER_MUTATION = gql`\r\n    mutation UpdateOrder($updateOrderInput: UpdateOrderInput!) {\r\n        updateOrder(updateOrderInput: $updateOrderInput) {\r\n            id\r\n            email\r\n            firstName\r\n            lastName\r\n            phoneNumber\r\n            address\r\n            deliveryCityCode\r\n            deliveryCityName\r\n            deliveryWarehouse\r\n            shippingMethod\r\n            orderStatus\r\n            totalPrice\r\n            createdAt\r\n            updatedAt\r\n            user {\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                roles {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n            productsInOrder {\r\n                product {\r\n                    id\r\n                    name\r\n                    slug\r\n                    isShown\r\n                    quantity\r\n                    priceUAH\r\n                    description\r\n                    characteristics {\r\n                        name\r\n                        value\r\n                    }\r\n                    files {\r\n                        id\r\n                        fileImage\r\n                        filePath\r\n                        mimetype\r\n                        destination\r\n                        fileName\r\n                        size\r\n                        originalName\r\n                    }\r\n                    categories {\r\n                        id\r\n                        isShown\r\n                        name\r\n                        description\r\n                        slug\r\n                    }\r\n                }\r\n                productQuantity\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n// DELETE ORDERS\r\nexport type RemoveOrderData = { removeOrder: boolean }\r\nexport type RemoveOrderVars = { id: number }\r\n\r\nexport const REMOVE_ORDER_MUTATION = gql`\r\n    mutation RemoveOrder($id: Int!) {\r\n        removeOrder(id: $id)\r\n    }\r\n\r\n`;\r\n","import {useMutation, useQuery} from '@apollo/client';\r\nimport {Button, Divider, message, Select, Table} from 'antd';\r\nimport React, {ChangeEvent, FC, useCallback, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {all, Order, OrderStatus} from '../../../types/types';\r\nimport {ButtonsVUR} from '../ButtonsVUD/ButtonsVUR';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {GET_ORDERS_QUERY, GetOrdersData, GetOrdersVars} from '../../gql/orders-query';\r\nimport {REMOVE_ORDER_MUTATION, RemoveOrderData, RemoveOrderVars} from '../../gql/orders-mutation';\r\nimport {getStringFromCamelCase, getStringFromDate} from '../../../utils/stringActions';\r\nimport Search from 'antd/es/input/Search';\r\nimport debounce from 'lodash.debounce';\r\nimport {ColumnsType} from 'antd/es/table';\r\nimport s from './OrdersIndex.module.css';\r\n\r\nexport const OrdersIndex: FC = () => {\r\n    const [pageTake, setPageTake] = useState(10);\r\n    const [pageSkip, setPageSkip] = useState(0);\r\n    const [searchLike, setSearchLike] = useState('');\r\n    const [orderStatus, setOrderStatus] = useState<OrderStatus | typeof all>(all);\r\n    const getOrdersQuery = useQuery<GetOrdersData, GetOrdersVars>(\r\n        GET_ORDERS_QUERY,\r\n        {\r\n            variables: {\r\n                getOrdersInput: {\r\n                    skip: pageSkip,\r\n                    take: pageTake,\r\n                    like: searchLike,\r\n                    orderStatus: orderStatus === all ? null : orderStatus,\r\n                },\r\n            },\r\n            context: {gqlLink: gqlLinks.admin},\r\n        },\r\n    );\r\n    const [removeOrder, removeOrderOptions] = useMutation<RemoveOrderData, RemoveOrderVars>(REMOVE_ORDER_MUTATION,\r\n        {context: {gqlLink: gqlLinks.admin}},\r\n    );\r\n    const [selectedProducts, setOrdersProducts] = useState<Order[]>([]);\r\n\r\n    const onRemove = async (orderId: number) => {\r\n        const response = await removeOrder({variables: {id: orderId}});\r\n        if (response.data)\r\n            await getOrdersQuery.refetch({\r\n                getOrdersInput: {\r\n                    skip: pageSkip,\r\n                    take: pageTake,\r\n                    like: searchLike,\r\n                    orderStatus: orderStatus === all ? null : orderStatus,\r\n                },\r\n            });\r\n        else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const rowSelection = {\r\n        onChange: (selectedRowKeys: React.Key[], selectedRows: Order[]) => {\r\n            console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\r\n            setOrdersProducts(selectedRows);\r\n        },\r\n    };\r\n\r\n    const columns: ColumnsType<Order> = [\r\n        {\r\n            title: 'Id',\r\n            dataIndex: 'id',\r\n            key: 'id',\r\n            render: (text: any, order: Order) => <>#{order.id}</>,\r\n        },\r\n        {\r\n            title: 'Email',\r\n            dataIndex: 'email',\r\n            key: 'email',\r\n        },\r\n        {\r\n            title: 'FirstName',\r\n            dataIndex: 'firstName',\r\n            key: 'firstName',\r\n        },\r\n        {\r\n            title: 'LastName',\r\n            dataIndex: 'lastName',\r\n            key: 'lastName',\r\n        },\r\n        {\r\n            title: 'Phone number',\r\n            dataIndex: 'phoneNumber',\r\n            key: 'phoneNumber',\r\n        },\r\n        {\r\n            title: 'Order status',\r\n            dataIndex: 'orderStatus',\r\n            key: 'orderStatus',\r\n            render: (text: any, order: Order) => <span>{getStringFromCamelCase(order.orderStatus)}</span>,\r\n        },\r\n        {\r\n            title: 'Total price',\r\n            dataIndex: 'totalPrice',\r\n            key: 'totalPrice',\r\n            render: (text: any, order: Order) => <span>{order.totalPrice} UAH</span>,\r\n        },\r\n        {\r\n            title: 'Created at',\r\n            dataIndex: 'createdAt',\r\n            key: 'createdAt',\r\n            render: (text: any, order: Order) => <span>{getStringFromDate(order.createdAt)}</span>,\r\n        },\r\n        {\r\n            title: 'Actions',\r\n            dataIndex: 'actions',\r\n            key: 'actions',\r\n            render: (text: any, order: Order) => (\r\n                <ButtonsVUR viewUrl={`${order.id}`} updateUrl={`update/${order.id}`}\r\n                            onRemove={() => onRemove(order.id)}/>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const onSearchOrdersHandler = async (e: ChangeEvent<HTMLInputElement>) => {\r\n        const newPageSkip = 0;\r\n        const newSearchLike = e.target.value;\r\n        setPageSkip(newPageSkip);\r\n        setSearchLike(newSearchLike);\r\n        const response = await getOrdersQuery.refetch({\r\n            getOrdersInput: {\r\n                skip: newPageSkip,\r\n                take: pageTake,\r\n                like: newSearchLike,\r\n                orderStatus: orderStatus === all ? null : orderStatus,\r\n            },\r\n        });\r\n        if (response.errors)\r\n            response.errors?.forEach(error => message.error(error.message));\r\n    };\r\n\r\n    const debouncedSearchOrdersHandler = useCallback(debounce(nextValue => onSearchOrdersHandler(nextValue), 500), []);\r\n    const searchOrdersHandler = (e: ChangeEvent<HTMLInputElement>) => debouncedSearchOrdersHandler(e);\r\n\r\n    const selectOrderStatusHandler = async (value: OrderStatus | typeof all) => {\r\n        const newPageSkip = 0;\r\n        setPageSkip(newPageSkip);\r\n        setOrderStatus(value);\r\n        await getOrdersQuery.refetch({\r\n            getOrdersInput: {\r\n                skip: newPageSkip,\r\n                take: pageTake,\r\n                like: searchLike,\r\n                orderStatus: value === all ? null : value,\r\n            },\r\n        });\r\n    };\r\n\r\n    if (getOrdersQuery.error)\r\n        message.error(getOrdersQuery.error.message);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"wrapperHeader\">\r\n                <div className=\"wrapperHeader\">\r\n                    <header>Orders</header>\r\n                    <Link to={'create'}>\r\n                        <Button>Create</Button>\r\n                    </Link>\r\n                </div>\r\n                <div className={s.filters}>\r\n                    <Select defaultValue={orderStatus} onChange={selectOrderStatusHandler}>\r\n                        <Select.Option value={all}>all</Select.Option>\r\n                        {(Object.keys(OrderStatus) as Array<keyof typeof OrderStatus>).map((key, i) => (\r\n                            <Select.Option value={key} key={i}>{getStringFromCamelCase(key)}</Select.Option>\r\n                        ))}\r\n                    </Select>\r\n                    <Search placeholder=\"Search orders\" className={'search'}\r\n                            onChange={searchOrdersHandler} enterButton\r\n                            loading={getOrdersQuery.loading}/>\r\n                </div>\r\n            </div>\r\n            <Divider/>\r\n            <div>\r\n                <Table\r\n                    loading={getOrdersQuery.loading || removeOrderOptions.loading}\r\n                    rowSelection={{...rowSelection}}\r\n                    columns={columns}\r\n                    dataSource={getOrdersQuery.data?.getOrders.orders}\r\n                    pagination={{\r\n                        total: getOrdersQuery.data?.getOrders.total,\r\n                        onChange: async (pageNumber: number) => {\r\n                            const pageSkip = (pageNumber - 1) * pageTake;\r\n                            setPageSkip(pageSkip);\r\n                            await getOrdersQuery.refetch({\r\n                                getOrdersInput: {\r\n                                    skip: pageSkip,\r\n                                    take: pageTake,\r\n                                    like: searchLike,\r\n                                    orderStatus: orderStatus === all ? null : orderStatus,\r\n                                },\r\n                            });\r\n                        },\r\n                    }}\r\n                    rowKey={'id'}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n","import React, {FC} from 'react';\r\nimport {Link, Navigate, useNavigate, useParams} from 'react-router-dom';\r\nimport {useMutation, useQuery} from '@apollo/client';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {Avatar, Carousel, message, Table} from 'antd';\r\nimport {ButtonsVUR} from '../ButtonsVUD/ButtonsVUR';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {GET_ORDER_QUERY, GetOrderData, GetOrderVars} from '../../gql/orders-query';\r\nimport s from './OrdersView.module.css';\r\nimport {REMOVE_ORDER_MUTATION, RemoveOrderData, RemoveOrderVars} from '../../gql/orders-mutation';\r\nimport {ProductInOrder} from '../../../types/types';\r\nimport {getStringFromCamelCase} from '../../../utils/stringActions';\r\nimport {Error} from '../Error/Error';\r\n\r\nexport const OrdersView: FC = () => {\r\n    const params = useParams();\r\n    const orderId = params.id ? parseInt(params.id) : 0;\r\n    const getOrderQuery = useQuery<GetOrderData, GetOrderVars>(\r\n        GET_ORDER_QUERY,\r\n        {\r\n            variables: {id: orderId},\r\n            context: {gqlLink: gqlLinks.admin},\r\n        },\r\n    );\r\n    const [removeOrder, removeOrderOptions] = useMutation<RemoveOrderData, RemoveOrderVars>(REMOVE_ORDER_MUTATION,\r\n        {context: {gqlLink: gqlLinks.admin}},\r\n    );\r\n    const navigate = useNavigate();\r\n\r\n    const onRemove = async (orderId: number) => {\r\n        const response = await removeOrder({variables: {id: orderId}});\r\n        if (response.data)\r\n            navigate(`../`);\r\n        else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Id',\r\n            dataIndex: 'id',\r\n            key: 'id',\r\n            render: (text: any, productInOrder: ProductInOrder) => <span>#{productInOrder.product.id}</span>,\r\n        },\r\n        {\r\n            title: 'Image',\r\n            dataIndex: 'fileImage',\r\n            key: 'fileImage',\r\n            render: (text: any, productInOrder: ProductInOrder) => (\r\n                <Carousel className={s.carousel}>\r\n                    {productInOrder.product.files.map(file => (\r\n                        <Avatar key={file.id} className={s.image} shape={'square'} size={64} src={file.fileImage}\r\n                                alt={file.fileName}/>\r\n                    ))}\r\n                </Carousel>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: (text: any, productInOrder: ProductInOrder) => <span>{productInOrder.product.name}</span>,\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'price',\r\n            key: 'price',\r\n            render: (text: any, productInOrder: ProductInOrder) => <span>{productInOrder.product.priceUAH}</span>,\r\n        },\r\n        {\r\n            title: 'Quantity',\r\n            dataIndex: 'quantity',\r\n            key: 'quantity',\r\n            render: (text: any, productInOrder: ProductInOrder) => <span>{productInOrder.productQuantity}</span>,\r\n        },\r\n        {\r\n            title: 'Actions',\r\n            dataIndex: 'actions',\r\n            key: 'actions',\r\n            render: (text: any, productInOrder: ProductInOrder) => (\r\n                <ButtonsVUR viewUrl={`../../products/${productInOrder.product.slug}`}/>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    if (!orderId || getOrderQuery.error)\r\n        return <Error/>;\r\n\r\n    if (getOrderQuery.loading)\r\n        return <Loading/>;\r\n\r\n    const order = getOrderQuery.data?.getOrder;\r\n    return (\r\n        <>\r\n            <div className={s.photosAndMainInfo}>\r\n                <div>\r\n                    <ButtonsVUR updateUrl={`../update/${orderId}`} onRemove={() => onRemove(orderId)}/>\r\n                    <header>#{order?.id}</header>\r\n                    <table className=\"infoTable\">\r\n                        <tbody>\r\n                        <tr>\r\n                            <td>Email:</td>\r\n                            <td>\r\n                                <span>{order?.email}</span>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>FirstName:</td>\r\n                            <td>\r\n                                <span>{order?.firstName}</span>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>LastName:</td>\r\n                            <td>\r\n                                <span>{order?.lastName}</span>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Phone number:</td>\r\n                            <td>\r\n                                <span>{order?.phoneNumber}</span>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Address:</td>\r\n                            <td>\r\n                                <span>{order?.address}</span>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Shipping method:</td>\r\n                            <td>\r\n                                <span>{order?.shippingMethod}</span>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Order status:</td>\r\n                            <td>\r\n                                <span>{order?.orderStatus && getStringFromCamelCase(order.orderStatus)}</span>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>User:</td>\r\n                            <td>\r\n                                <Link\r\n                                    to={`../../users/${order?.user.email}`}>{order?.user.firstName} {order?.user.lastName}</Link>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Total price:</td>\r\n                            <td>\r\n                                <span>{order?.totalPrice} UAH</span>\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    {(order && order?.productsInOrder.length > 0) && (\r\n                        <Table columns={columns} dataSource={order.productsInOrder} pagination={false}\r\n                               rowKey={'id'}/>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {AutoComplete, Button, Form, Input, Radio, Select} from 'antd';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {OrderBy, ShippingMethod} from '../../../types/types';\r\nimport Search from 'antd/es/input/Search';\r\nimport {\r\n    s_getCities,\r\n    s_getCitiesError,\r\n    s_getCitiesLoading,\r\n    s_getWarehouses,\r\n    s_getWarehousesLoading,\r\n} from '../../../redux/nova-poshta.selectors';\r\nimport debounce from 'lodash.debounce';\r\nimport {actions, loadCities, loadWarehouses} from '../../../redux/nova-poshta-reducer';\r\nimport {actions as basketActions} from '../../../redux/basket-reducer';\r\nimport {message} from 'antd/es';\r\nimport {useMutation, useQuery} from '@apollo/client';\r\nimport {CREATE_ORDER_MUTATION, CreateOrderData, CreateOrderVars} from '../../gql/orders-mutation';\r\nimport {s_getProductsInBasket} from '../../../redux/basket.selectors';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {sizeFormItem} from '../../styles/sizeFormItem';\r\nimport {\r\n    GET_PRODUCT_BY_NAME_QUERY,\r\n    GET_PRODUCTS_QUERY,\r\n    GetProductByNameData,\r\n    GetProductByNameVars,\r\n    GetProductsData,\r\n    GetProductsVars,\r\n} from '../../gql/products-query';\r\nimport {PinnedProductsInOrder} from '../../../common-area/components/PinnedProductsInOrder/PinnedProductsInOrder';\r\nimport {useNavigate} from 'react-router-dom';\r\n\r\nexport const OrdersCreate = () => {\r\n    const [form] = Form.useForm();\r\n    const dispatch = useDispatch();\r\n    const [shippingMethod, setShippingMethod] = useState<ShippingMethod>(ShippingMethod.warehouse);\r\n    const cities = useSelector(s_getCities);\r\n    const warehouses = useSelector(s_getWarehouses);\r\n    const citiesLoading = useSelector(s_getCitiesLoading);\r\n    const warehousesLoading = useSelector(s_getWarehousesLoading);\r\n    const [selectedCity, setSelectedCity] = useState<{ value?: string, deliveryCity?: string } | null>(null);\r\n    const [createOrderMutation, createOrderMutationOption] = useMutation<CreateOrderData, CreateOrderVars>(CREATE_ORDER_MUTATION,\r\n        {context: {gqlLink: gqlLinks.customer}},\r\n    );\r\n    const citiesError = useSelector(s_getCitiesError);\r\n\r\n    const productsInBasket = useSelector(s_getProductsInBasket);\r\n    const [options, setOptions] = useState<{ value: string }[]>([]);\r\n    const getProductByName = useQuery<GetProductByNameData, GetProductByNameVars>(GET_PRODUCT_BY_NAME_QUERY,\r\n        {context: {gqlLink: gqlLinks.admin}},\r\n    );\r\n    const getProductsQuery = useQuery<GetProductsData, GetProductsVars>(GET_PRODUCTS_QUERY,\r\n        {context: {gqlLink: gqlLinks.admin}},\r\n    );\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (citiesError) {\r\n            form.setFields([\r\n                {\r\n                    name: 'city',\r\n                    errors: [citiesError],\r\n                },\r\n            ]);\r\n            dispatch(actions.setCitiesError(null));\r\n        }\r\n\r\n        return () => {\r\n            dispatch(actions.clearState());\r\n            dispatch(basketActions.clearState());\r\n        };\r\n    }, [citiesError]);\r\n\r\n    const onFinish = async (values: {\r\n        email: string, phoneNumber: string,\r\n        firstName: string, lastName: string,\r\n        shippingMethod: ShippingMethod, address: string, city: string, warehouse: string\r\n    }) => {\r\n        const {city, warehouse, address, ...restValues} = values;\r\n        console.log('Received values of form: ', values);\r\n        let newAddress = values.address;\r\n        if (shippingMethod === 'warehouse')\r\n            newAddress = values.city + ' ' + values.warehouse;\r\n        const response = await createOrderMutation({\r\n            variables: {\r\n                createOrderInput: {\r\n                    ...restValues,\r\n                    address: newAddress,\r\n                    deliveryCityName: selectedCity?.value as string,\r\n                    deliveryCityCode: selectedCity?.deliveryCity as string,\r\n                    deliveryWarehouse: warehouse,\r\n                    createProductInOrder: productsInBasket.map(productInBasket => ({\r\n                        productId: productInBasket.product.id,\r\n                        productQuantity: productInBasket.productQuantity,\r\n                    })),\r\n                },\r\n            },\r\n        });\r\n        if (!response.errors) {\r\n            message.success('Order successfully created');\r\n            navigate('../');\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const onSearchCityHandler = async (value: string) => {\r\n        dispatch(actions.setWarehouses([]));\r\n        dispatch(actions.setCities([]));\r\n        setSelectedCity(null);\r\n        form.setFields([{\r\n            name: 'department',\r\n            value: '',\r\n        }]);\r\n        value.trim() === '' || dispatch(loadCities(value));\r\n    };\r\n\r\n    const debouncedSearchCityHandler = useCallback(debounce(nextValue => onSearchCityHandler(nextValue), 500), []);\r\n    const searchCityHandler = (value: string) => debouncedSearchCityHandler(value);\r\n\r\n    const selectCityHandler = (value: string, option: any) => {\r\n        setSelectedCity(option);\r\n        dispatch(loadWarehouses(option.deliveryCity));\r\n    };\r\n\r\n    const onSearchProductHandler = async (value: string) => {\r\n        if (value.trim() === '') {\r\n            setOptions([]);\r\n            return;\r\n        }\r\n        const response = await getProductsQuery.refetch({\r\n            getProductsInput: {\r\n                skip: 0,\r\n                take: 5,\r\n                likeName: value,\r\n                orderBy: OrderBy.newest,\r\n            },\r\n        });\r\n        if (!response.errors) {\r\n            setOptions(response.data.getProducts.products.map(product => ({value: product.name})));\r\n            if (!response.data.getProducts.total) {\r\n                message.warning('Product with current name not found');\r\n            }\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const debouncedSearchProductHandler = useCallback(debounce(nextValue => onSearchProductHandler(nextValue), 500), []);\r\n    const searchProductHandler = (value: string) => debouncedSearchProductHandler(value);\r\n\r\n    const selectProductHandler = async (value: string, options: any) => {\r\n        if (productsInBasket.some(productInBasket => productInBasket.product.name === value)) {\r\n            message.warning('You already added this product');\r\n            return;\r\n        }\r\n        console.log('selected: ' + value);\r\n        const response = await getProductByName.refetch({\r\n            name: value,\r\n        });\r\n        if (!response.errors) {\r\n            dispatch(basketActions.addProductToBasket(response.data.getProductByName));\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Form\r\n                {...sizeFormItem}\r\n                form={form}\r\n                name=\"createOrder\"\r\n                onFinish={onFinish}\r\n                initialValues={{\r\n                    shippingMethod: shippingMethod,\r\n                }}\r\n                scrollToFirstError\r\n            >\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    label=\"E-mail\"\r\n                    rules={[\r\n                        {\r\n                            type: 'email',\r\n                            message: 'The input is not valid E-mail!',\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your E-mail!',\r\n                            whitespace: true,\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input placeholder={'E-mail'} type={'email'}/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"phoneNumber\"\r\n                    label=\"PhoneNumber\"\r\n                    rules={[{required: true, message: 'Please input your PhoneNumber!', whitespace: true}]}\r\n                >\r\n                    <Input placeholder={'+38 (099) 999-99-99'}/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"firstName\"\r\n                    label=\"FirstName\"\r\n                    rules={[{required: true, message: 'Please input your FirstName!', whitespace: true}]}\r\n                >\r\n                    <Input placeholder={'FirstName'}/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"lastName\"\r\n                    label=\"LastName\"\r\n                    rules={[{required: true, message: 'Please input your LastName!', whitespace: true}]}\r\n                >\r\n                    <Input placeholder={'LastName'}/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Shipping method\"\r\n                    name=\"shippingMethod\"\r\n                >\r\n                    <Radio.Group onChange={(e) => setShippingMethod(e.target.value)}>\r\n                        <Radio value=\"warehouse\">To the NovaPoshta office - at the NP rate</Radio>\r\n                        <Radio value=\"courier\">Courier of NovaPoshta at the address - 99 UAH</Radio>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n                {shippingMethod === 'warehouse'\r\n                    ? (\r\n                        <>\r\n                            <Form.Item\r\n                                name=\"city\"\r\n                                label=\"City\"\r\n                                rules={[{required: true, message: 'Please select your city!'}]}\r\n                            >\r\n                                <AutoComplete\r\n                                    options={cities.map(city => ({\r\n                                        value: city.Present,\r\n                                        deliveryCity: city.DeliveryCity,\r\n                                    }))}\r\n                                    onSearch={searchCityHandler}\r\n                                    onSelect={selectCityHandler}\r\n                                >\r\n                                    <Search placeholder=\"Search city\" enterButton loading={citiesLoading}/>\r\n                                </AutoComplete>\r\n                            </Form.Item>\r\n                            {selectedCity && (\r\n                                <Form.Item\r\n                                    name=\"warehouse\"\r\n                                    label=\"Warehouse\"\r\n                                    rules={[{required: true, message: 'Please select your warehouse!'}]}\r\n                                >\r\n                                    <Select loading={warehousesLoading}>\r\n                                        {warehouses.map(warehouse => (\r\n                                            <Select.Option\r\n                                                value={warehouse.Description}>{warehouse.Description}</Select.Option>\r\n                                        ))}\r\n                                    </Select>\r\n                                </Form.Item>\r\n                            )}\r\n                        </>\r\n                    )\r\n                    : (\r\n                        <Form.Item\r\n                            name=\"address\"\r\n                            label=\"Address\"\r\n                            rules={[{required: true, message: 'Please select your address!'}]}\r\n                        >\r\n                            <Input placeholder={'Address'}/>\r\n                        </Form.Item>\r\n                    )\r\n                }\r\n                <Form.Item label=\"Products\">\r\n                    <AutoComplete\r\n                        options={options}\r\n                        onSearch={searchProductHandler}\r\n                        onSelect={selectProductHandler}\r\n                    >\r\n                        <Search placeholder=\"Search products\" enterButton\r\n                                loading={getProductsQuery.loading || getProductByName.loading}/>\r\n                    </AutoComplete>\r\n                </Form.Item>\r\n                {productsInBasket.length > 0 && (\r\n                    <Form.Item>\r\n                        <PinnedProductsInOrder loading={getProductsQuery.loading || getProductByName.loading}/>\r\n                    </Form.Item>\r\n                )}\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={createOrderMutationOption.loading}>Create</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {AutoComplete, Button, Form, Input, Radio, Select} from 'antd';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {OrderBy, OrderStatus, ShippingMethod} from '../../../types/types';\r\nimport Search from 'antd/es/input/Search';\r\nimport {\r\n    s_getCities,\r\n    s_getCitiesError,\r\n    s_getCitiesLoading,\r\n    s_getWarehouses,\r\n    s_getWarehousesLoading,\r\n} from '../../../redux/nova-poshta.selectors';\r\nimport debounce from 'lodash.debounce';\r\nimport {actions, loadCities, loadWarehouses} from '../../../redux/nova-poshta-reducer';\r\nimport {actions as basketActions} from '../../../redux/basket-reducer';\r\nimport {message} from 'antd/es';\r\nimport {useMutation, useQuery} from '@apollo/client';\r\nimport {s_getProductsInBasket} from '../../../redux/basket.selectors';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\nimport {sizeFormItem} from '../../styles/sizeFormItem';\r\nimport {\r\n    GET_PRODUCT_BY_NAME_QUERY,\r\n    GET_PRODUCTS_QUERY,\r\n    GetProductByNameData,\r\n    GetProductByNameVars,\r\n    GetProductsData,\r\n    GetProductsVars,\r\n} from '../../gql/products-query';\r\nimport {PinnedProductsInOrder} from '../../../common-area/components/PinnedProductsInOrder/PinnedProductsInOrder';\r\nimport {useNavigate, useParams} from 'react-router-dom';\r\nimport {GET_ORDER_QUERY, GetOrderData, GetOrderVars} from '../../gql/orders-query';\r\nimport {UPDATE_ORDER_MUTATION, UpdateOrderData, UpdateOrderVars} from '../../gql/orders-mutation';\r\nimport {Error} from '../Error/Error';\r\nimport {Loading} from '../../../common-area/components/Loading/Loading';\r\nimport {getStringFromCamelCase} from '../../../utils/stringActions';\r\n\r\nexport const OrdersUpdate = () => {\r\n    const params = useParams();\r\n    const orderId = params.id ? parseInt(params.id) : 0;\r\n    const getOrderQuery = useQuery<GetOrderData, GetOrderVars>(\r\n        GET_ORDER_QUERY,\r\n        {\r\n            variables: {id: orderId},\r\n            context: {gqlLink: gqlLinks.admin},\r\n        },\r\n    );\r\n    const [form] = Form.useForm();\r\n    const dispatch = useDispatch();\r\n    const [shippingMethod, setShippingMethod] = useState<ShippingMethod>(ShippingMethod.warehouse);\r\n    const cities = useSelector(s_getCities);\r\n    const warehouses = useSelector(s_getWarehouses);\r\n    const citiesLoading = useSelector(s_getCitiesLoading);\r\n    const warehousesLoading = useSelector(s_getWarehousesLoading);\r\n    const [selectedCity, setSelectedCity] = useState<{ value?: string, deliveryCity?: string } | null>(null);\r\n    const [selectedWarehouse, setSelectedWarehouse] = useState<string>('');\r\n    const [updateOrder, updateOrderOption] = useMutation<UpdateOrderData, UpdateOrderVars>(UPDATE_ORDER_MUTATION,\r\n        {context: {gqlLink: gqlLinks.admin}},\r\n    );\r\n    const citiesError = useSelector(s_getCitiesError);\r\n\r\n    const productsInBasket = useSelector(s_getProductsInBasket);\r\n    const [options, setOptions] = useState<{ value: string }[]>([]);\r\n    const getProductByName = useQuery<GetProductByNameData, GetProductByNameVars>(GET_PRODUCT_BY_NAME_QUERY,\r\n        {context: {gqlLink: gqlLinks.admin}},\r\n    );\r\n    const getProductsQuery = useQuery<GetProductsData, GetProductsVars>(GET_PRODUCTS_QUERY,\r\n        {context: {gqlLink: gqlLinks.admin}},\r\n    );\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const order = getOrderQuery.data?.getOrder;\r\n        if (order) {\r\n            setShippingMethod(order.shippingMethod);\r\n            setSelectedCity({value: order.deliveryCityName, deliveryCity: order.deliveryCityCode});\r\n            setSelectedWarehouse(order.deliveryWarehouse);\r\n            dispatch(basketActions.setProductsToBasket(order.productsInOrder));\r\n            dispatch(loadWarehouses(order.deliveryCityCode));\r\n        }\r\n    }, [getOrderQuery.data?.getOrder]);\r\n\r\n    useEffect(() => {\r\n        if (citiesError) {\r\n            form.setFields([\r\n                {\r\n                    name: 'city',\r\n                    errors: [citiesError],\r\n                },\r\n            ]);\r\n            dispatch(actions.setCitiesError(null));\r\n        }\r\n\r\n        return () => {\r\n            dispatch(actions.clearState());\r\n            dispatch(basketActions.clearState());\r\n        };\r\n    }, [citiesError]);\r\n\r\n    const onFinish = async (values: {\r\n        id: string, email: string, phoneNumber: string,\r\n        firstName: string, lastName: string,\r\n        shippingMethod: ShippingMethod, address: string, city: string, warehouse: string,\r\n        orderStatus: OrderStatus\r\n    }) => {\r\n        const {city, warehouse, address, id, ...restValues} = values;\r\n        const numberId = parseInt(id);\r\n        let newAddress = values.address;\r\n        let deliveryCityCode = null as null | string;\r\n        let deliveryCityName = null as null | string;\r\n        let deliveryWarehouse = null as null | string;\r\n        if (shippingMethod === 'warehouse') {\r\n            newAddress = values.city + ' ' + values.warehouse;\r\n            deliveryCityCode = selectedCity?.deliveryCity as string;\r\n            deliveryCityName = selectedCity?.value as string;\r\n            deliveryWarehouse = selectedWarehouse;\r\n        }\r\n        const response = await updateOrder({\r\n            variables: {\r\n                updateOrderInput: {\r\n                    ...restValues,\r\n                    id: numberId,\r\n                    address: newAddress,\r\n                    deliveryCityCode: deliveryCityCode,\r\n                    deliveryCityName: deliveryCityName,\r\n                    deliveryWarehouse: deliveryWarehouse,\r\n                    createProductInOrder: productsInBasket.map(productInBasket => ({\r\n                        productId: productInBasket.product.id,\r\n                        productQuantity: productInBasket.productQuantity,\r\n                    })),\r\n                },\r\n            },\r\n        });\r\n        if (!response.errors) {\r\n            message.success('Order successfully updated');\r\n            navigate('../');\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const onSearchCityHandler = async (value: string) => {\r\n        dispatch(actions.setWarehouses([]));\r\n        dispatch(actions.setCities([]));\r\n        setSelectedCity(null);\r\n        form.setFields([{\r\n            name: 'department',\r\n            value: '',\r\n        }]);\r\n        value.trim() === '' || dispatch(loadCities(value));\r\n    };\r\n\r\n    const debouncedSearchCityHandler = useCallback(debounce(nextValue => onSearchCityHandler(nextValue), 500), []);\r\n    const searchCityHandler = (value: string) => debouncedSearchCityHandler(value);\r\n\r\n    const selectCityHandler = (value: string, option: any) => {\r\n        setSelectedCity(option);\r\n        dispatch(loadWarehouses(option.deliveryCity));\r\n    };\r\n\r\n    const onSearchProductHandler = async (value: string) => {\r\n        if (value.trim() === '') {\r\n            setOptions([]);\r\n            return;\r\n        }\r\n        const response = await getProductsQuery.refetch({\r\n            getProductsInput: {\r\n                skip: 0,\r\n                take: 5,\r\n                likeName: value,\r\n                orderBy: OrderBy.newest,\r\n            },\r\n        });\r\n        if (!response.errors) {\r\n            setOptions(response.data.getProducts.products.map(product => ({value: product.name})));\r\n            if (!response.data.getProducts.total) {\r\n                message.warning('Product with current name not found');\r\n            }\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    const debouncedSearchProductHandler = useCallback(debounce(nextValue => onSearchProductHandler(nextValue), 500), []);\r\n    const searchProductHandler = (value: string) => debouncedSearchProductHandler(value);\r\n\r\n    const selectProductHandler = async (value: string, options: any) => {\r\n        if (productsInBasket.some(productInBasket => productInBasket.product.name === value)) {\r\n            message.warning('You already added this product');\r\n            return;\r\n        }\r\n        console.log('selected: ' + value);\r\n        const response = await getProductByName.refetch({\r\n            name: value,\r\n        });\r\n        if (!response.errors) {\r\n            dispatch(basketActions.addProductToBasket(response.data.getProductByName));\r\n        } else {\r\n            response.errors?.forEach(error => message.error(error.message));\r\n        }\r\n    };\r\n\r\n    if (!orderId || getOrderQuery.error)\r\n        return <Error/>;\r\n\r\n    if (getOrderQuery.loading)\r\n        return <Loading/>;\r\n\r\n    const order = getOrderQuery.data?.getOrder;\r\n    console.log(selectedWarehouse);\r\n    return (\r\n        <div>\r\n            <Form\r\n                {...sizeFormItem}\r\n                form={form}\r\n                name=\"updateOrder\"\r\n                onFinish={onFinish}\r\n                initialValues={{\r\n                    id: order?.id,\r\n                    email: order?.email,\r\n                    firstName: order?.firstName,\r\n                    lastName: order?.lastName,\r\n                    phoneNumber: order?.phoneNumber,\r\n                    address: order?.address,\r\n                    city: order?.deliveryCityName,\r\n                    warehouse: order?.deliveryWarehouse,\r\n                    shippingMethod: order?.shippingMethod,\r\n                    orderStatus: order?.orderStatus,\r\n                }}\r\n                scrollToFirstError\r\n            >\r\n                <Form.Item name=\"id\" style={{display: 'none'}}>\r\n                    <Input type={'hidden'}/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    label=\"E-mail\"\r\n                    rules={[\r\n                        {\r\n                            type: 'email',\r\n                            message: 'The input is not valid E-mail!',\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your E-mail!',\r\n                            whitespace: true,\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input placeholder={'E-mail'} type={'email'}/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"phoneNumber\"\r\n                    label=\"PhoneNumber\"\r\n                    rules={[{required: true, message: 'Please input your PhoneNumber!', whitespace: true}]}\r\n                >\r\n                    <Input placeholder={'+38 (099) 999-99-99'}/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"firstName\"\r\n                    label=\"FirstName\"\r\n                    rules={[{required: true, message: 'Please input your FirstName!', whitespace: true}]}\r\n                >\r\n                    <Input placeholder={'FirstName'}/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"lastName\"\r\n                    label=\"LastName\"\r\n                    rules={[{required: true, message: 'Please input your LastName!', whitespace: true}]}\r\n                >\r\n                    <Input placeholder={'LastName'}/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Shipping method\"\r\n                    name=\"shippingMethod\"\r\n                >\r\n                    <Radio.Group onChange={(e) => setShippingMethod(e.target.value)}>\r\n                        <Radio value=\"warehouse\">To the NovaPoshta office - at the NP rate</Radio>\r\n                        <Radio value=\"courier\">Courier of NovaPoshta at the address - 99 UAH</Radio>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n                {shippingMethod === 'warehouse'\r\n                    ? (\r\n                        <>\r\n                            <Form.Item\r\n                                name=\"city\"\r\n                                label=\"City\"\r\n                                rules={[{required: true, message: 'Please select your city!'}]}\r\n                            >\r\n                                <AutoComplete\r\n                                    options={cities.map(city => ({\r\n                                        value: city.Present,\r\n                                        deliveryCity: city.DeliveryCity,\r\n                                    }))}\r\n                                    onSearch={searchCityHandler}\r\n                                    onSelect={selectCityHandler}\r\n                                >\r\n                                    <Search placeholder=\"Search city\" enterButton loading={citiesLoading}/>\r\n                                </AutoComplete>\r\n                            </Form.Item>\r\n                            {selectedCity && (\r\n                                <Form.Item\r\n                                    name=\"warehouse\"\r\n                                    label=\"Warehouse\"\r\n                                    rules={[{required: true, message: 'Please select your warehouse!'}]}\r\n                                >\r\n                                    <Select loading={warehousesLoading}\r\n                                            onChange={value => setSelectedWarehouse(value as any)}\r\n                                            value={selectedWarehouse}\r\n                                    >\r\n                                        {warehouses.map(warehouse => (\r\n                                            <Select.Option\r\n                                                key={warehouse.Description}\r\n                                                value={warehouse.Description}\r\n                                            >\r\n                                                {warehouse.Description}\r\n                                            </Select.Option>\r\n                                        ))}\r\n                                    </Select>\r\n                                </Form.Item>\r\n                            )}\r\n                        </>\r\n                    )\r\n                    : (\r\n                        <Form.Item\r\n                            name=\"address\"\r\n                            label=\"Address\"\r\n                            rules={[{required: true, message: 'Please select your address!'}]}\r\n                        >\r\n                            <Input placeholder={'Address'}/>\r\n                        </Form.Item>\r\n                    )\r\n                }\r\n                <Form.Item label=\"Products\">\r\n                    <AutoComplete\r\n                        options={options}\r\n                        onSearch={searchProductHandler}\r\n                        onSelect={selectProductHandler}\r\n                    >\r\n                        <Search placeholder=\"Search products\" enterButton\r\n                                loading={getProductsQuery.loading || getProductByName.loading}/>\r\n                    </AutoComplete>\r\n                </Form.Item>\r\n                {productsInBasket.length > 0 && (\r\n                    <Form.Item>\r\n                        <PinnedProductsInOrder loading={getProductsQuery.loading || getProductByName.loading}/>\r\n                    </Form.Item>\r\n                )}\r\n                <Form.Item\r\n                    name=\"orderStatus\"\r\n                    label=\"Order status\"\r\n                    rules={[{required: true, message: 'Please select your order status!'}]}\r\n                >\r\n                    <Select>\r\n                        {(Object.keys(OrderStatus) as Array<keyof typeof OrderStatus>).map((key, i) => (\r\n                            <Select.Option value={key} key={i}>{getStringFromCamelCase(key)}</Select.Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={updateOrderOption.loading}>Update</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {FC} from 'react';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {Error} from '../Error/Error';\r\nimport {OrdersIndex} from './OrdersIndex';\r\nimport {OrdersView} from './OrdersView';\r\nimport {OrdersCreate} from './OrdersCreate';\r\nimport {OrdersUpdate} from './OrdersUpdate';\r\n\r\nexport const OrdersController: FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<OrdersIndex/>}/>\r\n            <Route path={':id'} element={<OrdersView/>}/>\r\n            <Route path={'create'} element={<OrdersCreate/>}/>\r\n            <Route path={'update/:id'} element={<OrdersUpdate/>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {s_getAuthData, s_getIsAuth} from '../../../redux/auth-selectors';\r\nimport {Layout, message} from 'antd';\r\nimport {MyMenu} from '../MyMenu/MyMenu';\r\nimport {MyBreadcrumb} from '../../../common-area/components/MyBreadcrumb/MyBreadcrumb';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Home} from '../Home/Home';\r\nimport {UsersController} from '../Users/UsersController';\r\nimport s from './AdminLayout.module.css';\r\nimport {Error} from '../Error/Error';\r\nimport {ProductsController} from '../Products/ProductsController';\r\nimport {CategoriesController} from '../Categories/CategoriesController';\r\nimport {FilesController} from '../Files/FilesController';\r\nimport {Settings} from '../Settings/Settings';\r\nimport {PagesController} from '../Pages/PagesController';\r\nimport {OrdersController} from '../Orders/OrdersController';\r\nimport {isModeratorOrAdmin} from '../../../utils/authorization';\r\n\r\nconst {Content} = Layout;\r\n\r\nexport const AdminLayout: FC = () => {\r\n    const isAuth = useSelector(s_getIsAuth);\r\n    const authDate = useSelector(s_getAuthData);\r\n\r\n    if (!isAuth)\r\n        return <Navigate to={'/admin/auth/login'}/>;\r\n\r\n    if (authDate?.user && !isModeratorOrAdmin(authDate?.user)){\r\n        message.warning('Access forbidden')\r\n        return <Navigate to={'/'}/>;\r\n    }\r\n\r\n    return (\r\n        <Layout className={s.layout}>\r\n            <MyMenu/>\r\n            <Layout className=\"site-layout\">\r\n                <Content className={s.content}>\r\n                    <MyBreadcrumb/>\r\n                    <div className={s.siteLayoutBackground}>\r\n                        <Routes>\r\n                            <Route path={'/'} element={<Home/>}/>\r\n                            <Route path={'orders/*'} element={<OrdersController/>}/>\r\n                            <Route path={'products/*'} element={<ProductsController/>}/>\r\n                            <Route path={'categories/*'} element={<CategoriesController/>}/>\r\n                            <Route path={'files/*'} element={<FilesController/>}/>\r\n                            <Route path={'users/*'} element={<UsersController/>}/>\r\n                            <Route path={'pages/*'} element={<PagesController/>}/>\r\n                            <Route path={'settings/*'} element={<Settings/>}/>\r\n                            <Route path={'*'} element={<Error/>}/>\r\n                        </Routes>\r\n                    </div>\r\n                </Content>\r\n            </Layout>\r\n        </Layout>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Button, Checkbox, Form, Input} from 'antd';\r\nimport {LockOutlined, UserOutlined} from '@ant-design/icons';\r\nimport {Link, Navigate} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {s_getIsAuth} from '../../../redux/auth-selectors';\r\nimport {useMutation} from '@apollo/client';\r\nimport {LOGIN_MUTATION, LoginData, LoginVars} from '../../../common-area/gql/auth-mutation';\r\nimport {login} from '../../../redux/auth-reducer';\r\nimport s from './AuthLogin.module.css';\r\nimport {gqlLinks} from '../../../common-area/gql/client';\r\n\r\ntype FormValues = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean,\r\n    rememberAndForgotPass: any\r\n}\r\n\r\nexport const AuthLogin: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector(s_getIsAuth);\r\n    const [loginMutation, loginMutationOptions] = useMutation<LoginData, LoginVars>(LOGIN_MUTATION);\r\n    const [form] = Form.useForm();\r\n\r\n    const onFinish = async ({email, password, remember}: FormValues) => {\r\n        loginMutation({variables: {loginInput: {email, password}}, context: {gqlLink: gqlLinks.admin}})\r\n            .then(response => {\r\n                if (response.data) {\r\n                    dispatch(login(response.data.login));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                form.setFields([\r\n                    {\r\n                        name: 'rememberAndForgotPass',\r\n                        errors: [error.message],\r\n                    },\r\n                ]);\r\n            });\r\n    };\r\n\r\n    const resetErrors = () => {\r\n        form.resetFields(['rememberAndForgotPass']);\r\n    };\r\n\r\n    if (isAuth)\r\n        return <Navigate to={'/admin'}/>;\r\n\r\n    return (\r\n        <div className={s.loginForm}>\r\n            <Form\r\n                name=\"loginForm\"\r\n                initialValues={{remember: true}}\r\n                onFinish={onFinish}\r\n                form={form}\r\n            >\r\n                <h2 className={s.title}>\r\n                    <div>Grozer Sports Nutrition</div>\r\n                    <div className=\"badge\">Admin</div>\r\n                </h2>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your Email!'\r\n                        },\r\n                        {\r\n                            type: 'email',\r\n                            message: 'The input is not valid E-mail!',\r\n                        },\r\n                        ]}\r\n                >\r\n                    <Input onInput={resetErrors} prefix={<UserOutlined className=\"site-form-item-icon\"/>}\r\n                           placeholder=\"Email\" type={'email'}/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    rules={[{required: true, message: 'Please input your Password!'}]}\r\n                >\r\n                    <Input\r\n                        onInput={resetErrors}\r\n                        prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item name=\"rememberAndForgotPass\">\r\n                    <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle className={s.rememberMe}>\r\n                        <Checkbox onClick={resetErrors}>\r\n                            <span className={s.white}>Remember me</span>\r\n                        </Checkbox>\r\n                    </Form.Item>\r\n\r\n                    <Link className={s.forgotPass} to={''}>\r\n                        Forgot password\r\n                    </Link>\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Button loading={loginMutationOptions.loading} type=\"primary\" htmlType=\"submit\"\r\n                            className={['login-form-button', s.submit].join(' ')}>\r\n                        Log in\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n","import React, {FC, useEffect, useState} from 'react';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {ClientLayout} from './client-area/components/Layout/ClientLayout';\r\nimport {useQuery} from '@apollo/client';\r\nimport {ME_QUERY, MeData, MeVars} from './common-area/gql/auth-query';\r\nimport {useDispatch} from 'react-redux';\r\nimport {login} from './redux/auth-reducer';\r\nimport {Loading} from './common-area/components/Loading/Loading';\r\nimport {AdminLayout} from './admin-area/components/Layout/AdminLayout';\r\nimport {AuthLogin} from './admin-area/components/Auth/AuthLogin';\r\nimport 'antd/dist/antd.css';\r\nimport './App.css';\r\nimport {gqlLinks} from './common-area/gql/client';\r\nimport {actions} from './redux/basket-reducer';\r\nimport {getBasketFromLocalStorage} from './utils/localStorageActions';\r\n\r\nexport const App: FC = () => {\r\n        const dispatch = useDispatch();\r\n        const meQuery = useQuery<MeData, MeVars>(ME_QUERY, {context: {gqlLink: gqlLinks.customer}});\r\n        const [isInitialised, setIsInitialised] = useState(false);\r\n\r\n        useEffect(() => {\r\n            if (meQuery.data && !meQuery.error) {\r\n                dispatch(login(meQuery.data.me));\r\n                dispatch(actions.setProductsToBasket(getBasketFromLocalStorage()))\r\n                setIsInitialised(true);\r\n            }\r\n            if (meQuery.error) {\r\n                dispatch(actions.setProductsToBasket(getBasketFromLocalStorage()))\r\n                setIsInitialised(true);\r\n            }\r\n        }, [meQuery.data, meQuery.error]);\r\n\r\n        if (meQuery.loading || !isInitialised)\r\n            return <Loading/>;\r\n\r\n        return (\r\n            <Routes>\r\n                <Route path=\"admin/*\" element={<AdminLayout/>}/>\r\n                <Route path=\"/*\" element={<ClientLayout/>}/>\r\n                <Route path={'admin/auth/login'} element={<AuthLogin/>}/>\r\n            </Routes>\r\n        );\r\n    }\r\n;\r\n\r\n\r\n\r\n\r\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport authReducer from './auth-reducer';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport filesReducer from './files-reducer';\r\nimport basketReducer from './basket-reducer';\r\nimport novaPoshtaReducer from './nova-poshta-reducer';\r\n\r\nlet rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    files: filesReducer,\r\n    basket: basketReducer,\r\n    novaPoshta: novaPoshtaReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<Promise<void>, AppStateType, unknown, A>;\r\n\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {App} from './App';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport store from './redux/redux-store';\r\nimport {Provider} from 'react-redux';\r\nimport {ApolloClient, ApolloLink, ApolloProvider, HttpLink, InMemoryCache} from '@apollo/client';\r\nimport {baseURL} from './admin-area/api/api';\r\nimport {schema} from './schema';\r\nimport {client} from './common-area/gql/client';\r\n\r\n\r\n\r\n// const client = new ApolloClient({\r\n//     //uri: '/graphql',\r\n//     uri: baseURL + '/graphql',\r\n//     cache: new InMemoryCache({addTypename: false}),\r\n//     headers: {\r\n//         authorization: localStorage.getItem('token') ? `Bearer ${localStorage.getItem('token')}` : '',\r\n//     },\r\n//     defaultOptions: {\r\n//         watchQuery: {\r\n//             fetchPolicy: 'network-only',\r\n//             errorPolicy: 'all',\r\n//             notifyOnNetworkStatusChange: true,\r\n//         },\r\n//         query: {\r\n//             fetchPolicy: 'network-only',\r\n//             errorPolicy: 'all',\r\n//             notifyOnNetworkStatusChange: true,\r\n//         },\r\n//     },\r\n//     typeDefs: schema,\r\n// });\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <ApolloProvider client={client}>\r\n                    <App/>\r\n                </ApolloProvider>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabPane\":\"Account_tabPane__2Jo_L\",\"carousel\":\"Account_carousel__1y_jE\",\"orderHeader\":\"Account_orderHeader__gOLIm\",\"products\":\"Account_products__3MGAd\",\"orderHeaderInfo\":\"Account_orderHeaderInfo__1h0Hu\",\"buttonCancelOrder\":\"Account_buttonCancelOrder__2kM8H\",\"changeEmailAndPass\":\"Account_changeEmailAndPass__JLeI_\",\"orders\":\"Account_orders__7NLKB\",\"image\":\"Account_image__uYUXz\",\"carouselBig\":\"Account_carouselBig__3Rf6P\",\"productsBig\":\"Account_productsBig__WGiSx\",\"productBig\":\"Account_productBig__1ZhIp\"};"],"sourceRoot":""}