{"version":3,"sources":["admin-area/components/Products/ProductUpdate/ProductUpdate.module.css","components/Loading/Loading.module.css","admin-area/components/Menu/AppMenu.module.css","admin-area/components/Header/AppHeader.module.css","admin-area/components/Layout/AppLayout.module.css","admin-area/components/Products/ProductsIndex/ProductsIndex.module.css","client-area/Layout/ClientLayout.tsx","admin-area/GraphQL/auth-query.ts","redux/auth-reducer.ts","components/Loading/Loading.tsx","redux/auth-selectors.ts","admin-area/components/Menu/AppMenu.tsx","admin-area/components/Header/AppHeader.tsx","admin-area/components/Breadcrumb/AppBreadcrumb.tsx","admin-area/components/Home/Home.tsx","admin-area/GraphQL/users-query.ts","admin-area/components/Users/UsersIndex/UsersIndex.tsx","admin-area/components/Error/Error.tsx","admin-area/components/Users/UsersController.tsx","admin-area/GraphQL/products-mutation.ts","admin-area/components/Products/ProductCreate/ProductCreate.tsx","admin-area/GraphQL/products-query.ts","admin-area/components/Products/ProductsIndex/ProductsIndex.tsx","admin-area/components/Products/ProductUpdate/ProductUpdate.tsx","admin-area/components/Products/ProductView/ProductView.tsx","admin-area/components/Products/ProductRemove/ProductRemove.tsx","admin-area/components/Products/ProductsController.tsx","admin-area/components/Categories/CategoriesIndex/CategoriesIndex.tsx","admin-area/components/Categories/CategoriesController.tsx","admin-area/components/Layout/AdminLayout.tsx","admin-area/GraphQL/auth-mutation.ts","admin-area/components/Login/Login.tsx","App.tsx","redux/redux-store.ts","index.tsx","admin-area/components/Login/Login.module.css"],"names":["module","exports","ClientLayout","to","path","element","Users","ME_QUERY","gql","initialState","authData","isAuth","actions","type","payload","authReducer","state","action","Loading","className","s","wrapper_svg","size","s_getAuthData","auth","s_getIsAuth","Sider","Layout","SubMenu","Menu","AppMenu","useState","collapsed","setCollapsed","collapsible","onCollapse","logo","theme","defaultSelectedKeys","mode","Item","icon","HomeOutlined","ShoppingOutlined","AppstoreOutlined","TeamOutlined","title","SettingOutlined","UserOutlined","Header","AppHeader","useSelector","dispatch","useDispatch","menu","onClick","a","localStorage","removeItem","wrapperHeader","overlay","placement","user","firstName","lastName","DownOutlined","AppBreadcrumb","style","margin","Home","GET_USER_QUERY","UsersIndex","console","log","useQuery","variables","getUsersInput","skip","take","loading","error","data","getUsers","map","email","roles","role","name","id","Error","UsersController","CREATE_PRODUCT_MUTATION","PRODUCT_UPDATE_MUTATION","PRODUCT_REMOVE_MUTATION","ProductCreate","useMutation","createProduct","navigate","useNavigate","onFinish","values","createProductInput","response","errors","label","rules","required","message","placeholder","htmlType","GET_PRODUCTS_QUERY","GET_PRODUCT_QUERY","ProductsIndex","getProductsInput","getProducts","product","ProductUpdate","params","useParams","parseInt","updateProductInput","initialValues","getProduct","inputId","ProductView","ProductRemove","removeProduct","onRemove","ProductsController","CategoriesIndex","CategoriesController","Content","AdminLayout","minHeight","siteLayoutBackground","LOGIN_MUTATION","Login","login","loginInput","password","setItem","accessToken","loginForm","remember","prefix","LockOutlined","valuePropName","noStyle","rememberMe","white","forgotPass","submit","join","App","useEffect","me","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","client","ApolloClient","uri","credentials","cache","InMemoryCache","headers","authorization","getItem","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"js/main.a8f2479b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputId\":\"ProductUpdate_inputId__d26CZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper_svg\":\"Loading_wrapper_svg__34QF_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"AppMenu_logo__2s0i4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperHeader\":\"AppHeader_wrapperHeader__xXvM-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"siteLayoutBackground\":\"AppLayout_siteLayoutBackground__2zJaL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"product\":\"ProductsIndex_product__2CaA3\"};","import React, {FC} from \"react\";\r\nimport {Link, Route, Routes} from \"react-router-dom\";\r\n\r\nexport const ClientLayout: FC = () => {\r\n    return (\r\n        <>\r\n            <Link to={'/admin'}>AdminArea</Link>\r\n            <Routes>\r\n                <Route path={'/'} element={<div>client layout</div>}/>\r\n                <Route path={'users/*'} element={<Users/>}/>\r\n                <Route path={'*'} element={<div>Client Error</div>}/>\r\n            </Routes>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst Users: FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<div>client users</div>}/>\r\n            <Route path={':id'} element={<div>client user</div>}/>\r\n        </Routes>\r\n    )\r\n}\r\n","import {gql} from '@apollo/client';\r\nimport {Auth, User} from '../../types/types';\r\n\r\nexport type MeData = { me: Auth }\r\nexport type MeVars = {}\r\n\r\n\r\nexport const ME_QUERY = gql`\r\n    query Me {\r\n        me {\r\n            user {\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                roles {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n            accessToken\r\n        }\r\n    }\r\n\r\n`\r\n","import {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {Auth} from \"../types/types\";\r\n\r\nlet initialState = {\r\n    authData: null as null | Auth,\r\n    isAuth: false,\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_AUTH_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setAuthData: (authData: Auth | null, isAuth: boolean) => ({\r\n        type: 'SET_AUTH_DATA',\r\n        payload: {authData, isAuth}\r\n    } as const),\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    localStorage.removeItem('token');\r\n    dispatch(actions.setAuthData(null, false));\r\n}\r\n\r\nexport default authReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType>;\r\n","import React from 'react';\r\nimport s from './Loading.module.css';\r\nimport {Spin} from \"antd\";\r\n\r\nexport const Loading: React.FC = () => {\r\n    return (\r\n        <div className={s.wrapper_svg}>\r\n            <Spin size={'large'}/>\r\n        </div>\r\n    );\r\n}","import { AppStateType } from './redux-store';\r\n\r\nexport const s_getAuthData = (state: AppStateType) => {\r\n    return state.auth.authData;\r\n}\r\n\r\nexport const s_getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth;\r\n}\r\n","import React, {FC, useState} from \"react\";\r\nimport {Layout, Menu} from \"antd\";\r\nimport {\r\n    AppstoreOutlined,\r\n    FileOutlined,\r\n    HomeOutlined,\r\n    SettingOutlined,\r\n    ShoppingOutlined,\r\n    TeamOutlined,\r\n    UserOutlined\r\n} from \"@ant-design/icons\";\r\nimport s from './AppMenu.module.css';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst {Sider} = Layout;\r\nconst {SubMenu} = Menu;\r\n\r\n\r\nexport const AppMenu: FC = () => {\r\n    const [collapsed, setCollapsed] = useState(false);\r\n\r\n    return (\r\n        <Sider collapsible collapsed={collapsed} onCollapse={setCollapsed}>\r\n            <div className={s.logo}/>\r\n            <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n                <Menu.Item key=\"1\" icon={<HomeOutlined/>}>\r\n                    <Link to={'/admin'}>Home</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" icon={<ShoppingOutlined/>}>\r\n                    <Link to={'/admin/products'}>Products</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" icon={<AppstoreOutlined/>}>\r\n                    <Link to={'/admin/categories'}>Categories</Link>\r\n                </Menu.Item>\r\n                <SubMenu key=\"sub1\" icon={<TeamOutlined/>} title=\"Users\">\r\n                    <Menu.Item key=\"4\">\r\n                        <Link to={'/admin/users'}>\r\n                            Customers\r\n                        </Link>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"5\">\r\n                        <Link to={'/admin/users'}>\r\n                            Employees\r\n                        </Link>\r\n                    </Menu.Item>\r\n                </SubMenu>\r\n                <Menu.Item key=\"6\" icon={<SettingOutlined/>}>\r\n                    Settings\r\n                </Menu.Item>\r\n                <Menu.Item key=\"7\" icon={<UserOutlined/>}>\r\n                    <Link to={'/'}>Client site</Link>\r\n                </Menu.Item>\r\n            </Menu>\r\n        </Sider>\r\n    );\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {Dropdown, Layout, Menu} from \"antd\";\r\nimport s from './AppHeader.module.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {s_getAuthData} from \"../../../redux/auth-selectors\";\r\nimport {Auth} from \"../../../types/types\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {logout} from \"../../../redux/auth-reducer\";\r\nimport {DownOutlined} from \"@ant-design/icons\";\r\n\r\nconst {Header} = Layout;\r\n\r\nexport const AppHeader: FC = () => {\r\n    const authData = useSelector(s_getAuthData) as Auth;\r\n    const dispatch = useDispatch();\r\n\r\n    const menu = (\r\n        <Menu>\r\n            <Menu.Item>\r\n                <Link to={''}>\r\n                    1st menu item\r\n                </Link>\r\n            </Menu.Item>\r\n            <Menu.Item onClick={() => dispatch(logout())}>\r\n                Logout\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n\r\n    return (\r\n        <Header className={s.wrapperHeader}>\r\n            <div></div>\r\n            <Dropdown overlay={menu} placement=\"topRight\">\r\n                <div>\r\n                    <span>{authData.user.firstName} {authData.user.lastName}</span>\r\n                    <DownOutlined/>\r\n                </div>\r\n            </Dropdown>\r\n        </Header>\r\n    );\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {Breadcrumb} from \"antd\";\r\n\r\nexport const AppBreadcrumb: FC = () => {\r\n    return (\r\n        <Breadcrumb style={{margin: '16px 0'}}>\r\n            <Breadcrumb.Item>User</Breadcrumb.Item>\r\n            <Breadcrumb.Item>Bill</Breadcrumb.Item>\r\n        </Breadcrumb>\r\n    );\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport s from './Home.module.css';\r\n\r\nexport const Home: FC = () => {\r\n    return (\r\n        <>\r\n            <div>HOME</div>\r\n            <Link to={'/'}>client site</Link>\r\n        </>\r\n    );\r\n}\r\n","import {gql} from '@apollo/client';\r\nimport {User} from '../../types/types';\r\n\r\nexport type GetUsersData = { getUsers: User[] }\r\nexport type GetUsersVars = { getUsersInput: getUsersInput }\r\n\r\ntype getUsersInput = { take: number, skip: number }\r\n\r\nexport const GET_USER_QUERY = gql`\r\n    query GetUsers($getUsersInput: GetUsersInput!){\r\n        getUsers(getUsersInput: $getUsersInput){\r\n            id\r\n            email\r\n            firstName\r\n            lastName\r\n            roles{\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n","import {useQuery} from '@apollo/client';\r\nimport React, {FC} from 'react';\r\nimport {Loading} from '../../../../components/Loading/Loading';\r\nimport {GetUsersData, GetUsersVars, GET_USER_QUERY} from '../../../GraphQL/users-query';\r\n\r\nexport const UsersIndex: FC = () => {\r\n    console.log('UsersIndex')\r\n    const {loading, error, data} = useQuery<GetUsersData, GetUsersVars>(\r\n        GET_USER_QUERY,\r\n        {variables: {getUsersInput: {skip: 0, take: 5}}}\r\n    );\r\n\r\n    if (loading)\r\n        return <Loading/>\r\n\r\n    if (error)\r\n        console.log(error)\r\n\r\n    return (\r\n        <>\r\n            <ul>\r\n                {data?.getUsers.map(user => (\r\n                    <li key={user.id}>\r\n                        <div>{user.email}</div>\r\n                        <div>{user.firstName}</div>\r\n                        <div>{user.lastName}</div>\r\n                        <ul>{user.roles.map(role => (\r\n                            <li key={role.id}>{role.name}</li>\r\n                        ))}</ul>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport s from './Error.module.css';\r\n\r\nexport const Error: FC = () => {\r\n    return (\r\n        <>\r\n            <div>Error</div>\r\n            <Link to={'/'}>Go home</Link>\r\n        </>\r\n    );\r\n};\r\n","import React, {FC} from \"react\";\r\nimport {Link, Route, Routes} from \"react-router-dom\";\r\nimport {UsersIndex} from \"./UsersIndex/UsersIndex\";\r\nimport {Error} from \"../Error/Error\";\r\n\r\nexport const UsersController: FC = () => {\r\n    console.log('UsersController')\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<UsersIndex/>}/>\r\n            <Route path={':id'} element={<div>user</div>}/>\r\n            <Route path={'add'} element={<div>add user</div>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n}\r\n","import {gql} from '@apollo/client';\r\nimport {Product} from '../../types/types';\r\n\r\nexport type CreateProductData = { createProduct: Product[] }\r\nexport type CreateProductVars = { createProductInput: createProductInput }\r\n\r\ntype createProductInput = { name: string }\r\n\r\nexport const CREATE_PRODUCT_MUTATION = gql`\r\n    mutation CreateProduct($createProductInput: CreateProductInput!){\r\n        createProduct(createProductInput: $createProductInput){\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport type ProductUpdateData = { updateProduct: Product }\r\nexport type ProductUpdateVars = { updateProductInput: Product }\r\n\r\nexport const PRODUCT_UPDATE_MUTATION = gql`\r\n    mutation UpdateProduct($updateProductInput: UpdateProductInput!){\r\n        updateProduct(updateProductInput: $updateProductInput){\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport type ProductRemoveData = { removeProduct: boolean }\r\nexport type ProductRemoveVars = { id: number }\r\n\r\nexport const PRODUCT_REMOVE_MUTATION = gql`\r\n    mutation RemoveProduct($id: Int!){\r\n        removeProduct(id: $id)\r\n    }\r\n`;\r\n\r\n","import {useMutation} from '@apollo/client';\r\nimport {Button, Form, Input} from 'antd';\r\nimport React, {FC} from 'react';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {CREATE_PRODUCT_MUTATION, CreateProductData, CreateProductVars} from '../../../GraphQL/products-mutation';\r\n\r\nexport const ProductCreate: FC = () => {\r\n    const [createProduct, {\r\n        loading,\r\n    }] = useMutation<CreateProductData, CreateProductVars>(CREATE_PRODUCT_MUTATION);\r\n    const navigate = useNavigate();\r\n\r\n    const onFinish = async (values: { name: string }) => {\r\n        console.log('Received values of form: ', values);\r\n        const response = await createProduct({variables: {createProductInput: {...values}}});\r\n        console.log(response);\r\n        if (response.data && !response.errors) {\r\n            navigate('..');\r\n        } else\r\n            console.log('error:', response.errors);\r\n    };\r\n\r\n    return (\r\n        <Form name=\"createProduct\" onFinish={onFinish}>\r\n            <Form.Item\r\n                name=\"name\"\r\n                label=\"Name\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input product name',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder=\"Product name\"/>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType={'submit'} loading={loading}>\r\n                    Create\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n","import {gql} from '@apollo/client';\r\nimport {Product} from '../../types/types';\r\n\r\nexport type GetProductsData = { getProducts: Product[] }\r\nexport type GetProductsVars = { getProductsInput: getProductsInput }\r\n\r\ntype getProductsInput = { take: number, skip: number }\r\n\r\nexport const GET_PRODUCTS_QUERY = gql`\r\n    query GetProducts($getProductsInput: GetProductsInput!){\r\n        getProducts(getProductsInput: $getProductsInput){\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport type GetProductData = { getProduct: Product }\r\nexport type GetProductVars = { id: number }\r\n\r\n\r\nexport const GET_PRODUCT_QUERY = gql`\r\n    query GetProduct($id: Int!){\r\n        getProduct(id: $id){\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\n","import {useQuery} from '@apollo/client';\r\nimport {Button} from 'antd';\r\nimport React, {FC, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Loading} from '../../../../components/Loading/Loading';\r\nimport {GET_PRODUCTS_QUERY, GetProductsData, GetProductsVars} from '../../../GraphQL/products-query';\r\nimport s from './ProductsIndex.module.css';\r\nimport {ProductRemove} from '../ProductRemove/ProductRemove';\r\nimport {Product} from '../../../../types/types';\r\n\r\nexport const ProductsIndex: FC = () => {\r\n    const {loading, error, data} = useQuery<GetProductsData, GetProductsVars>(\r\n        GET_PRODUCTS_QUERY,\r\n        {variables: {getProductsInput: {skip: 0, take: 10}}},\r\n    );\r\n\r\n    const [visibleRemove, setVisibleRemove] = useState(false);\r\n    const [productRemove, setProductRemove] = useState<Product | null>(null);\r\n\r\n    if (loading)\r\n        return <Loading/>;\r\n\r\n    if (error)\r\n        console.log(error);\r\n\r\n    return (\r\n        <>\r\n            <Link to={'create'}>\r\n                <Button>Create</Button>\r\n            </Link>\r\n            <ul>\r\n                {data?.getProducts.map(product => (\r\n                    <li key={product.id} className={s.product}>\r\n                        <div>\r\n                            <div>{product.name}</div>\r\n                        </div>\r\n                        <div>\r\n                            <Link to={`../${product.id}`}>\r\n                                <Button type={'default'}>View</Button>\r\n                            </Link>\r\n                            <Link to={`update/${product.id}`}>\r\n                                <Button type={'ghost'}>Update</Button>\r\n                            </Link>\r\n                            <Link to={`remove/${product.id}`}>\r\n                                <Button type={'primary'}>Remove</Button>\r\n                            </Link>\r\n                        </div>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {/*<ProductRemove visible={visibleRemove}*/}\r\n            {/*               productId={productRemove?.id}*/}\r\n            {/*               productName={productRemove?.name}*/}\r\n            {/*               setVisible={setVisibleRemove}/>*/}\r\n        </>\r\n    );\r\n};\r\n\r\n","import {useMutation, useQuery} from '@apollo/client';\r\nimport {Button, Form, Input} from 'antd';\r\nimport React, {FC} from 'react';\r\nimport {Navigate, useNavigate, useParams} from 'react-router-dom';\r\nimport {PRODUCT_UPDATE_MUTATION, ProductUpdateData, ProductUpdateVars} from '../../../GraphQL/products-mutation';\r\nimport s from './ProductUpdate.module.css';\r\nimport {GET_PRODUCT_QUERY, GetProductData, GetProductVars} from '../../../GraphQL/products-query';\r\nimport {Loading} from '../../../../components/Loading/Loading';\r\n\r\nexport const ProductUpdate: FC = () => {\r\n    const params = useParams();\r\n\r\n    const {loading, error, data} = useQuery<GetProductData, GetProductVars>(\r\n        GET_PRODUCT_QUERY,\r\n        {variables: {id: params.id ? parseInt(params.id) : 0}},\r\n    );\r\n    const [createProduct] = useMutation<ProductUpdateData, ProductUpdateVars>(PRODUCT_UPDATE_MUTATION);\r\n    const navigate = useNavigate();\r\n\r\n    if (!params.id)\r\n        return <Navigate to={'../../error'}/>;\r\n\r\n    if (loading)\r\n        return <Loading/>;\r\n\r\n    if (error)\r\n        console.log(error);\r\n\r\n    const onFinish = async (values: { id: number, name: string }) => {\r\n        console.log('Received values of form: ', values);\r\n        const response = await createProduct({variables: {updateProductInput: {...values}}});\r\n        console.log(response);\r\n        if (response.data && !response.errors) {\r\n            navigate('..');\r\n        } else\r\n            console.log('error:', response.errors);\r\n    };\r\n\r\n    return (\r\n        <Form name=\"createProduct\" onFinish={onFinish}\r\n              initialValues={{id: data?.getProduct.id, name: data?.getProduct.name}}>\r\n            <Form.Item name=\"id\" className={s.inputId}>\r\n                <Input type={'hidden'} className={s.inputId}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"name\"\r\n                label=\"Name\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input product name',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input placeholder=\"Product name\"/>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType={'submit'}>\r\n                    Update\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Navigate, useParams} from 'react-router-dom';\r\nimport {useQuery} from '@apollo/client';\r\nimport {GET_PRODUCT_QUERY, GetProductData, GetProductVars} from '../../../GraphQL/products-query';\r\nimport {Loading} from '../../../../components/Loading/Loading';\r\n\r\nexport const ProductView: FC = () => {\r\n    const params = useParams();\r\n\r\n    const {loading, error, data} = useQuery<GetProductData, GetProductVars>(\r\n        GET_PRODUCT_QUERY,\r\n        {variables: {id: params.id ? parseInt(params.id) : 0}},\r\n    );\r\n\r\n    if (!params.id)\r\n        return <Navigate to={'../../error'}/>;\r\n\r\n    if (loading)\r\n        return <Loading/>;\r\n\r\n    if (error)\r\n        console.log(error);\r\n\r\n    return (\r\n        <>\r\n            <div>id: {data?.getProduct.id}</div>\r\n            <div>name: {data?.getProduct.name}</div>\r\n        </>\r\n    );\r\n};\r\n","import React, {FC, useState} from 'react';\r\nimport {ModalWindow} from '../../../../components/Modal/ModalWindow';\r\nimport {useMutation} from '@apollo/client';\r\nimport {PRODUCT_REMOVE_MUTATION, ProductRemoveData, ProductRemoveVars} from '../../../GraphQL/products-mutation';\r\nimport {ProductView} from '../ProductView/ProductView';\r\nimport {Navigate, useNavigate, useParams} from 'react-router-dom';\r\nimport {Button} from 'antd';\r\nimport {Error} from '../../Error/Error';\r\n\r\ntype Props = {\r\n    visible: boolean,\r\n    productId: number | undefined,\r\n    productName: string | undefined,\r\n    setVisible: (flag: boolean) => void\r\n}\r\n\r\n// export const ProductRemove: FC<Props> = ({visible, productId, productName, setVisible}) => {\r\n//     const [removeProduct] = useMutation<ProductRemoveData, ProductRemoveVars>(PRODUCT_REMOVE_MUTATION);\r\n//\r\n//     const [confirmLoading, setConfirmLoading] = useState(false);\r\n//     const modalText = `Do you really want to delete product <strong>${productName}</strong>`;\r\n//\r\n//\r\n//     const handleCancel = () => {\r\n//         console.log('canceled', productName);\r\n//         setVisible(false);\r\n//     };\r\n//\r\n//     if (!productId)\r\n//         return null;\r\n//\r\n//     const handleOk = async () => {\r\n//         console.log('ok', productName);\r\n//         setConfirmLoading(true);\r\n//         const response = await removeProduct({variables: {id: productId}});\r\n//         if (response.data?.removeProduct) {\r\n//             setConfirmLoading(false);\r\n//             setVisible(false);\r\n//         } else\r\n//             console.log(response.errors);\r\n//     };\r\n//\r\n//     return (\r\n//         <ModalWindow\r\n//             visible={visible}\r\n//             title={'Confirmation'}\r\n//             modalText={modalText}\r\n//             handleCancel={handleCancel}\r\n//             handleOk={handleOk}\r\n//             confirmLoading={confirmLoading}\r\n//         />\r\n//     );\r\n// };\r\n\r\nexport const ProductRemove: FC = () => {\r\n    const params = useParams();\r\n    const [removeProduct, {loading}] = useMutation<ProductRemoveData, ProductRemoveVars>(PRODUCT_REMOVE_MUTATION);\r\n    const navigate = useNavigate();\r\n\r\n    if (!params || !params.id)\r\n        return <Navigate to={'../../error'}/>;\r\n\r\n    const onRemove = async () => {\r\n        const response = await removeProduct({variables: {id: parseInt(params.id as string)}});\r\n        if (response.data)\r\n            navigate('..');\r\n        else\r\n            console.log(response.errors);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ProductView/>\r\n            <Button onClick={onRemove} loading={loading}>Remove</Button>\r\n        </>\r\n    );\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {Error} from '../Error/Error';\r\nimport {ProductCreate} from './ProductCreate/ProductCreate';\r\nimport {ProductsIndex} from './ProductsIndex/ProductsIndex';\r\nimport {ProductUpdate} from './ProductUpdate/ProductUpdate';\r\nimport {ProductView} from './ProductView/ProductView';\r\nimport {ProductRemove} from './ProductRemove/ProductRemove';\r\n\r\nexport const ProductsController: FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<ProductsIndex/>}/>\r\n            <Route path={':id'} element={<ProductView/>}/>\r\n            <Route path={'create'} element={<ProductCreate/>}/>\r\n            <Route path={'update/:id'} element={<ProductUpdate/>}/>\r\n            <Route path={'remove/:id'} element={<ProductRemove/>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n};\r\n","import React, { FC } from 'react';\r\n\r\nexport const CategoriesIndex: FC = () => {\r\n    return(\r\n        <div>Categories</div>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {Link, Route, Routes} from \"react-router-dom\";\r\nimport {Error} from \"../Error/Error\";\r\nimport { CategoriesIndex } from \"./CategoriesIndex/CategoriesIndex\";\r\n\r\nexport const CategoriesController: FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<CategoriesIndex/>}/>\r\n            <Route path={'*'} element={<Error/>}/>\r\n        </Routes>\r\n    );\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {s_getIsAuth} from \"../../../redux/auth-selectors\";\r\nimport {Login} from \"../Login/Login\";\r\nimport {Layout} from \"antd\";\r\nimport {AppMenu} from \"../Menu/AppMenu\";\r\nimport {AppHeader} from \"../Header/AppHeader\";\r\nimport {AppBreadcrumb} from \"../Breadcrumb/AppBreadcrumb\";\r\nimport {Navigate, Route, Routes,} from \"react-router-dom\";\r\nimport {Home} from \"../Home/Home\";\r\nimport {UsersController} from \"../Users/UsersController\";\r\nimport s from './AppLayout.module.css';\r\nimport {UsersIndex} from \"../Users/UsersIndex/UsersIndex\";\r\nimport {Error} from \"../Error/Error\";\r\nimport { ProductsController } from \"../Products/ProductsController\";\r\nimport { CategoriesController } from \"../Categories/CategoriesController\";\r\n\r\nconst {Content} = Layout;\r\n\r\nexport const AdminLayout: FC = () => {\r\n    console.log('AppLayout')\r\n    const isAuth = useSelector(s_getIsAuth);\r\n\r\n    if (!isAuth)\r\n        return <Navigate to={'/admin/login'}/>\r\n\r\n    return (\r\n        <Layout style={{minHeight: '100vh'}}>\r\n            <AppMenu/>\r\n            <Layout className=\"site-layout\">\r\n                <AppHeader/>\r\n                <Content style={{margin: '0 16px'}}>\r\n                    <AppBreadcrumb/>\r\n                    <div className={s.siteLayoutBackground}>\r\n                        <Routes>\r\n                            <Route path={'/'} element={<Home/>}/>\r\n                            <Route path={'products/*'} element={ <ProductsController/>}/>\r\n                            <Route path={'categories/*'} element={ <CategoriesController/>}/>\r\n                            <Route path={'users/*'} element={ <UsersController/>}/>\r\n                            <Route path={'*'} element={<Error/>}/>\r\n                        </Routes>\r\n                    </div>\r\n                </Content>\r\n            </Layout>\r\n        </Layout>\r\n    );\r\n}\r\n","import {gql} from '@apollo/client';\r\nimport {Auth} from '../../types/types';\r\n\r\nexport type LoginData = { login: Auth }\r\nexport type LoginVars = { loginInput: loginInput }\r\n\r\ntype loginInput = { email: string, password: string }\r\n\r\nexport const LOGIN_MUTATION = gql`\r\n    mutation Login($loginInput: LoginInput!){\r\n        login(loginInput: $loginInput){\r\n            accessToken\r\n            user{\r\n                id\r\n                email\r\n                firstName\r\n                lastName\r\n                roles{\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n","import React, {FC} from \"react\";\r\nimport s from './Login.module.css';\r\nimport {Form, Input, Button, Checkbox, Badge} from 'antd';\r\nimport {UserOutlined, LockOutlined} from '@ant-design/icons';\r\nimport {Link, Navigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {s_getIsAuth} from \"../../../redux/auth-selectors\";\r\nimport {useMutation} from \"@apollo/client\";\r\nimport {LoginData, LoginVars, LOGIN_MUTATION} from \"../../GraphQL/auth-mutation\";\r\nimport {actions} from \"../../../redux/auth-reducer\";\r\n\r\nexport const Login: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector(s_getIsAuth);\r\n    const [login, {\r\n        data,\r\n        loading,\r\n        error\r\n    }] = useMutation<LoginData, LoginVars>(LOGIN_MUTATION);\r\n\r\n    if (isAuth)\r\n        return <Navigate to={'/admin'}/>\r\n\r\n    const onFinish = async (values: { email: string, password: string, remember: boolean }) => {\r\n        console.log('Received values of form: ', values);\r\n        const response = await login({variables: {loginInput: {email: values.email, password: values.password}}});\r\n        console.log(response)\r\n        if (response.data && !response.errors) {\r\n            localStorage.setItem('token', response.data.login.accessToken)\r\n            dispatch(actions.setAuthData(response.data.login, true));\r\n        } else\r\n            console.log('error:', error)\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            name=\"normal_login\"\r\n            className={s.loginForm}\r\n            initialValues={{remember: true}}\r\n            onFinish={onFinish}\r\n        >\r\n            <h2 className={s.title}>Admin Panel</h2>\r\n            <Form.Item\r\n                name=\"email\"\r\n                rules={[{required: true, message: 'Please input your Email!'}]}\r\n            >\r\n                <Input prefix={<UserOutlined className=\"site-form-item-icon\"/>} placeholder=\"Email\" type={'email'}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"password\"\r\n                rules={[{required: true, message: 'Please input your Password!'}]}\r\n            >\r\n                <Input\r\n                    prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                />\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle className={s.rememberMe}>\r\n                    <Checkbox>\r\n                        <span className={s.white}>Remember me</span>\r\n                    </Checkbox>\r\n                </Form.Item>\r\n\r\n                <Link className={s.forgotPass} to={''}>\r\n                    Forgot password\r\n                </Link>\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\" className={['login-form-button', s.submit].join(' ')}>\r\n                    Log in\r\n                </Button>\r\n                <span className={s.white}>Or </span>\r\n                <Link to={'/admin-area/register'}>register now!</Link>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n}\r\n","import React, {FC, useEffect} from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport {ClientLayout} from \"./client-area/Layout/ClientLayout\";\r\nimport {useQuery} from '@apollo/client';\r\nimport {ME_QUERY, MeData, MeVars} from './admin-area/GraphQL/auth-query';\r\nimport {useDispatch} from 'react-redux';\r\nimport {actions} from './redux/auth-reducer';\r\nimport {Loading} from './components/Loading/Loading';\r\nimport {AdminLayout} from './admin-area/components/Layout/AdminLayout';\r\nimport { Login } from './admin-area/components/Login/Login';\r\n\r\nexport const App: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const {data, error, loading} = useQuery<MeData, MeVars>(ME_QUERY);\r\n\r\n    useEffect(() => {\r\n        if (data && !error) {\r\n            dispatch(actions.setAuthData(data.me, true))\r\n        }\r\n    }, [data, error]);\r\n\r\n    if (loading)\r\n        return <Loading/>\r\n\r\n    return (\r\n        <Routes>\r\n            {/*<Route path={'/'}>*/}\r\n            {/*    <AppLayout/>*/}\r\n            {/*</Route>*/}\r\n            {/*<Route path={'/admin'}>*/}\r\n            {/*    <AdminLayout/>*/}\r\n            {/*</Route>*/}\r\n            {/*<Route path={'*'} element={<Error/>}/>*/}\r\n\r\n            <Route path=\"/\" element={<ClientLayout/>}/>\r\n            <Route path=\"admin/*\" element={<AdminLayout/>}/>\r\n            <Route path={'admin/login'} element={<Login/>}/>\r\n        </Routes>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport authReducer from './auth-reducer';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\n\r\nlet rootReducer = combineReducers({\r\n    auth: authReducer,\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<Promise<void>, AppStateType, unknown, A>;\r\n\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {App} from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport store from \"./redux/redux-store\";\r\nimport {Provider} from 'react-redux';\r\nimport {\r\n    ApolloClient,\r\n    InMemoryCache,\r\n    ApolloProvider,\r\n} from \"@apollo/client\";\r\n\r\nconst client = new ApolloClient({\r\n    uri: '/graphql',\r\n    credentials: 'include',\r\n    cache: new InMemoryCache(),\r\n    headers: {\r\n        authorization: localStorage.getItem('token') ? `Bearer ${localStorage.getItem('token')}` : \"\",\r\n    },\r\n    defaultOptions: {\r\n        watchQuery: {\r\n            fetchPolicy: 'no-cache',\r\n            errorPolicy: 'ignore',\r\n        },\r\n        query: {\r\n            fetchPolicy: 'no-cache',\r\n            errorPolicy: 'all',\r\n        },\r\n    }\r\n});\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <ApolloProvider client={client}>\r\n                    <App/>\r\n                </ApolloProvider>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"Login_loginForm__1TaLU\",\"title\":\"Login_title__1yFpQ\",\"white\":\"Login_white__1Hmsg\",\"rememberMe\":\"Login_rememberMe__2NYZe\",\"forgotPass\":\"Login_forgotPass__3PeBp\",\"submit\":\"Login_submit__2M9pX\"};"],"sourceRoot":""}